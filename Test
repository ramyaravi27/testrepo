index.html

<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>DC Documentation</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/css/bootstrap.min.css"
  integrity="sha384-zCbKRCUGaJDkqS1kPbPd7TveP5iyJE0EjAuZQTgFLD2ylzuqKfdKlfG/eSrtxUkn" crossorigin="anonymous">
  <style>
    @font-face {
      font-family: 'Poppins-Bold';
      src: url('./assets/fonts/poppins/Poppins-Bold.ttf');
    }

    @font-face {
      font-family: 'Poppins-Medium';
      src: url('./assets/fonts/poppins/Poppins-Medium.ttf');
    }

    @font-face {
      font-family: 'Poppins-Regular';
      src: url('./assets/fonts/poppins/Poppins-Regular.ttf');
    }
    </style>
  <link rel="preconnect" href="https://fonts.gstatic.com">
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
</head>
<body>
  <script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js"
  integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
  crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"
  integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN"
  crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/js/bootstrap.min.js"
  integrity="sha384-VHvPCCyXqtD5DqJeNxl2dtTyhF78xXNXdkwX1CZeRusQfRKp+tA7hAShOK/B/fQ2"
  crossorigin="anonymous"></script>
  <app-root></app-root>
</body>
</html>


login.html

<body>
  <div class="limiter" *ngIf="showLoginForm">
    <div class="container-login100"
      style="background-image: url(./assets/logon/bg_1.svg); background-repeat: repeat; background-size: cover;">
      <div class="wrap-login100"
        style="width: 756px;background: #fff;border-radius: 10px;overflow: visible;display: -webkit-box;    display: -webkit-flex; display: -moz-box; display: -ms-flexbox;display: flex; flex-wrap: wrap; justify-content: space-around; padding: 30px 50px 15px 10px;">
        <div class="login100-pic">
          <img src="./assets/logon/login-image.svg" alt="IMG"
            style="width: 570px; position: relative; right: 150px;top: 10px;max-width: 900px;">
        </div>
        <form class="login100-form validate-form"
          *ngIf="!resetPWD && !capcha && !enterNewPassword && !otpNumber && !forgotPasswordOtp">
          <span class="login100-form-title">
            <span style="float: right;padding-bottom: 0px"> <span class="font-size-32"
                style="color: #6EACAF !important;">D</span><span class="text-secondary font-size-32"
                style="color: #B3B3B3;">C</span></span>
          </span>
          <div style="margin-top: 50px;">
            <div class="wrap-input100 validate-input" data-validate="Valid email is required: ex@abc.xyz">
              <input class="input100" type="text" autocomplete="off" placeholder="Username"
                pattern="^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$" required #username="ngModel"
                [(ngModel)]="userName" [ngModelOptions]="{standalone: true}" caps-lock (keyup)="ErrorMsg(userName)"
                (focusout)="shownCaptcha(userName)"  />
              <span class="focus-input100"></span>
              <span class="symbol-input100">
                <i class="fa fa-envelope" aria-hidden="true" style="position: relative;bottom: 5px;"></i>
              </span>
              <div class="errorlab">
                <span *ngIf="msgView && username.touched && username.invalid && !username.hasError('pattern')"
                  class="form-text">
                  Please enter the email ! </span>
                <span style="display: block" class="form-text" [hidden]="!username.hasError('pattern')">Email format
                  should
                  be <small><strong>user@dccpedge.com</strong> </small>
                </span>
              </div>
            </div>
            <div class="wrap-input100 validate-input" data-validate="Password is required">
              <input type="password" id="password" class="input100 input-password" required placeholder="Password" onpaste="return false;" ondrop="return false;"
                [ngModelOptions]="{standalone: true}" [(ngModel)]="password" #pwd="ngModel"
                (keyup)="ErrorMsg(password)">
              <span class="focus-input100"></span>
              <span class="symbol-input100">
                <i class="fa fa-lock" aria-hidden="true" style="position: relative;bottom: 6px;left: 5px;"></i>
              </span>
              <em class="fa fa-eye-slash open-close-eye" id="eyemask" (click)="eyemask()"></em>
              <div class="errorlab">
                <span *ngIf="pwd.touched && pwd.invalid && msgView" class="form-text">
                  Please enter the password !
                </span>
              </div>
            </div>
            <div class="wrap-input100 validate-input" *ngIf="enable_CaptchaField">
              <span class="txt2" style="font-weight: 500;display: block;text-align: center;">Type the characters you see in the picture below.  Please note that letters are case sensitive</span>
              <div class="col-12 text-center">
                <img id="Captcha_Image" style="background-image: url('./assets/logon/captcha_background.png');"
                  [src]="img_Captcha" alt="">
                <a href="javascript:void(0);" (click)="recall_Captcha(userName);"><span style="font-size:12px;"
                    class="fa fa-refresh"></span></a>
                <input class="input100" type="text" style="padding-left: 50px;" autocomplete="off"
                  placeholder="Enter your captcha code " [ngModelOptions]="{standalone: true}"
                  [(ngModel)]="captcha_Field" #captcha="ngModel" required maxlength="6" />
              </div>
            </div>
            <span style="text-align: center; height:10px">
              <label *ngIf=" error_msg" class="form-text">{{errorMsg}}</label>
            </span>
            <span style="text-align: center; height:10px">
              <label *ngIf="capslockOn" class="form-text">CapsLock is On</label>
            </span>
            <div class="container-login100-form-btn"  style="padding-top: 5px !important;">
              <button class="login100-form-btn" style="background-color: #6EACAF !important"(click)="getCurrentUserTokenStatus();" type="submit">
                <span *ngIf="loginSpinner" class="spinner-border spinner-border-sm text-white"  role="status" aria-hidden="true">&nbsp;&nbsp;&nbsp;</span>Login
              </button>
              
            <div class="float-right mt-2 mr-2">
              <span class=" txt1">
              </span>
              <a class="txt2" style="cursor: pointer;" (click)="resetpwd('reset')">
                Forgot Password?
              </a>
            </div>
          </div> 
      </div>
  <!-- <div  class="modal-content" *ngIf="show">
            
    <div class="modal-body" style="padding: 20px;">
      <div class="content">
        <div class="form-wrapper">
          <div class="form-group">
            <label class="form-label"> your login session is already active now, would you like to continue here </label>
          </div>
          <div class="form-group" class="mt-20">
            <button type="button" class="btn save_btn" (click)="yes();" style="margin-right: 10px;background-color: #6EACAF !important;
            border-color: #6EACAF !important;color: white !important;">Yes</button>
            <button type="button" class="btn cancel_btn" style="background-color: #c9656a !important;
            border-color: #c9656a !important;color: white !important;" (click)="logout()">No</button>
          </div>
        </div>
      </div>
    </div>
    
  
  </div> -->
          <!-- 
          <div  class="modal-content" *ngIf="show">
            
             <div class="modal-body" style="padding: 20px;">
               <div class="content">
                 <div class="form-wrapper">
                   <div class="form-group">
                     <label class="form-label"> your login session is already active now, would you like to continue here </label>
                   </div>
                   <div class="form-group" class="mt-20">
                     <button type="button" class="btn save_btn" (click)="yes();" style="margin-right: 10px;background-color: #6EACAF !important;
                     border-color: #6EACAF !important;color: white !important;">Yes</button>
                     <button type="button" class="btn cancel_btn" style="background-color: #c9656a !important;
                     border-color: #c9656a !important;color: white !important;" (click)="logout()">No</button>
                   </div>
                 </div>
               </div>
             </div>
             
           </div>
           </div>
           </div> -->
        </form>
        <form class="login100-form validate-form" *ngIf="resetPWD" #userNameEntry="ngForm" id="frmUserNameEntry"
          (ngSubmit)="btnGetUserName(userNameEntry.value,userNameEntry)">
          <span class="login100-form-title ">
            <span style="float: right;padding-bottom: 0px"> <span class="font-size-32"
                style="color: #6EACAF !important;">D</span><span class="text-secondary font-size-32"
                style="color: #B3B3B3;">C</span></span>
          </span>
          <div style="margin-top: 50px;">
            <div class="wrap-input100 validate-input" data-validate="Valid email is required: ex@abc.xyz">
              <input class="input100" required type="text" placeholder="Enter Username" name="Username"
                autocomplete="off" [(ngModel)]="forgotPasswordData.username">
              <span class="focus-input100"></span>
              <span class="symbol-input100">
                <i class="fa fa-envelope" aria-hidden="true"></i>
              </span>
            </div>
            <span style="text-align: center; height:10px">
              <label *ngIf="user_ErrorMsg" class="form-text">{{userErrorMsg}}</label>
            </span>
            <span style="text-align: center; height:10px">
              <label *ngIf="capslockOn" class="form-text">CapsLock is On</label>
            </span>
            <div class="container-login100-form-btn">
              <button class="login100-form-btn" style="background-color: #B3B3B3 !important ;" type="submit" *ngIf="click"
                [disabled]="userNameEntry"><span *ngIf="SubmitSpinner" class="spinner-border spinner-border-sm text-white"  role="status" aria-hidden="true">&nbsp;&nbsp;&nbsp;</span>Submited
              </button>
              <button class="login100-form-btn" style="background-color: #6EACAF !important" type="submit" *ngIf="!click"
                [disabled]="userNameEntry.invalid"><span *ngIf="SubmitSpinner" class="spinner-border spinner-border-sm text-white"  role="status" aria-hidden="true">&nbsp;&nbsp;&nbsp;</span>Submit
              </button>
            </div>
            <div class="text-center p-t-12">
              <span class="txt1">
              </span>
              <a class="txt2" style="cursor: pointer;" (click)="newPassword('login')">
                Back to Login
              </a>
            </div>
          </div>
        </form>
        <form class="login100-form validate-form" *ngIf="capcha" #capchaCodeEntry="ngForm" id="frmcapchaCodeEntry"
          (ngSubmit)="btnGetcapchaCode(capchaCodeEntry.value,capchaCodeEntry)">
          <span class="login100-form-title ">
            <span style="float: right;padding-bottom: 0px"> <span class="font-size-32"
                style="color: #6EACAF !important;">D</span><span class="text-secondary font-size-32"
                style="color: #B3B3B3;">C</span></span>
          </span>
          <div style="margin-top: 50px;">
            <div class="wrap-input100 validate-input" data-validate="Valid email is required: ex@abc.xyz">
              <input class="input100" type="text" placeholder="Enter code" name="capchaCode" required autocomplete="off"
                [(ngModel)]="forgotPasswordData.captchacode">
              <span class="focus-input100"></span>
            </div>
            <img src="data:image/png;base64,{{imageChange}}" alt='' style="width: 100%;height: auto;">
            <div class="text-center p-t-12">
              <a class="txt2" style="position: relative;right: 30%;cursor: pointer;" (click)="  tryOtherImage()">
                Try Other Image
              </a>
            </div>
            <span style="text-align: center; height:10px">
              <label *ngIf="captcha_ErrorMsg" class="form-text">{{captchaErrorMsg}}</label>
            </span>
            <span style="text-align: center; height:10px">
              <label *ngIf="capslockOn" class="form-text">CapsLock is On</label>
            </span>
            <div class="container-login100-form-btn">
              <button class="login100-form-btn" style="background-color: #6EACAF !important" type="submit"
                [disabled]="capchaCodeEntry.invalid"><span *ngIf="SubmitSpinner" class="spinner-border spinner-border-sm text-white"  role="status" aria-hidden="true">&nbsp;&nbsp;&nbsp;</span>Submit
              </button>
            </div>
            <div class="text-center p-t-12">
              <span class="txt1">
              </span>
              <a class="txt2" style="cursor: pointer;" (click)="newPassword('login')">
                Back to Login
              </a>
            </div>
          </div>
        </form>
        <form class="login100-form validate-form" *ngIf="enterNewPassword" #newPasswordDetail="ngForm"
          id="frmnewPasswordDetails" (ngSubmit)="btnGetNewPasswordDetails(newPasswordDetail.value,newPasswordDetails)">
          <span class="login100-form-title ">
            <span style="float: right;padding-bottom: 0px"> <span class="font-size-32"
                style="color: #6EACAF !important;">D</span><span class="text-secondary font-size-32"
                style="color: #B3B3B3;">C</span></span>
          </span>
          <div style="margin-top: 50px;">
            <div class="wrap-input100 validate-input">
              <input type="password" required id="oldpassword" class="input100 input-password"
                placeholder="New Password" [(ngModel)]="forgotPasswordData.newPassword" #newPasswordData="ngModel"
                name="newPasswordData" style="font-family: 'Calibri';font-size: 15px;"
                pattern="^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[#$^+=!*()@%&]).{8,32}$" maxlength="32"
                (keyup)="onKey1($event)" (focus)="focus($event,'show')" (blur)="outfocus($event,'show')">
              <span class="focus-input100"></span>
              <span class="symbol-input100">
                <i class="fa fa-lock" aria-hidden="true"></i>
              </span>

              <em class="fa fa-eye-slash open-close-eye" id="eyemask" (click)="eyemask()"></em>
              <span class="tooltiptext2" id="show">
                <i *ngIf="!passkey3" class="fa fa-times password-validaition-before" aria-hidden="true"></i>
                <i *ngIf="passkey3" class="fa fa-check password-validaition-after" aria-hidden="true"></i>Must be
                <strong>8 t0 32 characters long</strong><br>
                <i *ngIf="!passkey1" class="fa fa-times password-validaition-before" aria-hidden="true"></i>
                <i *ngIf="passkey1" class="fa fa-check password-validaition-after" aria-hidden="true"></i>Must have
                <strong>1 uppercase letter</strong><br>
                <i *ngIf="!passkey" class="fa fa-times password-validaition-before" aria-hidden="true"></i>
                <i *ngIf="passkey" class="fa fa-check password-validaition-after" aria-hidden="true"></i>Must have
                <strong>1 lowercase letter</strong><br>
                <i *ngIf="!passkey2" class="fa fa-times password-validaition-before" aria-hidden="true"></i>
                <i *ngIf="passkey2" class="fa fa-check password-validaition-after" aria-hidden="true"></i>Must have
                <strong>1 number</strong><br>
                <i *ngIf="!passkey4" class="fa fa-times password-validaition-before" aria-hidden="true"></i>
                <i *ngIf="passkey4" class="fa fa-check password-validaition-after" aria-hidden="true"></i>Must have
                <strong>1 special character like(!@#$,etc.)</strong><br>
              </span>
            </div>

            <div *ngIf="newPasswordData.invalid && (newPasswordData.dirty || newPasswordData.touched)" class="form-text"
              style="text-align: center;">
              <div [hidden]="!newPasswordData.hasError('pattern')">Please create a password per the requirements below
              </div>
            </div>
            <div class="wrap-input100 validate-input">
              <input type="password" id="newpassword" required class="input100 input-password 12"
                style="font-family: 'Calibri';font-size: 15px;" placeholder="Confirm Password" (keyup)="onKey2($event)"
                pattern="^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[#$^+=!*()@%&]).{8,32}$" #confirmPassword="ngModel"
                [(ngModel)]="forgotPasswordData.confirmPassword" (focus)="focus($event,'shown')"
                (blur)="outfocus($event,'shown')" name="confirmPassword">
              <span class="focus-input100"></span>
              <span class="symbol-input100">
                <i class="fa fa-lock" aria-hidden="true"></i>
              </span>
              <em class="fa fa-eye-slash open-close-eye" id="eyemask1" (click)="eyemask1()"></em>
              <span class="tooltiptext2" id="shown">
                <i *ngIf="!passval3" class="fa fa-times password-validaition-before" aria-hidden="true"></i>
                <i *ngIf="passval3" class="fa fa-check password-validaition-after" aria-hidden="true"></i>Must be
                <strong>8 t0 32 characters long</strong><br>
                <i *ngIf="!passval1" class="fa fa-times password-validaition-before" aria-hidden="true"></i>
                <i *ngIf="passval1" class="fa fa-check password-validaition-after" aria-hidden="true"></i>Must have
                <strong>1 uppercase letter</strong><br>
                <i *ngIf="!passval" class="fa fa-times password-validaition-before" aria-hidden="true"></i>
                <i *ngIf="passval" class="fa fa-check password-validaition-after" aria-hidden="true"></i>Must have
                <strong>1 lowercase letter</strong><br>
                <i *ngIf="!passval2" class="fa fa-times password-validaition-before" aria-hidden="true"></i>
                <i *ngIf="passval2" class="fa fa-check password-validaition-after" aria-hidden="true"></i>Must have
                <strong>1 number</strong><br>
                <i *ngIf="!passval4" class="fa fa-times password-validaition-before" aria-hidden="true"></i>
                <i *ngIf="passval4" class="fa fa-check password-validaition-after" aria-hidden="true"></i>Must have
                <strong>1 special character like(!@#$,etc.)</strong><br>
              </span>
            </div>
            <div *ngIf="confirmPassword.invalid && (confirmPassword.dirty || confirmPassword.touched)" class="form-text"
              style="text-align: center;">
              <div [hidden]="!confirmPassword.hasError('pattern')">Please create a password per the requirements below
              </div>
            </div>
            <span style="text-align: center; height:10px">
              <label *ngIf="password_ErrorMsg" class="form-text">{{passwordErrorMsg}}</label>
            </span>
            <span style="text-align: center; height:10px">
              <label *ngIf="showMsg24hrs" class="form-text">{{msg24hrs}}</label>
            </span>
            <span style="text-align: center; height:10px">
              <label *ngIf="capslockOn" class="form-text">CapsLock is On</label>
            </span>
            <div class="container-login100-form-btn">
              <button class="login100-form-btn" style="background-color: #6EACAF !important" type="submit"
                [disabled]=" newPasswordData.hasError('pattern') || newPasswordDetail.invalid"><span *ngIf="SubmitSpinner" class="spinner-border spinner-border-sm text-white"  role="status" aria-hidden="true">&nbsp;&nbsp;&nbsp;</span>Submit
              </button>
            </div>
            <div class="text-center p-t-12">
              <span class="txt1">
              </span>
              <a class="txt2" style="cursor: pointer;" (click)="newPassword('login')">
                Back to Login
              </a>
            </div>
          </div>
        </form>
        <form class="login100-form validate-form" *ngIf="otpNumber" #otpNumberEntry="ngForm" id="frmOtpNumberEntry"
          (ngSubmit)="btnOtpNumber(otpNumberEntry.value,otpNumberEntry)">
          <span class="login100-form-title ">
            <span style="float: right;padding-bottom: 0px"> <span class="font-size-32"
                style="color: #6EACAF !important;">D</span><span class="text-secondary font-size-32"
                style="color: #B3B3B3;">C</span></span>
          </span>
          <div style="margin-top: 50px;">
            <div class="wrap-input100 validate-input">
              <input class="input100" required type="text" placeholder="Enter OTP Number" name="otpNumbervalue"
                autocomplete="off" [(ngModel)]="otpNumbervalue">
              <span style="text-align: center;height: 10px;">
                <label *ngIf="!otpNumber_ErrorMsg" class="form-text" style="color: #666666 !important;">OTP has been
                  sent to your registered EMail ID</label>
              </span>
              <span style="text-align: center; height:10px">
                <label *ngIf="otpNumber_ErrorMsg" class="form-text">{{otpNumberErrorMsg}}</label>
              </span>
            </div>
            <div class="container-login100-form-btn">
              <button class="login100-form-btn" style="background-color: #6EACAF !important" type="submit"
                [disabled]="otpNumberEntry.invalid"><span *ngIf="SubmitSpinner" class="spinner-border spinner-border-sm text-white"  role="status" aria-hidden="true">&nbsp;&nbsp;&nbsp;</span>Submit
              </button>
            </div>
            <div class="text-center p-t-12">
              <span class="txt1">
              </span>
              <a class="txt2" style="cursor: pointer;" (click)="newPassword('login')">
                Back to Login
              </a>
            </div>
          </div>
        </form>
        <form class="login100-form validate-form" *ngIf="forgotPasswordOtp" #forgotPasswordOtpEntry="ngForm"
          id="forgotPasswordOtpEntryForm"
          (ngSubmit)="btnForgotOtpNumber(forgotPasswordOtpEntry.value,forgotPasswordOtpEntry)">
          <span class="login100-form-title ">
            <span style="float: right;padding-bottom: 0px"> <span class="font-size-32"
                style="color: #6EACAF !important;">D</span><span class="text-secondary font-size-32"
                style="color: #B3B3B3;">C</span></span>
          </span>
          <div style="margin-top: 50px;">
            <div class="wrap-input100 validate-input">
              <input class="input100" required type="text" placeholder="Enter OTP Number" name="forgotOtpNumbervalue"
                autocomplete="off" [(ngModel)]="forgotOtpNumbervalue">
              <span style="text-align: center;height: 10px;">
                <label *ngIf="!showMsghrs" class="form-text" style="color: #666666 !important;">OTP has been sent to your registered EMail ID</label>
              </span>

              <span style="text-align: center; height:10px">
                <label *ngIf="showMsghrs" class="form-text">{{msghrs}}</label>
              </span>
              <div *ngIf="buttons">
                <span style="text-align: center; height:10px">
                  <a style="cursor:pointer;margin-left: 196px;" (click)="resetpwd('reset')"><span *ngIf="SubmitSpinner" class="spinner-border spinner-border-sm text-white"  role="status" aria-hidden="true">&nbsp;&nbsp;&nbsp;</span>ReSend OTP</a>
                </span>
              </div>
            </div>
            <div class="container-login100-form-btn">
              <button class="login100-form-btn" style="background-color: #6EACAF !important" type="submit"
                [disabled]="forgotPasswordOtpEntry.invalid"><span *ngIf="SubmitSpinner" class="spinner-border spinner-border-sm text-white"  role="status" aria-hidden="true">&nbsp;&nbsp;&nbsp;</span>Submit
              </button>
            </div>
            <div class="text-center p-t-12">
              <span class="txt1">
              </span>
              <a class="txt2" style="cursor: pointer;" (click)="newPassword('login')">
                Back to Login
              </a>
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>

  <div class="row mx-auto mt-4 mb-5" *ngIf="showSecurityPopUp">
    <div class="col-xl-12">
      <div class="card">
        <div class="card-body SecurityPopUp" style="padding: 3rem;">
          <h3 class="SecurityPopUp_h3">Security question to update password</h3>
          <h4 class="SecurityPopUp_h4">Please answer your security question according to your setting </h4>
          <form #securityquestionform="ngForm" id="sqForm" (ngSubmit)="btnSecurityQuestion(securityquestionform.value)">
            <div class="row mt-3">
              <div class="col-lg-4">
                <div class="form-group">
                  <label class="SecurityPopUp_label"> Security Question</label>
                </div>
              </div>

              <div class="col-lg-8">
                <div class="form-group">
                  <label class="SecurityPopUp_label">{{showSecurityQuestion}}</label>
                </div>
              </div>

            </div>
            <div class="row mt-3">
              <div class="col-lg-4">
                <div class="form-group">
                  <label class="SecurityPopUp_label">Answer</label>
                </div>
              </div>

              <div class="col-lg-8">
                <div class="form-group">
                  <input placeholder="Answer" required class="form-control form-control-line SecurityPopUp_input"
                    name="Answer" [(ngModel)]="Answer" type="text" autocomplete="off" #SQA>
                </div>
              </div>

            </div>
            <div class="row mt-3">
              <div class="col-lg-12" style="text-align: center;">
                <button [disabled]="!securityquestionform.valid" class="btn  btn-primary mr-3 SecurityPopUp_continue"
                  type="submit">Continue
                </button>
                <button class="btn btn-light SecurityPopUp_back" type="button"
                  (click)="newPassword('login')">BacktoSignIn
                </button>
              </div>
            </div>
          </form>

        </div>
      </div>
    </div>
  </div>

  <ng-template #submitAnswer>
    <div class="modal-body text-center" *ngIf="show_submitPopup">
      <h4 class="submit_h4">Do you want to submit your Answer?</h4>
      <button class="btn mr-3 submit_Answer" type="button" (click)="btnsubmit_Answer()">Yes
      </button>
      <button class="btn btn-light decline_Answer" type="button" (click)="btndecline_Submit()">No
      </button>
    </div>
    <div class="modal-body text-center" *ngIf="wrongAnswer_Alert">
      <h4 class="submit_h4">{{Answer_error_msg}}</h4>
    </div>
  </ng-template>
<div style="height: 200px; width: 10px ;" >
  <ng-template #tellTheUserAboutConcurrentSession >
    <div class="modal-header" style="background-color:#6EACAF;height: 3.5rem;padding: 1rem;">
      <h5 class="modal-title" align="left" style="font-weight:bold ; color:white ; font-family:Poppins-bold;">Session Information</h5>
    </div>
    <div class="modal-body text-center"  >
      <p style="font-family:Poppins-Regular;"> Your login session is already active now, would you like to continue here ?</p>
      <!-- <button class="btn mr-3 submit_Answer" type="button" (click)="forceLogin('Yes')" *ngIf="loginSpinner==false">
      </button> -->
      <button class="btn submit_Answer" type="button"  (click)="forceLogin('Yes')" >
        <span *ngIf="PopUpSpinner && show_SessionPopup;" class="spinner-border spinner-border-sm text-white"  role="status" aria-hidden="true"></span>
        Yes
      </button>
      <!-- *ngIf="!loginSpinner" -->
      &nbsp;&nbsp;
      <button class="btn btn-light decline_Answer" type="button" (click)="forceLogin('No');">No
      </button>
    <!-- </div>
    <div> -->
    <p style="color:rgb(201, 101, 106);margin-top: 10px;margin-bottom: 0rem;" align="center"> <strong style="color:black;">Note :</strong> Clicking <span style="color:#6EACAF;font-weight: bold;">Yes</span> will terminate that active session ! </p>
  </div>
  </ng-template>
</div>

  <footer class="air__layout__footer">
    <div class="air__footer">
      <div class="air__footer__inner">
        <div class="row">
          <div class="col-md-12">
            <p>
              © <span id="year">{{getFullYear()}}</span> SolvEdge Inc. | All Rights Reserved
            </p>
          </div>
        </div>
      </div>
    </div>
  </footer>
  <script src="vendor/jquery/jquery-3.2.1.min.js"></script>
  <script src="vendor/bootstrap/js/popper.js"></script>
  <script src="vendor/bootstrap/js/bootstrap.min.js"></script>
  <script src="vendor/select2/select2.min.js"></script>
  <script src="vendor/tilt/tilt.jquery.min.js"></script>
  <script>
    $('.js-tilt').tilt({
      scale: 1.1
    })
  </script>
  <!-- <div id="myModal" #browserdetail class="modal fade bd-example-modal-lg">
  <div class="modal-dialog modal-lg">
     <div class="modal-content">
      
         <div class="modal-body">
         <p style="color: #000000;"><b>The DC portal is best viewed with the following browser versions:</b></p>
         <ul>
           <li>Firefox 40 and above</li>
           <li>Safari 11 and above</li>
           <li>Chrome 46 and above</li>
           <li>Microsoft Edge 19 and above</li>
         </ul>

         <br>

         <p style="color: #000000;"><b>Starting September 13, 2021, you will not be able to access the DC using the following web browsers:</b></p>

         <ul>
           <li>All Internet Explorer versions (IE 11)</li>
           <li>Safari 6 / iOS 6.0.1</li>
           <li>Safari 7 / iOS 7.1</li>
           <li>Safari 7 / OS X 10.9</li>
           <li>Safari 8 / iOS 8.4</li>
           <li>Safari 8 / OS X 10.10</li>
         </ul>
         </div>
         </div>
         </div>
         </div>
          -->
  <script src="js/main.js"></script>
</body>

login.scss

.tooltip2{
  position: relative;
  display: inline-block;
}
.list{
list-style-type: disc;
}
.passwordHint{
  color: black;font-family: system-ui;line-height: 1.2 !important;
}
.cancel_btn,.save_btn{font-weight: bold;box-shadow: 0px 8px 15px rgba(0, 0, 0, 1.0);
}
.cancel_btn{color: #fff !important;background-color: #c9656a !important; border-color: #c9656a !important;}
.tooltiptext2{
  visibility: hidden;
  width: 300px;
  background-color: #E6E6E6;
  color: black;
  text-align: left;
  border-radius: 6px;
  padding: 10px;
  position: absolute;
  z-index: 1;
  top: -62px;
  left:100%;
}
.tooltiptext2 ::after{
  content: "";
  position: absolute;
  top:50%;
  right: 100%;
  margin-top: -5px;
  border-width: 5px;
  border-style: solid;
  border-color: transparent #E6E6E6 transparent transparent;
}
.tooltiptext2.shown{
  visibility:visible;
}
a:hover {
  text-decoration: none !important;
  color: #6EACAF !important;
}
.txt2{
  color: #666666 !important;
}
.kt-grid {
  cursor: context-menu;
}
.kt-login.kt-login--v1 .kt-login__aside {
  width: 605px;
  padding: 3rem 3.5rem;
  background-repeat: no-repeat;
  background-size: cover;
}
.kt-login.kt-login--v1 .kt-login__aside .kt-login__logo {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
}
.kt-login.kt-login--v1 .kt-login__aside .kt-login__title {
  color: #fff;
  font-size: 2rem;
  font-weight: 500;
}
.kt-login.kt-login--v1 .kt-login__aside .kt-login__subtitle {
  font-size: 1.2rem;
  font-weight: 200;
  margin: 2.5rem 0 3.5rem 0;
  color: rgba(255, 255, 255, 0.7);
}
.kt-login.kt-login--v1 .kt-login__aside .kt-login__info {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -ms-flex-pack: justify;
  justify-content: space-between;
}
.kt-login.kt-login--v1 .kt-login__aside .kt-login__info .kt-login__menu > a {
  text-decoration: none;
  color: #fff;
  margin-right: 2rem;
  display: inline-block;
  color: rgba(255, 255, 255, 0.7);
}
.kt-login.kt-login--v1
  .kt-login__aside
  .kt-login__info
  .kt-login__menu
  > a:hover {
  color: #fff;
}
.kt-login.kt-login--v1
  .kt-login__aside
  .kt-login__info
  .kt-login__menu
  > a:hover:after {
  border-bottom: 1px solid #fff;
  opacity: 0.3;
}
.kt-login.kt-login--v1
  .kt-login__aside
  .kt-login__info
  .kt-login__menu
  > a:last-child {
  margin-right: 0;
}
.kt-login.kt-login--v1 .kt-login__aside .kt-login__info .kt-login__copyright {
  color: rgba(255, 255, 255, 0.4);
}
.kt-login.kt-login--v1 .kt-login__wrapper {
  padding: 3rem 3rem;
  background: #fff;
}
.kt-login.kt-login--v1 .kt-login__wrapper .kt-login__head {
  font-size: 1rem;
  font-weight: 500;
  text-align: right;
}
.kt-login.kt-login--v1
  .kt-login__wrapper
  .kt-login__head
  .kt-login__signup-label {
  color: #74788d;
}
.kt-login.kt-login--v1
  .kt-login__wrapper
  .kt-login__head
  .kt-login__signup-link {
  color: #22b9ff;
}
.kt-login.kt-login--v1 .kt-login__wrapper .kt-login__body {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  height: 100%;
}
.kt-login.kt-login--v1 .kt-login__wrapper .kt-login__body .kt-login__form {
  width: 100%;
  max-width: 450px;
}
.kt-login.kt-login--v1
  .kt-login__wrapper
  .kt-login__body
  .kt-login__form
  .kt-login__title {
  display: block;
  text-align: center;
  margin-bottom: 5rem;
  text-decoration: none;
}
.kt-login.kt-login--v1
  .kt-login__wrapper
  .kt-login__body
  .kt-login__form
  .kt-login__title
  > h3 {
  font-size: 2rem;
  color: #67666e;
}
.kt-login.kt-login--v1
  .kt-login__wrapper
  .kt-login__body
  .kt-login__form
  .kt-form {
  margin: 4rem auto;
}
.kt-login.kt-login--v1
  .kt-login__wrapper
  .kt-login__body
  .kt-login__form
  .kt-form
  .form-group {
  margin: 0;
  padding: 0;
  margin: 0 auto;
}
.kt-login.kt-login--v1
  .kt-login__wrapper
  .kt-login__body
  .kt-login__form
  .kt-form
  .form-group
  .form-control {
  border: none;
  height: 50px;
  margin-top: 1.25rem;
  background-color: rgba(247, 247, 249, 0.7);
  padding-left: 1.25rem;
  padding-right: 1.25rem;
  -webkit-transition: background-color 0.3s ease;
  transition: background-color 0.3s ease;
}
.kt-login.kt-login--v1
  .kt-login__wrapper
  .kt-login__body
  .kt-login__form
  .kt-form
  .form-group
  .form-control:focus {
  -webkit-transition: background-color 0.3s ease;
  transition: background-color 0.3s ease;
  background-color: #f7f7f9;
}
.kt-login.kt-login--v1
  .kt-login__wrapper
  .kt-login__body
  .kt-login__form
  .kt-login__actions {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -ms-flex-pack: justify;
  justify-content: space-between;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  margin: 1rem 0;
}
.kt-login.kt-login--v1
  .kt-login__wrapper
  .kt-login__body
  .kt-login__form
  .kt-login__actions
  .kt-login__link-forgot {
  font-weight: 400;
  color: #74788d;
}
.kt-login.kt-login--v1
  .kt-login__wrapper
  .kt-login__body
  .kt-login__form
  .kt-login__actions
  .kt-login__link-forgot:hover {
  color: #22b9ff;
}
.kt-login.kt-login--v1
  .kt-login__wrapper
  .kt-login__body
  .kt-login__form
  .kt-login__actions
  .kt-login__link-forgot:hover:after {
  border-bottom: 1px solid #22b9ff;
  opacity: 0.3;
}
.kt-login.kt-login--v1
  .kt-login__wrapper
  .kt-login__body
  .kt-login__form
  .kt-login__actions
  .kt-login__btn-primary,
.kt-login.kt-login--v1
  .kt-login__wrapper
  .kt-login__body
  .kt-login__form
  .kt-login__actions
  .kt-login__btn-secondary {
  font-weight: 500;
  font-size: 1rem;
  height: 50px;
  padding-left: 2.75rem;
  padding-right: 2.75rem;
}
.kt-login.kt-login--v1
  .kt-login__wrapper
  .kt-login__body
  .kt-login__form
  .kt-login__divider {
  margin: 1rem 0 2rem 0;
}
.kt-login.kt-login--v1
  .kt-login__wrapper
  .kt-login__body
  .kt-login__form
  .kt-login__divider:not(:first-child):not(:last-child) {
  font-weight: 400;
  color: #b5b2c3;
  font-size: 1rem;
}
.kt-login.kt-login--v1
  .kt-login__wrapper
  .kt-login__body
  .kt-login__form
  .kt-login__options {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-box-pack: justify;
  -ms-flex-pack: justify;
  justify-content: space-between;
  max-width: 100%;
}
.kt-login.kt-login--v1
  .kt-login__wrapper
  .kt-login__body
  .kt-login__form
  .kt-login__options
  > a {
  text-decoration: none;
  -webkit-box-flex: 1;
  -ms-flex: 1;
  flex: 1;
  -webkit-box-pack: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
}
.kt-login.kt-login--v1
  .kt-login__wrapper
  .kt-login__body
  .kt-login__form
  .kt-login__options
  > a:not(:last-child) {
  margin: 0 1.5rem 0 0;
}

@media (min-width: 1025px) {
  .kt-login.kt-login--v1 .kt-login__aside {
    -webkit-box-flex: 1;
    -ms-flex: 1;
    flex: 1;
  }
  .kt-grid.kt-grid--ver-desktop.kt-grid--desktop > .kt-grid__item {
    max-width: 100%;
    height: 100vh;
  }
}
@media (max-width: 1024px) {
  .kt-login.kt-login--v1 .kt-login__aside {
    width: 100%;
    height: auto;
    padding: 2rem 1.5rem;
  }
 
  .kt-login.kt-login--v1 .kt-login__aside .kt-login__logo {
    margin-bottom: 2.5rem;
  }
  .kt-login.kt-login--v1 .kt-login__aside .kt-login__info {
    margin-top: 2rem;
  }
  .kt-login.kt-login--v1 .kt-login__aside .kt-login__subtitle {
    margin: 2rem 0;
  }
  .kt-login.kt-login--v1 .kt-login__wrapper {
    padding: 3rem 1.5rem;
  }
  .kt-login.kt-login--v1 .kt-login__wrapper .kt-login__head {
    padding-left: 2rem;
    right: 2rem;
  }
  .kt-login.kt-login--v1 .kt-login__wrapper .kt-login__body {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-pack: center;
    -ms-flex-pack: center;
    justify-content: center;
    -webkit-box-align: center;
    -ms-flex-align: center;
    align-items: center;
    margin-top: 5rem;
  }
  .kt-login.kt-login--v1
    .kt-login__wrapper
    .kt-login__body
    .kt-login__form
    .kt-login__options
    > a:not(:first-child):not(:last-child) {
    margin: 0 0.8rem;
  }
}
.kt-link {
  cursor: pointer;
}
.open-close-eye {
  float: right;
  position: relative;
  z-index: 1;
  left: -25px;
  top: -34px;
  color: #7b7b7b;
  cursor: pointer;
}
.errorlab {
  height: 10px;
}
.store {
  height: 55px;
}
.form-text, .text-danger {
  color:#c9656a !important;
  font-size: 11px;
}
.password-validaition-before{
  color:#c9656a !important;
}
.password-validaition-after{
  color:#6EACAF !important;
}
.SecurityPopUp{
  .SecurityPopUp_h3{
    text-align: center;font-weight: bold;color: black;font-family: sans-serif;
  }
  .SecurityPopUp_h4{
    text-align: center;padding: 20px;color: black;font-family: sans-serif;
  }
  .SecurityPopUp_label{
    text-align: center;color: black;font-family:sans-serif;font-size: 18px;font-weight: bold;
  }
  .SecurityPopUp_input{
    position: relative;bottom:10px;font-family:sans-serif;
  }
  .SecurityPopUp_continue{
    background-color: #6EACAF !important; border-color: #6EACAF !important;
  }
  .SecurityPopUp_back{
    background-color:rgb(201,101,106) !important; border-color:rgb(201, 101, 106);color:#fff;
  }
}
.submit_Answer{
  background-color: #6EACAF !important; border-color: #6EACAF !important;color: #fff !important;
}
.decline_Answer{
  background-color:rgb(201,101,106) !important; border-color:rgb(201, 101, 106);color:#fff !important;
}
.submit_h4{
  text-align: center;padding: 10px;color: black;font-family: sans-serif;
}

#Captcha_Image{
  border-width:0px;
  margin:0.5rem 0.5rem 0.5rem 0.5rem;
  padding:0px 10px 0px 10px;
  width: 185px;
  opacity: 0.6
}


login.ts

import { Component, OnInit, HostListener, TemplateRef, ViewChild } from '@angular/core';
import { Router } from '@angular/router';
import { UserService } from '../shared/services/user.service';
import { Errors } from '../shared/models/error.model';
import { environment } from '../../environments/environment';
import { ToastrService } from 'ngx-toastr';
import { BsModalService, BsModalRef, ModalDirective } from 'ngx-bootstrap/modal';
@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.scss', './style.bundle.css']
})

export class LoginComponent implements OnInit {
  @ViewChild('childModal', {}) childModal: ModalDirective;
  constructor(private router: Router, private userService: UserService,
    private toast: ToastrService, private modalService: BsModalService) { }

  resetPWD: boolean = false;
  copyRight: number = new Date().getFullYear();
  loginform: boolean = true;
  userName: string = "";
  password: string = "";
  userid: any;
  errors: any;
  imageChange: any;
  errorMsg: string = "";
  error_msg: boolean = false;
  mask: boolean = true;
  browserName = '';
  browserVersion = '';
  usersessionresponse: any;
  modelRefSession: BsModalRef;
  loginSpinner: any;
  PopUpSpinner: any;
  SubmitSpinner: any;
  click:any;
  show_SessionPopup: any
  ngOnInit() {

    this.loginSpinner = false;
    this.PopUpSpinner = false;
    this.SubmitSpinner = false;
    this.click=false
  }

  capslockOn;
  @HostListener('window:click', ['$event']) onClick(event) {
    this.getcapsfun(event);
  }
  @HostListener('window:keydown', ['$event'])
  onKeyDown(event) {
    this.getcapsfun(event)
  }
  @HostListener('window:keyup', ['$event'])
  onKeyUp(event) {
    if (event.getModifierState && event.getModifierState('CapsLock')) {
      this.capslockOn = true;
    } else {
      this.capslockOn = false;
    }
  }
  resetpwd(e) {
    if (e == 'reset') {
      this.resetPWD = true;
      this.showMsghrs = false;
      this.enterNewPassword = false;
      this.capcha = false;
      this.otpNumber = false;
      this.buttons = false
      this.forgotPasswordOtp = false;
      this.showSecurityPopUp = false;
      this.showLoginForm = true;

    }
    else if (e == 'login') {
      this.resetPWD = false;
      this.capcha = false;
      this.enterNewPassword = false;
    }
  }
  eyemask() {
    var pw = document.getElementsByClassName("input100 input-password")[0];
    var em = document.getElementById("eyemask");
    if (this.mask === true) {
      this.mask = false;
      pw.setAttribute("type", "text");
      em.setAttribute("class", "fa fa-eye open-close-eye");
    } else {
      this.mask = true;
      pw.setAttribute("type", "password");
      em.setAttribute("class", "fa fa-eye-slash open-close-eye");
    }
  };
  mask1;
  eyemask1() {
    var pw = document.getElementsByClassName("input100 input-password 12")[0];
    var em = document.getElementById("eyemask1");
    if (this.mask1 === true) {
      this.mask1 = false;
      pw.setAttribute("type", "text");
      em.setAttribute("class", "fa fa-eye open-close-eye");
    } else {
      this.mask1 = true;
      pw.setAttribute("type", "password");
      em.setAttribute("class", "fa fa-eye-slash open-close-eye");
    }
  };
  btnLogin() {
    this.SubmitSpinner = true;
    this.errors = new Errors();
    const credentials = {
      'username': this.userName,
      'password': this.password
    }
    const authenticate = this.userService.encrypt(credentials);
    if (authenticate) {
      this.userService
        .attemptAuth(authenticate)
        .subscribe(
          data => {
            this.SubmitSpinner = false;
            this.userid = data;

            if (this.userid.spf == null) {
              this.userid.spf = false;
            }
            if (this.userid.question && this.userid.spf && !this.userid.csrFlag) {
              if (this.userid.approle === "ADMIN") {
                this.router.navigate(['/admin/admindashboard']);
              }
              if (this.userid.approle === "CLIENT") {
                this.router.navigate(['/client/clientdashboard/clientdashboardview']);

              } else if (this.userid.approle === "CUSTOMER") {
                this.router.navigate(['/customer']);
              }
            }
            else {
              if (this.userid.clientid === 104 && !this.userid.spf) {
                this.router.navigate(['/SPSsecurity']);
              }
              else if (this.userid.csrFlag) {
                this.router.navigate(['/csr-security']);
              }
              else {
                this.router.navigate(['/updateSecurityQuestion']);
              }

            }

          },
          err => {
            const errorLog = this.userService.decrypt(err)
            this.errors = err;
            if (errorLog.error == "your account is blocked") {
              this.errorMsg = "your account is blocked";
              this.error_msg = true
            }
            else {
              this.errorMsg = errorLog.error;
              this.error_msg = true
            }
          });

      this.userService.changeOnboard(credentials);
    }
    else {
      this.SubmitSpinner = false;
    }

  }


  forgot() {
    this.loginform = false;
  }
  getcapsfun(e) {
    if (e.getModifierState && e.getModifierState('CapsLock')) {
      this.capslockOn = true;
    } else {
      this.capslockOn = false;
    }
  }
  login() {
    this.loginform = true;
  }
  forgotPasswordData = {
    'username': "",
    "captchacode": "",
    "newPassword": "",
    "confirmPassword": ""
  }
  capcha: boolean = false;
  enterNewPassword: boolean = false;
  newPassword(e) {
    if (e == 'Username') {
      this.click=true;
      this.resetPWD = false;
      this.enterNewPassword = false;
      this.capcha = true;
      this.buttons = false
      this.otpNumber = false;
      this.forgotPasswordOtp = false;
      this.showSecurityPopUp = false;
      this.showLoginForm = true;
    }
    if (e == 'Otp') {
      this.click=false
      this.resetPWD = false;
      this.enterNewPassword = false;
      this.capcha = false;
      this.otpNumber = false;
      this.buttons = false
      this.forgotPasswordOtp = true;
      this.showSecurityPopUp = false;
      this.showLoginForm = true;
    }
    if (e == 'capcha') {
      this.resetPWD = false;
      this.click=false
      this.enterNewPassword = true;
      this.capcha = false;
      this.otpNumber = false;
      this.buttons = false
      this.forgotPasswordOtp = false;
      this.showSecurityPopUp = false;
      this.showLoginForm = true;
    }
    if (e == 'security') {
      this.resetPWD = false;
      this.click=false
      this.enterNewPassword = false;
      this.capcha = false;
      this.otpNumber = false;
      this.buttons = false
      this.forgotPasswordOtp = false;
      this.showSecurityPopUp = true;
      this.showLoginForm = false;
    }
    if (e == 'login') {
      this.showLoginForm = true;
      this.resetPWD = false;
      this.click=false
      this.enterNewPassword = false;
      this.capcha = false;
      this.buttons = false
      this.showSecurityPopUp = false;
      this.user_ErrorMsg = false;
      this.captcha_ErrorMsg = false;
      this.password_ErrorMsg = false;
      this.passkey = false;
      this.passkey1 = false;
      this.passkey2 = false;
      this.passkey3 = false;
      this.passkey4 = false;
      this.passval = false;
      this.passval1 = false;
      this.passval2 = false;
      this.passval3 = false;
      this.passval4 = false;
      this.otpNumber = false;
      this.forgotPasswordOtp = false;
      this.error_msg = false;
      this.otpNumber_ErrorMsg = false;
      this.forgotOtpNumber_ErrorMsg = false;
      this.forgotPasswordData = {
        'username': "",
        "captchacode": "",
        "newPassword": "",
        "confirmPassword": ""
      }
      this.showSecurityQuestion = ""
      this.answerVerfication = {
        'username': '',
      }
      this.wrongAnswer_Alert = false;
      this.show_submitPopup = true;
      this.showMsg24hrs = false;
    }
  }
  validation: any;
  userErrorMsg = "Username does not Exist";
  user_ErrorMsg: boolean = false;
  captchaImage: any;
  forgotOtp: any;
  UsernameSQ = {
    username: ''
  };
  btnGetUserName(value, userNameEntry) {
    this.SubmitSpinner = true;
    this.click=true
    this.imageChange = '';
    var username = {
      "username": value.Username
    }
    const usernameJson = this.userService.encrypt(username)
    if (usernameJson) {
      this.userService.getUsername(usernameJson).subscribe(data => {
this.click=true
        this.validation = data;

        if (this.validation == "valid" ||"not valid ") {
          var usernameotp = {
            "username": value.Username
          }
          const usernameOTPJson = this.userService.encrypt(usernameotp)
          if (usernameOTPJson) {
            this.userService.getForgetPasswordOtp(usernameOTPJson).subscribe(data => {
              this.SubmitSpinner = false;
              this.click=true
              this.forgotOtp = data;
              
              this.user_ErrorMsg = false;
              if (this.forgotOtp) {
                this.newPassword('Otp')
                this.UsernameSQ.username = value.Username
                this.answerVerfication.username = value.Username
                localStorage.setItem('image',this.forgotOtp.authAccess)
              } 
              else {
                // this.userService.getcaptcha().subscribe(data => {
                //   this.captchaImage = data;
                //   this.imageChange=this.captchaImage.base64
                //   this.forgotOtpNumber_ErrorMsg=false;
                //   this.newPassword('Username')
                // })
                // console.log("ELSESEFSFuifahfjahfkj")
                this.forgotOtpNumber_ErrorMsg = false;
                this.newPassword('capcha')
              }
            })
          }
        } else if (this.validation == "Account is already blocked") {
          
          this.SubmitSpinner = false;
          this.user_ErrorMsg = true;
          this.userErrorMsg = "Account is locked. Please Inform your administrator to unlocked it.";
        }
        else {
          
          this.SubmitSpinner = false;
          this.user_ErrorMsg = true;
          // this.userErrorMsg = "User Access Prohibited";
        }
      })
    }
    
  }
  spinnerOff: boolean = true;
  hideLoader() {
    this.spinnerOff = false;
  }
  tryOtherImage() {
    this.imageChange = '';
    this.captcha_ErrorMsg = false;
    this.userService.getcaptcha().subscribe(data => {
      this.captchaImage = data;
      this.imageChange = this.captchaImage.base64;
    });
  }
  captchaValidation;
  captchaErrorMsg = "captcha code mismatch";
  captcha_ErrorMsg: boolean = false;
  btnGetcapchaCode(value, capchaCodeEntry) {
    this.SubmitSpinner = true;
    var capcha = {
      "imagecaptcha": this.captchaImage.captcha,
      "usercaptcha": value.capchaCode
    }
    this.userService.getCaptchaValidation(capcha).subscribe(data => {
      this.SubmitSpinner = false;
      this.captchaValidation = data;
      if (this.captchaValidation == "verified") {
        this.captcha_ErrorMsg = false;
        this.newPassword('capcha')
      }
      else {
        this.captcha_ErrorMsg = true;
      }
    })
  }
  passwordErrorMsg = "Password mismatch";
  password_ErrorMsg: boolean = false;
  passwordChanged;
  msg24hrs: string;
  showMsg24hrs: boolean = false;
  btnGetNewPasswordDetails(value, newPasswordDetails) {
    this.SubmitSpinner = true;
    if (value.newPasswordData == value.confirmPassword) {
      var details = {
        "username": this.forgotPasswordData.username,
        "password": value.newPasswordData,
        "authAccess":localStorage.getItem('image')
      }
      const detailsJson = this.userService.encrypt(details)
      if (detailsJson) {
        this.userService.changePassword(detailsJson).subscribe(data => {
          this.SubmitSpinner = false;
          this.passwordChanged = data;
          if (this.passwordChanged === "you can't change password within 24hrs") {
            this.msg24hrs = "You can't change the password now. Please wait for 24Hrs from the recent password change.";
            this.showMsg24hrs = true;
            setTimeout(() => {
              this.showMsg24hrs = false;
            }, 3000);
          }
          else if (this.passwordChanged.error === "password already exist.change the password") {
            this.msg24hrs = "Please don't use any of your old password.";
            this.showMsg24hrs = true;
            setTimeout(() => {
              this.showMsg24hrs = false;
            }, 3000);
          }
          else if (this.passwordChanged == "you can't use this password") {
            this.msg24hrs = "Your password standard is too weak. Please use strong standard password.";
            this.showMsg24hrs = true;
            setTimeout(() => {
              this.showMsg24hrs = false;
            }, 3000);

          }
          else if (this.passwordChanged === "done") {
            this.toast.success('Password Changed', '', { progressBar: true });
            this.password_ErrorMsg = false;
            localStorage.removeItem('image')
            setTimeout(() => {
              this.newPassword('login')
            }, 3000);
          }

          else {

            this.toast.error('Password not Changed. Please try again', '', { progressBar: true });
            this.newPassword('login')
          }
        })
      }
    }
    else {
      this.SubmitSpinner = false;
      this.password_ErrorMsg = true;
    }
  }
  password_Verification = "Please create a password per the requirements below"
  focus(event, id) {

    if (event) {
      $(`#${id}`).addClass('shown')
    }
  }
  outfocus(event, id) {
    if (event) {
      $(`#${id}`).removeClass('shown')
    }
  }
  passkey: boolean = false;
  passkey1: boolean = false;
  passkey2: boolean = false;
  passkey3: boolean = false;
  passkey4: boolean = false;
  onKey1(event: any) {
    var lowerCaseLetters = /[a-z]/g;
    var upperCaseLetters = /[A-Z]/g;
    var numbers = /[0-9]/g;
    var special = /[#$^!*()@%&]/g;
    if (event.target.value.match(lowerCaseLetters)) {
      this.passkey = true;
    }
    else {
      this.passkey = false;
    }
    if (event.target.value.match(upperCaseLetters)) {
      this.passkey1 = true;
    }
    else {
      this.passkey1 = false;
    }
    if (event.target.value.match(numbers)) {
      this.passkey2 = true;
    }
    else {
      this.passkey2 = false;
    }
    if (event.target.value.length >= 8) {
      this.passkey3 = true;
    }
    else {
      this.passkey3 = false;
    }
    if (event.target.value.match(special)) {
      this.passkey4 = true;
    }
    else {
      this.passkey4 = false;
    }
  }
  passval: boolean = false;
  passval1: boolean = false;
  passval2: boolean = false;
  passval3: boolean = false;
  passval4: boolean = false;
  onKey2(event: any) {
    var lowerCaseLetters = /[a-z]/g;
    var upperCaseLetters = /[A-Z]/g;
    var numbers = /[0-9]/g;
    var special = /[#$^!*()@%&]/g;
    if (event.target.value.match(lowerCaseLetters)) {
      this.passval = true;
    }
    else {
      this.passval = false;
    }
    if (event.target.value.match(upperCaseLetters)) {
      this.passval1 = true;
    }
    else {
      this.passval1 = false;
    }
    if (event.target.value.match(numbers)) {
      this.passval2 = true;
    }
    else {
      this.passval2 = false;
    }
    if (event.target.value.length >= 8) {
      this.passval3 = true;
    }
    else {
      this.passval3 = false;
    }
    if (event.target.value.match(special)) {
      this.passval4 = true;
    }
    else {
      this.passval4 = false;
    }
  }

  buttons: boolean = false;
  msghrs: string
  showMsghrs: boolean = false;
  OtpNumber_ErrorMsg: boolean = false;
  forgotPasswordOtp: boolean = false;
  forgotOtpNumber_ErrorMsg: boolean = false;
  questions: any;
  questionsId: any;
  btnForgotOtpNumber(value, val) {
    this.SubmitSpinner = true;
    var test = {
      "username": this.forgotPasswordData.username,
      "otpvalue": value.forgotOtpNumbervalue,
      "authAccess": localStorage.getItem('image')
      
    }
    const verifyOtp = this.userService.encrypt(test)
    if (verifyOtp) {
      this.userService.otpexpiregeneration(verifyOtp).subscribe(data => {
        this.SubmitSpinner = false;
        this.captchaImage = data;
        if (this.captchaImage === "You have entered an invalid OTP. You have 4 attempt(s) before your account get locked.") {
          this.msghrs = "You have entered an invalid OTP. You have 4 attempt(s) before your account get locked.";
          this.showMsghrs = true;
          this.buttons = false;
          document.forms["forgotPasswordOtpEntryForm"].reset();
        }
        else if (this.captchaImage === "You have entered an invalid OTP. You have 3 attempt(s) before your account get locked.") {
          this.msghrs = "You have entered an invalid OTP. You have 3 attempt(s) before your account get locked.";
          this.showMsghrs = true;
          this.buttons = false;
          document.forms["forgotPasswordOtpEntryForm"].reset();
        }
        else if (this.captchaImage === "You have entered an invalid OTP. You have 2 attempt(s) before your account get locked.") {
          this.msghrs = "You have entered an invalid OTP. You have 2 attempt(s) before your account get locked.";
          this.showMsghrs = true;
          this.buttons = false;
          document.forms["forgotPasswordOtpEntryForm"].reset();
        }
        else if (this.captchaImage === "You have entered an invalid OTP. You have 1 attempt(s) before your account get locked.") {
          this.msghrs = "You have entered an invalid OTP. You have 1 attempt(s) before your account get locked.";
          this.showMsghrs = true;
          this.buttons = false;
          document.forms["forgotPasswordOtpEntryForm"].reset();
        }
        else if (this.captchaImage === "Your account has been locked. Please email patientcare@myrecoverycoach.com or call (833) 419-2509 to unlock it.") {
          this.msghrs = "Account is locked. Please Inform your administrator to unlocked it.";
          this.showMsghrs = true;
          this.buttons = false;
          setTimeout(() => {
            this.newPassword('login')
          }, 4000);
          document.forms["forgotPasswordOtpEntryForm"].reset();
        }
        else if (this.captchaImage === "you are otp is expired") {
          this.msghrs = "otp is expired.";
          this.showMsghrs = true;
          this.buttons = false;
          setTimeout(() => {
            this.resetpwd('reset')
          }, 3000);
          document.forms["forgotPasswordOtpEntryForm"].reset();
        }
        else if (this.captchaImage === "SyncFailed ! otp error try again after sometime") {
          this.toast.warning("Something is Wrong. Please try again..", " ", {});
          this.msghrs = "";
          this.showMsghrs = true;
          this.buttons = false;
          setTimeout(() => {
            this.resetpwd('reset')
          }, 3000);
          document.forms["forgotPasswordOtpEntryForm"].reset();
        }
        else if (this.captchaImage === "otp error try again after sometime") {
          this.toast.warning("Something is Wrong. Please try again..", " ", {});
          this.msghrs = "";
          this.showMsghrs = true;
          this.buttons = false;
          setTimeout(() => {
            this.resetpwd('reset')
          }, 3000);
          document.forms["forgotPasswordOtpEntryForm"].reset();
        }
        else if (this.captchaImage.msg === "Success") {
          const usernameSQJson = this.userService.encrypt(this.UsernameSQ)
          if (usernameSQJson) {
            this.userService.getSecurityQuestion(usernameSQJson).subscribe(data => {
              this.questions = data;
              this.otpNumber_ErrorMsg = false;
              var randomQuestion = Math.floor(Math.random() * this.questions.length);
              this.showSecurityQuestion = this.questions[randomQuestion].questioname
              this.questionsId = this.questions[randomQuestion].questionid
              this.newPassword('security')
              document.forms["forgotPasswordOtpEntryForm"].reset();
            })
          }
        }
      })
    }
    document.forms["forgotPasswordOtpEntryForm"].reset();
  }
  msgView: boolean = true;
  otpNumber: boolean = false;
  otpNumber_ErrorMsg: boolean = false;
  otpNumberErrorMsg = "OTP Number Not Valid"
  getOtpNumber: any;
  ErrorMsg(value) {
    if (!value) {
      if (this.error_msg) {
        this.msgView = false;
      }
      else {
        this.msgView = true;
      }
    }
  }
  show: boolean = false;
  captcha_Field = "";
  userSessionStatus: any;



  btnTwoStepVerification() {
    this.msgView = false;
    const postOtpdetails = {
      "username": this.userName,
      "password": this.password,
      "captcha": this.captcha_Field
    }

    if (!this.userName && !this.password) {
      this.errorMsg = "Username and Password is Empty";
      this.error_msg = true
      setTimeout(() => {
        this.error_msg = false;
      }, 3000);
    }
    else if (!this.userName) {
      this.errorMsg = "Username is Empty";
      this.error_msg = true
      setTimeout(() => {
        this.error_msg = false;
      }, 3000);
    }
    else if (!this.password) {
      this.errorMsg = "Password is Empty";
      this.error_msg = true
      setTimeout(() => {
        this.error_msg = false;
      }, 3000);
    }
    else if (!this.captcha_Field && this.enable_CaptchaField) {
      this.errorMsg = "Captcha Field is Empty";
      this.error_msg = true
      setTimeout(() => {
        this.error_msg = false;
      }, 3000);
    }
    else {
      const NewIP = this.userService.encrypt(postOtpdetails)
      if (NewIP) {
        this.userService.otpGeneration(NewIP).subscribe(data => {
          this.loginSpinner = false;
          if (this.modelRefSession) {
            this.modelRefSession.hide()
          }
          this.getOtpNumber = data;
          if (this.getOtpNumber == "You are entering the wrong Captcha") {
            this.recall_Captcha(this.userName);
            this.errorMsg = "You've entered the characters incorrectly. Please try again";
            this.error_msg = true
            this.captcha_Field = "";
            setTimeout(() => {
              this.error_msg = false;
            }, 3000);
          }
          else if (this.getOtpNumber == 'You have entered the characters incorrectly and have 4 more attempts. Click the "refresh" icon next to the image above to get new characters.') {
            this.errorMsg = 'You have entered the characters incorrectly and have 4 more attempts. Click the "refresh" icon next to the image above to get new characters.'
            this.error_msg = true
            this.recall_Captcha(this.userName);
            
            this.captcha_Field = "";
            setTimeout(() => {
              this.error_msg = false;
            }, 3000);
          }
          else if (this.getOtpNumber == 'You have entered the characters incorrectly and have 3 more attempts. Click the "refresh" icon next to the image above to get new characters.') {
            this.errorMsg ='You have entered the characters incorrectly and have 3 more attempts. Click the "refresh" icon next to the image above to get new characters.'
            this.error_msg = true
            this.recall_Captcha(this.userName);
           
            this.captcha_Field = "";
            setTimeout(() => {
              this.error_msg = false;
            }, 3000);
          }
          else if (this.getOtpNumber == 'You have entered the characters incorrectly and have 2 more attempts. Click the "refresh" icon next to the image above to get new characters.') {
            this.errorMsg ='You have entered the characters incorrectly and have 2 more attempts. Click the "refresh" icon next to the image above to get new characters.'
            this.error_msg = true
            this.recall_Captcha(this.userName);
            this.captcha_Field = "";
            setTimeout(() => {
              this.error_msg = false;
            }, 3000);
          }
          else if (this.getOtpNumber == 'You have entered the characters incorrectly and have 1 more attempt before your account will be locked. Click the "refresh" icon next to the image above to get new characters.') {
            this.errorMsg = 'You have entered the characters incorrectly and have 1 more attempt before your account will be locked. Click the "refresh" icon next to the image above to get new characters.'
            this.error_msg = true
            this.recall_Captcha(this.userName);
            this.captcha_Field = "";
            setTimeout(() => {
              this.error_msg = false;
            }, 3000);
          }
          else if (this.getOtpNumber == 'You account is locked. Please contact customer support to reset your account.') {
            this.errorMsg ='You account is locked. Please contact customer support to reset your account.'
            this.error_msg = true
            this.recall_Captcha(this.userName);
            this.captcha_Field = "";
            setTimeout(() => {
              this.error_msg = false;
            }, 3000);
          }
          else if (this.getOtpNumber == "Your Account is blocked.") {
            this.errorMsg = "Your Account is Blocked";
            this.error_msg = true
          }
          else if (this.getOtpNumber == "sync Failed") {
            this.errorMsg = "Your Account is Blocked";
            this.error_msg = true
          }
          else if (this.getOtpNumber.base64) {
            this.img_Captcha = 'data:image/png;base64,' + data.base64
            this.enable_CaptchaField = true;
          }
          else if (this.getOtpNumber.pwdFlag) {
            this.resetpwd('reset')
          }
          else if (this.getOtpNumber.domainflag) {
            this.otpNumber = true;
          }
          else {
            this.btnLogin();
          }
        },
          err1 => {
            const errorLog = this.userService.decrypt(err1.error)
            if (errorLog) {
              if (this.modelRefSession) {
                this.modelRefSession.hide()
              }
              this.loginSpinner = false;
              var messageJson = errorLog;
              if (messageJson.error == "your account is blocked") {
                this.errorMsg = "Account is locked. Please Inform your administrator to unlocked it.";
                this.error_msg = true
              }
              else if (messageJson.error == "Account is Expired.please fix new newpassword") {
                this.errorMsg = "Account is expired, Please fix new password";
                this.error_msg = true
              }
              else if (messageJson.error == "Invalid password, Attempt count(1/3)") {
                this.errorMsg = "Incorrect Password. You have two more attempts until your account becomes locked. Click on Forgot Password if you need to reset it.";
                this.error_msg = true
                setTimeout(() => {
                  this.error_msg = false;
                }, 4000);
              }
              else if (messageJson.error == "Invalid password, Attempt count(2/3)") {
                this.errorMsg = "Incorrect Password. You have one more attempts until your account becomes locked. Click on Forgot Password if you need to reset it.";
                this.error_msg = true
                setTimeout(() => {
                  this.error_msg = false;
                }, 4000);
              }
              else if (messageJson.error == "Invalid password, Attempt count(3/3)") {
                this.errorMsg = "Incorrect Password. You have last attempt until your account becomes locked. Click on Forgot Password if you need to reset it.";
                this.error_msg = true
                setTimeout(() => {
                  this.error_msg = false;
                }, 4000);
              }
              else {
                this.errorMsg = messageJson.error;
                this.error_msg = true
                setTimeout(() => {
                  this.error_msg = false;
                }, 60000);
              }

            }

          });
      }
    }
  }


  forceLogin(option: any) {
    if (option === 'Yes') {
      this.loginSpinner = true;
      this.PopUpSpinner = true;
      this.btnTwoStepVerification();

    }
    else if (option === 'No') {
      this.loginSpinner = false;
      if (this.modelRefSession) {
        this.modelRefSession.hide()
      }
      this.show_SessionPopup = false;
    }
  }


  @ViewChild('tellTheUserAboutConcurrentSession') templateRefSession: TemplateRef<any>;
  getCurrentUserTokenStatus() {
    var obj = {
      "username": this.userName
    }
    this.loginSpinner = false;
    this.PopUpSpinner = false;
    this.show_SessionPopup = false;
    const usernamEN = this.userService.encrypt(obj);
    if (usernamEN) {
      this.userService.Currentusersession(usernamEN).subscribe(data => {
        this.usersessionresponse = data
        const errorLog111111 = this.userService.decrypt(this.usersessionresponse)
        if (errorLog111111.tokenStatus === true) {
          if(errorLog111111.tokenStatus === true && !this.password && !this.capcha){
            this.modelRefSession.hide();
          }
          else{
            this.modelRefSession = this.modalService.show(this.templateRefSession, { ignoreBackdropClick: true });
            this.show_SessionPopup = true;
          } 
        }
        else {
          this.loginSpinner = false;
          this.btnTwoStepVerification();
          if (this.modelRefSession) {
            this.modelRefSession.hide()
          }
        }
      })
    }
  }


  btnOtpNumber(value, val) {
    if (this.getOtpNumber.otp == value.otpNumbervalue) {
      this.btnLogin();
    } else {
      this.otpNumber_ErrorMsg = true;
    }
  }

  // security question functionality and code.....
  showSecurityPopUp: boolean = false;
  showLoginForm: boolean = true;
  showSecurityQuestion = ""
  wrongAnswer_Alert: boolean = false;
  show_submitPopup: boolean = true;
  answerVerfication = {
    'username': '',
  }

  modalRef: BsModalRef;
  @ViewChild('submitAnswer') templateRef: TemplateRef<any>;
  @ViewChild('browserdetail') templateRef1: TemplateRef<any>;
  btnSecurityQuestion(value) {
    this.answerVerfication[`question`] = this.questionsId
    this.answerVerfication[`answer`] = value.Answer
    document.forms["sqForm"].reset();
    this.modalRef = this.modalService.show(this.templateRef, { class: 'modal-md', ignoreBackdropClick: true });
  }
  Answer_error_msg: string;
  btnsubmit_Answer() {
    this.answerVerfication['authAccess'] = localStorage.getItem('image')
    const answerVerficationJson = this.userService.encrypt(this.answerVerfication)
    if (answerVerficationJson) {
      this.userService.postSubmitted_Answer(answerVerficationJson).subscribe(data => {
        var validate: boolean = data.value;
        this.Answer_error_msg = data.msg;
        if (validate) {
          this.modalRef.hide();
          this.newPassword('capcha');
        }
        else {
          if (this.Answer_error_msg === "Your three attempt(s) already completed. Please contact to patientcare@myrecoverycoach.com or call (833) 419-2509.") {
            this.Answer_error_msg = "Account is locked. Please Inform your administrator to unlocked it."
            this.show_submitPopup = false;
            this.wrongAnswer_Alert = true;
            setTimeout(() => {
              this.wrongAnswer_Alert = false;
              this.show_submitPopup = true;
              this.modalRef.hide();
              this.newPassword('login');
            }, 3000);
          } else {
            this.show_submitPopup = false;
            this.wrongAnswer_Alert = true;
            setTimeout(() => {
              this.wrongAnswer_Alert = false;
              this.show_submitPopup = true;
              this.btndecline_Submit();
            }, 3000);
          }
        }
      })
    }
  }

  btndecline_Submit() {
    this.modalRef.hide();
    var randomQuestionDecline = Math.floor(Math.random() * this.questions.length);
    this.showSecurityQuestion = this.questions[randomQuestionDecline].questioname
    this.questionsId = this.questions[randomQuestionDecline].questionid
    var username = this.answerVerfication.username;
    this.answerVerfication = {
      'username': username
    }
  }

  //captcha for SPS users.........
  enable_CaptchaField: boolean = false;
  img_Captcha = ""
  pattern = new RegExp(/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/);
  shownCaptcha(user) {
    if (user && this.pattern.test(user)) {
      var jsonCaptcha = {
        "username": user
      }
      const checkUser = this.userService.encrypt(jsonCaptcha);
      if (checkUser) {
        this.userService.user_Captcha(checkUser).subscribe(res => {
          if (res == "captcha is required for this user") {
            this.userService.get_Captcha(checkUser).subscribe(data => {
              if (data.base64) {
                this.img_Captcha = 'data:image/png;base64,' + data.base64
                this.enable_CaptchaField = true;
              } else {
                this.enable_CaptchaField = false;
              }
            })
          }
          else {
            this.enable_CaptchaField = false;
          }
        })
      }
    } else {
      this.enable_CaptchaField = false;
    }
  };

  recall_Captcha(user) {
    if (user && this.pattern.test(user)) {
      var json_Get_Captcha = {
        "username": user
      }
      const get_captcha_User = this.userService.encrypt(json_Get_Captcha);
      if (get_captcha_User) {
        this.userService.get_Captcha(get_captcha_User).subscribe(data => {
          if (data.base64) {
            this.img_Captcha = 'data:image/png;base64,' + data.base64
            this.enable_CaptchaField = true;
          } else {
            this.enable_CaptchaField = false;
          }
        })
      }
    }
  };

  getFullYear() {
    return new Date().getFullYear();
  }
}


dashboard.html
<div class="air__layout__content ">
  <div class="air__utils__content" style="margin-top: -23px !important;">
      <div class="air__topbar__searchContainer float-right" style="margin-bottom: 20px;">
        <div dropdown #dropdown="bs-dropdown" placement="bottom right" [isDisabled]="false" container="body"
          [insideClick]="true">
          <em class="air__topbar__searchIcon fe fe-search"></em>
          <input dropdownToggle id="button-alignment" type="button"
            aria-controls="dropdown-animated dropdown-disabled-menu" class="air__topbar__searchInput" type="text"
            placeholder="Start typing to search..." name="searchData" #searchData="ngModel" [(ngModel)]="searchdata.searchData" />
          <div *dropdownMenu id="dropdown-alignment"  class="dropdown-menu hideclearfilter dropdown-menu-right" role="menu"
            aria-labelledby="button-disabled-menu" style="margin-right: -9rem; min-width: 20rem;padding: 1rem;">
            <div class="kit__l1 ">
              <div class="text-uppercase font-size-12 mb-2 text-gray-6">Filters <a (click)="clearfilter()" style="float: right;
                font-size: 12px;cursor:pointer;
                color: #333333 !important;">Clear filter</a></div> 
              <ul class="list-unstyled">
                <div class="form-group">
                  <div class="btn-group mr-2 mb-2" aria-label="" role="group">
                    <button type="button" class="btn btn-light" [ngClass]="{'active':searchdata.date =='1','nonactive':searchdata.date !='1'}" (click)="searchdata.date ='1'">Yesterday</button>
                    <button type="button" class="btn btn-light" [ngClass]="{'active':searchdata.date =='7','nonactive':searchdata.date !='7'}" (click)="searchdata.date ='7'">Last Week</button>
                    <div class="btn-group" role="group">
                      <button type="button" class="btn btn-light dropdown-toggle" data-toggle="dropdown"
                      aria-expanded="false" [ngClass]="{'active':searchdata.date =='15' || searchdata.date =='30' || searchdata.date =='60','nonactive':searchdata.date !='15' && searchdata.date =='30' && searchdata.date =='60'}">
                        More
                      </button>
                      <div class="dropdown-menu">
                        <a class="dropdown-item searcdate" href="javascript: void(0);" (click)="searchdata.date ='15'">Last 15 Days</a>
                        <a class="dropdown-item searcdate" href="javascript: void(0);" (click)="searchdata.date ='30'">Last 30 Days</a>
                        <a class="dropdown-item searcdate" href="javascript: void(0);" (click)="searchdata.date ='60'">Last 60 Days</a>
                      </div>
                    </div>
                  </div>
                </div>

                <div class="form-group row" style="padding: 0px 10px;">
                  <label class="kit__utils__control kit__utils__control__checkbox kit__gallery__control text-warning pull-left">
                    <input type="radio" name="type" #type="ngModel" [ngModel]="searchdata.type1" value="Document" (change)="Onchange($event,'Document')"/>
                    <span class="kit__utils__control__indicator"></span>
                    Document
                  </label>
                  
                  <label class="kit__utils__control kit__utils__control__checkbox kit__gallery__control pull-right" style="color: rgb(201 101 106) !important;">
                    <input type="radio" name="type" #type="ngModel" [ngModel]="searchdata.type1" value="Library" (change)="Onchange($event,'Library')"/>
                    <span class="kit__utils__control__indicator"></span>
                    Library
                  </label>
                </div>

                <div class="form-group" *ngIf="searchdata.type1 == 'Document'">
                  <label>By Progress</label>
                  <ng-multiselect-dropdown [placeholder]="'Select Progress'" [data]="searchList"
                    [(ngModel)]="searchdata.progress" [settings]="searchSettings" (onSelect)="onItemSelect($event)"
                    (onDeSelect)="onItemDeSelect($event)" (onDeSelectAll)="onItemDeSelectAll($event)"
                    (onSelectAll)="onSelectAll($event)">
                  </ng-multiselect-dropdown>
                </div>
  
                <div class="form-group" *ngIf="searchdata.type1 == 'Library'">
                  <label>Search In</label>
                  <ng-multiselect-dropdown [placeholder]="'Select Unit'" [data]="searchUnitList"
                    [(ngModel)]="searchdata.unit" [settings]="searchUnitSettings" (onSelect)="onItemUnitSelect($event)"
                    (onDeSelect)="onItemUnitDeSelect($event)" (onDeSelectAll)="onItemUnitDeSelectAll($event)"
                    (onSelectAll)="onUnitSelectAll($event)">
                  </ng-multiselect-dropdown>
                </div>
                <div class="form-group">
                  <button class="btn text-white pull-right" (click)="getClientList();dropdown.hide()" style=" background-color: #6EACAF !important;">Search</button>
                </div>
              </ul>
            </div>
          </div>
        </div>
      </div>


    <div class="mt-2 float-left">
      <h5>Recent Activity</h5>
    </div>

    <div class="card col-lg-12" *ngIf="!clientList || clientList.length==0">
      <div class="card-body" style="padding:10px 5px 1px 5px !important; ">
        <div class="kit__l3">
            <ul class="list-unstyled">
              <li class="kit__l3__item">
                No Data Found
            </li>
          </ul>
        </div>
      </div>
    </div>

    <ng-container *ngFor="let value1 of arrayvalue| filter:searchdata.searchData;let i =index">
    <div class="card col-lg-12" [ngClass]="{'odd':i%2!=0}">
      <div class="card-body" style="padding:10px 5px 1px 5px !important; ">
         <div class="kit__l3">
              <ul class="list-unstyled">
                <li class="kit__l3__item">
                  <a  class="kit__l3__itemLink">
                    <div class="kit__l3__itemMeta font-size-36 flex-shrink-0 my-1 mt-3">
                     <img *ngIf="value1.Formtype_fk === 1" alt="" src="./assets/svg/structured-doc-icon.svg"  style="width:50px; height: 36px;"  />
                     <img *ngIf="value1.Formtype_fk === 2" alt="" src="./assets/svg/unstructured-doc-cion.svg" style="width:50px; height: 36px;" />
                     <img *ngIf="value1.Formtype_fk === 3" alt="" src="./assets/svg/assessment_survey-icon.svg" style="width:50px; height: 36px;" />
                    </div>
                    
                    <div class="mr-1 text-uppercase" style="width: 620px;">
                      <div (click)="btnviewclick(value1)" class="font-weight-bold" style="color: #6EACAF !important ;font-size:16px;cursor: pointer;">{{value1.Masterdocumentname}}</div>
                      <div class="text-muted" *ngIf="value1.lastmodified_date==null">{{value1.SystemName}} | Modified : {{value1['Created Date'] | date: "MM/dd/yyyy"}}</div>
                      <div class="text-muted" *ngIf="value1.lastmodified_date!=null">{{value1.SystemName}} | Modified : {{value1['lastmodified_date'] | date: "MM/dd/yyyy"}}</div>
                    </div>
                    <div class="statussec" style="width: 90px;">
                      <span style="font-weight: bold;text-align: center; color:gray;text-transform: capitalize;">{{value1.status}}</span>
                    </div>
                    <div class="kit__l3__item dashboardactionbtn" style="margin-left: calc(100% - 81%);">
                      <span *ngIf="value1.status == 'In-Progress' || value1.status == 'Re-Edit'" (click)="btnEditClick(value1)" class="btn-rounded text-white" style=" margin-right: 23px;cursor: pointer;background-color: #6EACAF !important; position: relative;"> Edit</span>
                      <span *ngIf="value1.status != 'In-Progress' && value1.status != 'Re-Edit'" (click)="btnviewclick(value1)" class="btn-rounded text-white" style=" margin-right: 15px;cursor: pointer;background-color: #6EACAF !important; position: relative;"> View</span>
                      <span  *ngIf="value1.status == 'Re-Edit' || value1.status == 'In-Progress' ||value1.status == 'Submitted' || value1.status == 'Approved'" style=" position: relative; margin-right: 28px; cursor:pointer;display: inline-block;" (click)="gotosharepage(value1)">
                   <img class="imgicons" tooltip="Share" placement="bottom" [src]="shareicon" alt="" 
                          (mouseout)="imagechangeoverout('share')"style="width:35px; height:20px; filter: brightness(50%);"/> </span>
                          <span *ngIf="value1.status == 'Library' " style=" position: relative; margin-right: 28px;display: inline-block; cursor: pointer;" (click)="saveopenModal(template)" >
                          <img class="imgicons"  placement="bottom" [src]="shareicon" alt="" 
                          (mouseout)="imagechangeoverout('share')"style="width:35px; height:20px; filter: brightness(50%);"/> 
                          </span>
                    <span style="position: relative;cursor:pointer" (click)="showmorediv1(value1,value1.designproductId)"> <img src="./assets/svg/moreicon.svg" alt="" style=" width:4px; height:20px;" /></span> 
                      <div class="selecteddivs" *ngIf="value1.designproductId==selectedid && moredivshow">
                        <a (click)="btnPDFClick0(value1)" style="padding-right: 5px;"> 
                          <span class="mdi mdi-file-pdf" [ngStyle]="value1.Formtype_fk == '1' || value1.Formtype_fk == '2'  ? {'color': '#6EACAF', 'cursor':'pointer'} : {'color': 'rgb(135,206,250)', 'cursor':'default'}" tooltip="PDF"  placement="top" container="body"></span>
                        </a>
                        <a *ngIf="value1.Formtype_fk == '1' || value1.Formtype_fk == '3'" style="padding-right: 5px;"> 
                          <span class="mdi mdi-file-check"  [ngStyle]="value1.Formtype_fk == '2' ? {'color': '#6EACAF', 'cursor':'pointer'} : {'color': '#87cefa8c', 'cursor':'default'}" tooltip="RC View" placement="top" container="body"></span>
                        </a>
                        <a *ngIf="value1.Formtype_fk == '2'" (click)="downloadlink(value1,'html')" style="padding-right: 5px;"> 
                          <span class="mdi mdi-file-check"  [ngStyle]="value1.Formtype_fk == '2' ? {'color': '#6EACAF', 'cursor':'pointer'} : {'color': 'rgb(135,206,250)', 'cursor':'default'}" tooltip="RC View" placement="top" container="body"></span>
                        </a>
                    </div>  
                </div>
              </a>
            </li>
          </ul>
        </div>
      </div>
    </div>
    </ng-container>

    <ng-template #template>
      <div class="modal-body"style="text-align: end;width: 90%;" >
          <h4 class="submit_h4">Library Document Can't Be Share</h4>
          <button class="btn mr-3 submit_Answer" type="button"  style="background-color: #6EACAF !important; border-color: #6EACAF;"(click)="btnClosePopup()">OK</button>&nbsp;&nbsp;
      </div>
    </ng-template>

<div class="">
<div class="card-body">
<div class="row">
<div class="card col-xl-6 col-lg-12" style="    border: 1px solid #e2dede;
padding: 15px;
margin: 0px 6px 0px 0px;
flex: 0 0 49.5%;
max-width: 49.5%;">
            <h5 class="mb-4"><strong>Document Code Summary</strong></h5>
            <div class="mb-5"> <canvas baseChart [datasets]="barChartData" [labels]="barChartLabels"
                [options]="barChartOptions" [plugins]="barChartPlugins" [legend]="barChartLegend"
                [chartType]="barChartType" [colors]="barChartColors">
              </canvas>
            </div>
          </div>
          <div class="card col-xl-6 col-lg-12" style="border: 1px solid #e2dede;
padding: 15px;
margin: 0px 0px 0px 6px;
flex: 0 0 49.5%;
max-width: 49.5%;">
            <h5 class="mb-4"><strong>My Documents Summary</strong></h5>
            <div class="mb-5">
              <canvas baseChart [data]="doughnutChartData" [options]="doughnutChartOptions"
                [labels]="doughnutChartLabels" [chartType]="doughnutChartType" [colors]="doughnutChartColors">
              </canvas>
            </div>
          </div>
        </div>
      </div>
    </div>
     <style type="text/css">.launcher{position:relative;text-align:center;color:#272727;z-index:999!important}.moreicon{position:absolute;top:45px}.moreicon:before{content:'';border-left:10px solid transparent;border-right:10px solid transparent;border-bottom:10px solid #ccc;border-bottom-color:#ccc;position:absolute;top:-9px;left:16px}.moreicon:after{position:absolute;top:-8px;left:16px;display:inline-block;border-right:9px solid transparent;border-bottom:9px solid #fff;border-left:9px solid transparent;content:"";z-index:9999}.apps{position:relative;border:1px solid #ccc;border-color:rgba(0,0,0,0.2);box-shadow:0 2px 10px rgba(0,0,0,0.2);-webkit-transition:height 200ms ease-in-out;transition:height 200ms ease-in-out;min-height:210px;overflow-y:auto;overflow-x:hidden;width:320px;height:375px;display:block;white-space:normal;text-align:left;margin:0;padding:0}.apps ul{background:#fff;margin:0;padding:15px;text-align:left;width:440px;overflow:hidden;list-style:none;position:relative;display:block;white-space:normal;min-height:100px}.apps ul li{height:98px;width:86px;color:#000;margin:0;padding:1px;text-align:center;display:inline-block;vertical-align:top}.apps ul li a{text-decoration:none;display:block;margin:8px 2px;text-align:center;border:1px solid transparent;-webkit-transform:translate(0px,0px);transform:translate(0px,0px);-webkit-transition:-webkit-transform .2s cubic-bezier(0.333,0,0,1);transition:-webkit-transform .2s cubic-bezier(0.333,0,0,1);transition:transform .2s cubic-bezier(0.333,0,0,1);transition:transform .2s cubic-bezier(0.333,0,0,1),-webkit-transform .2s cubic-bezier(0.333,0,0,1)}.apps ul li a:hover{border-color:#e5e5e5}.apps ul li a span{font-size:13px;line-height:20px;display:block;color:#272727}.apps ul li a img{width:64px;height:64px;display:block;margin:0 auto}.apps .more{line-height:40px;text-align:center;display:block;width:322px;background:#f5f5f5;cursor:pointer;height:40px;overflow:hidden;position:absolute;text-decoration:none;color:#282828;bottom:0}.apps .more .apps{height:500px!important}.apps .overflow .more{border-bottom:1px solid #ebebeb;left:28px;width:270px;height:0;cursor:default;outline:none}.launcher .button{cursor:pointer;width:30px;margin:0 auto}.launcher .button:hover img{opacity:.85}.hide{display:none}::-webkit-scrollbar-thumb{background-clip:padding-box;background-color:rgba(0,0,0,0.3);border:5px solid transparent;border-radius:10px;min-height:20px;min-width:20px;height:5px;width:5px}::-webkit-scrollbar{height:15px;width:15px;background:#fff}::-webkit-scrollbar-button{height:0;width:0}@-webkit-keyframes menu{0%{opacity:0;-webkit-transform:translateY(-2rem);transform:translateY(-2rem)}100%{oapcity:1;-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes menu{0%{opacity:0;-webkit-transform:translateY(-2rem);transform:translateY(-2rem)}100%{oapcity:1;-webkit-transform:translateY(0);transform:translateY(0)}}.kit__utils__heading:after,.air__utils__heading:after{position:absolute;display:block;content:'';left:0;bottom:-3px;height:4px;width:35px;border-radius:7px;background:#6EACAF} </style>
  </div>
</div>


dashboard.scss

.btn-light:focus ,.btn-light.active , .btn-light:active, .btn-light:not(:disabled):not(.disabled).active, .show > .btn-light.dropdown-toggle{
    background-color: #6eacaf;
    border-color: #6eacaf;
    color:#fff;
}
.odd{
    background-color:#e4e6e6  !important;
}
.kit__utils__control input:checked ~ .kit__utils__control__indicator{
    background: #6eacaf !important;
}
:host ::ng-deep .form-group .multiselect-dropdown .dropdown-btn  {
    font-size: 13px !important;
  }
  :host ::ng-deep .form-group .multiselect-dropdown .dropdown-up{
  border-bottom: 6px solid #636161 !important;
  border-left: 4px solid transparent !important;
  border-right: 4px solid transparent !important;
  }
  :host ::ng-deep .form-group .multiselect-dropdown .dropdown-down{
  border-top: 6px solid #636161 !important;
  border-left: 4px solid transparent !important;
  border-right: 4px solid transparent !important;
  }
  :host ::ng-deep .form-group .multiselect-dropdown .dropdown-btn .selected-item {
    border: 1px solid #6eacaf !important;
    margin-right: 4px !important;
    background: #6eacaf !important;
    padding: 0 5px !important;
    color: #fff !important;
    border-radius: 2px !important;
    float: left !important;
}
:host ::ng-deep .multiselect-dropdown .dropdown-btn .selected-item a{
    color: #fff !important;
}
:host ::ng-deep .multiselect-item-checkbox input[type=checkbox]:checked + div:before{
    background: #6eacaf !important;
}
:host ::ng-deep .multiselect-item-checkbox input[type=checkbox] + div:before{
    color: #6eacaf !important;
    border: 2px solid #6eacaf !important;
}
.font-weight-bold {
    font-weight: 600 !important;
}
.kit__l3__itemMeta{    margin-right: 20px !important;
}
.selecteddivs{
    background: white;
    position: absolute;
    right: 37px;
    margin-top: -3px;
    border: 1px solid #cac7c7;
    z-index: 999;
  }
  .searcdate{color: #333333 !important;}
  .searcdate:hover{color: #fff !important;background-color: #6eacaf !important;}
  .selecteddivs span{font-size: 29px; cursor:pointer;}
  .selecteddivs a span{color: #b6d8d9;}
  .selecteddivs a:hover span{color: #6eacaf !important;}
  .imgicons :hover
  {
    background-color: #6EACAF !important;
  }

  .submit_h4{
    text-align: center;padding: 5px;
  }
  .submit_Answer{
    width:100px; background-color: #6EACAF !important; border-color: #6EACAF !important;color: #fff !important;
  }
  
  dashboard.ts
  
  import { Component, OnInit, HostListener,TemplateRef, ViewChild } from '@angular/core';
import { UserService } from '../../../../shared/services/user.service';
import { Router } from '@angular/router';
import { ChartType } from 'chart.js';
import { Color, MultiDataSet, Label } from 'ng2-charts';
import { ChartOptions, ChartDataSets } from 'chart.js';
import { BsModalService, BsModalRef } from 'ngx-bootstrap/modal';
import * as _ from 'lodash';
@Component({
  selector: 'app-dashboardview',
  templateUrl: './dashboardview.component.html',
  styleUrls: ['./dashboardview.component.scss']
})
export class DashboardviewComponent implements OnInit {
  listname:any=[];
  selectedid: any;
moredivshow: boolean=false;
  @HostListener('document:click', ['$event'])
  clickout(event) {
  
   if(event.target.currentSrc && (event.target.currentSrc.search("moreicon.svg")!=-1)){
this.moredivshow=true;
   }else{
    this.moredivshow=false;
   }
  }
  constructor(private userService: UserService, private router: Router,private modalService: BsModalService) { }
  ngOnInit() {
    this.getLibdata();
    this.searchSettings = {
      singleSelection: false,
      idField: 'progressName',
      textField: 'progressName',
      selectAllText: 'Select All',
      unSelectAllText: 'Unselect All',
      itemsShowLimit: 2,
    };
    this.searchUnitSettings = {
      singleSelection: false,
      idField: 'unitName',
      textField: 'unitName',
      selectAllText: 'Select All',
      unSelectAllText: 'Unselect All',
      itemsShowLimit: 2,
    };
  }

  clientList: any;
  userdata: any;
  doughactivity:any=[];
  doughnoofdocu=[];
  noofdocument=[];
  noofdoc=[];
  bucode=[];
  searchdata: any = {
    date: "",
    progress: "",
    searchData: "",
    type1: "",
    unit: ""
  }
  searchList = [
    {
      "progressName":"InProgress"
    },
    {
      "progressName":"Re-Edit"
    },
    {
      "progressName":"Approved"
    },
    {
      "progressName":"Submitted"
    }
  ];
  selectedItems = [];
  searchSettings = {};
  prog:any;
  onItemSelect(item: any) {
    
    let ab: any = new Array<any>();
    let id: any;
    if (item) {
      ab.push(item)
      
    }
    if (this.prog == undefined || this.prog == "" || this.prog == null)
      this.prog = ab.toString()
    else
      this.prog = this.prog + ',' + ab.toString()
   
  }
  onItemDeSelect(item: any) {
    
    let ab;
    ab = this.prog.split(',')
    ab = _.reject(ab, (o) => {
      return o == ''
    })
    let id: any;
    if (item) {
      ab = _.reject(ab, (o) => {
        return o == item
      })
    }
    this.prog = ab.toString()
  }
  onItemDeSelectAll(items: any) {
    this.prog = null
  }

  onSelectAll(items: any) {

    let lis : any=[] ;
    let ab : any=[];
    let id: any;
    if (items) {
      items.forEach(element => {
       
        ab.push(element);
       
      });
      
      id = ab.toString();

    }
    
    else {
      id = null;

    }
    this.prog = id
    
  }
  searchUnitList = [
    {
      "unitName":"OverAll"
    },
    {
      "unitName":"Business Unit"
    },
    {
      "unitName":"Staging"
    }
  ];
  searchUnitSettings = {};
  unit:any;
  onItemUnitSelect(item: any) {
   
    let ab: any = new Array<any>();
    let id: any;
    if (item) {
      ab.push(item)
    }
    if (this.unit == undefined || this.unit == "" || this.unit == null)
      this.unit = ab.toString()
    else
      this.unit = this.unit + ',' + ab.toString()
    
  }
  onItemUnitDeSelect(item: any) {
    
    let ab;
    ab = this.unit.split(',')
    
    ab = _.reject(ab, (o) => {
      return o == ''
    })
    let id: any;
    if (item) {
      ab = _.reject(ab, (o) => {
        return o == item
      })
    }
    this.unit = ab.toString()
  }
  onItemUnitDeSelectAll(items: any) {
    this.unit = null
  }
  onUnitSelectAll(items: any) {
   
    let ab:any=[];
    let id: any;
    if (items) {
      items.forEach(element => {
     
        ab.push(element);
     
      });
   
      id = ab.toString();

    }
    else {
      id = null;

    }
    this.unit = id
  }
  
  clearfilter(){
    $('.hideclearfilter').hide();
    // this.getClientList();
    var clearvalue : any = {
      date: "",
      progress: "",
      searchData: "",
      type1: "",
      unit: ""
    }
    this.onItemUnitDeSelectAll(null)
    this.searchdata.date=""
    this.searchdata.type1 = ""
    this.searchdata.progress=[]
    this.searchdata.unit=[]
    
    this.userService.recentactivity(clearvalue).subscribe(data => {
      this.clientList = data;
      this.dataarray=data;
    
      this.value1=this.clientList[0]
      this.value2=this.clientList[1]
      this.value3=this.clientList[2]
      this.value4=this.clientList[3]
      this.arrayvalue=this.dataarray.slice(0,4)
    
  });
}
modalRef: BsModalRef;
  getLibdata() {
    this.getClientList()
    this.userService.getLibrarySummaryData().subscribe(data => {
      
      this.getuseractive();
      this.clientList = data;
      // this.test.push(this.clientList[0].NoOfDocument)
     
      for(var i=0;i<this.clientList.length;i++){
       
        this.noofdocument.push(this.clientList[i].NoOfDocument)
        this.noofdoc.push(this.clientList[i].NoOfDocCode)
        this.bucode.push(this.clientList[i].BuCode)
        // this.test.push(this)
      }
    })
  }
  Onchange(event,type){
    console.log("change",type)
    if(event && type){
      this.searchdata.type1 = type
    }
  }
  value1:any;
  value2:any;
  value3:any;
  value4:any;
  dataarray:any;
  arrayvalue:any;
  value:any
  getClientList() {
  
    var searchvalue = Object.assign({}, this.searchdata);
    if(this.prog && this.searchdata.type1 == 'Document'){
      searchvalue.progress = this.prog
      searchvalue.unit = ''
     
    }
    else{
      searchvalue.unit = this.unit?this.unit:''
      searchvalue.progress = ''
    
    }
    
    
    this.userService.recentactivity(searchvalue).subscribe(rdata => {
      this.clientList = rdata;
      this.dataarray=rdata;
     
      this.value1=this.clientList[0]
      this.value2=this.clientList[1]
      this.value3=this.clientList[2]
      this.value4=this.clientList[3]
      this.arrayvalue=this.dataarray.slice(0,4)
    
    })
  }
  gotosharepage(event){

    
    var obje = {
      "documentname":event.SystemName,
      "documentid":event.designproductId,
      "doctype": event.Formtype_fk
    }
    this.userService.changeNav(obje)
    this.router.navigate(['/client/notificationshare']);
  }

  saveopenModal(template: TemplateRef<any>) {
    console.log("sasasdas",template)
    this.modalRef = this.modalService.show(template,
        Object.assign({}, { class: 'modal-md' }));     
    }
    btnClosePopup(){
      this.modalRef.hide();
     
    }
propertydata: any;
btnEditClick(value) {
  this.propertydata = {
    "parent": "Inprogress"
  }
  var obje={}
  var tableName = "";
  if(this.searchdata.type1 == "Library")
  {
    tableName = "library";
  }
  else
  {
    tableName = "design";
  }
  if(value.Formtype_fk==1 || value.Formtype_fk==3){
  obje = {
    "routerpage":"Inprogress",
    "tablename":tableName,
    "content":"Editable",
    "designid": value.designproductId,
    "mode": "edit",
    "formtypeid": value.Formtype_fk
  }}
  if(value.Formtype_fk==2){
    obje = {
      "routerpage":"Inprogress",
      "tablename":tableName,
      "content":"Editable",
      "designid": value.designproductId,
      "mode": "edit",
      "formtypeid": value.Formtype_fk
    }}
 this.userService.changeNav(obje)
  if (value.Formtype_fk === 1) this.router.navigate([`/designbuilder`]);

  else if (value.Formtype_fk === 2) this.router.navigate([`/htmldocbuilder`]);

  else if (value.Formtype_fk === 3) this.router.navigate([`/surveybuilder`]);
}

btnviewclick(value){
  var obje={}
  var tableName = "";
  if(this.searchdata.type1 == "Library")
  {
    tableName = "library";
  }
  else
  {
    tableName = "design";
  }
  if(value.Formtype_fk==1 || value.Formtype_fk==3){
  obje = {
    "routerpage":String(value.status),
    "tablename":tableName,
    "content":"notEditable",
    "designid": value.designproductId,
    "mode": "edit",
    "formtypeid": value.Formtype_fk
  }}
  if(value.Formtype_fk==2){
    obje = {
      "routerpage":String(value.status),
      "tablename":tableName,
      "content":"notEditable",
      "designid": value.designproductId,
      "mode": "edit",
      "formtypeid": value.Formtype_fk
  }}

 this.userService.changeNav(obje)
  if (value.Formtype_fk === 1) this.router.navigate([`/designbuilderpreview`]);

  else if (value.Formtype_fk === 2) this.router.navigate([`/designview`]);

  else if (value.Formtype_fk === 3) this.router.navigate([`/surveybuilder`]);
}
  
  
// propertydata: any;
// btnsecondclick() {
//   this.propertydata = {
//     "parent": "in-progress"
//   }

//   var obje = {
//     "routerpage":"inprogress",
//     "tablename":"design",
//     "content":"Editable",
//     "designid": this.value2.designproductid,
//     "mode": "edit",
//     "formtypeid": this.value2.formtypeid
//   }
//   this.userService.changeNav(obje)

//   // this.router.navigate([`/designbuilder/inprogress/edit/${obje.designid}`]);

  
//   if (this.value2.formtypeid === 1) this.router.navigate([`/designbuilder`]);

//   else if (this.value2.formtypeid === 2) this.router.navigate([`/htmldocbuilder`]);

//   else if (this.value2.formtypeid === 3) this.router.navigate([`/surveybuilder`]);
// }
// btnviewsecond(){
// this.btnsecondclick();
// }

view4(e){

 


}
showmorediv1(frmid,id){
      this.selectedid=frmid.designproductId;
      this.moredivshow=!this.moredivshow;
   }
   
// btnEditClick0(event) {
 
//   // var typeid = this.formtype
//   var obje = {
//     "routerpage":"submitted",
//     "tablename":"design",
//     "content":"notEditable",
//     "designid": event.designproductId,
//     "mode": "edit",
//     "formtypeid": event.Formtype_fk
//   }
//   this.userService.changeNav(obje)
//   // this.router.navigate([`/designbuilder/inprogress/edit/${obje.designid}`]);

  
//   if (event.Formtype_fk=== 1) this.router.navigate([`/designbuilder`]);

//   else if (event.Formtype_fk === 2) this.router.navigate([`/htmldocbuilder`]);

//   else if (event.Formtype_fk === 3) this.router.navigate([`/surveybuilder`]);
// }

tablename="design"
btnPDFClick0(event) {
  if (event.Formtype_fk === 1) {
    this.userService.downloadPDFstructdoc(event.designproductId,this.tablename).subscribe(
      response => {

        let blob: any = new Blob([response], { type: "application/pdf;" });
        const url = window.URL.createObjectURL(blob);
        window.open(url);
      },
        error =>{
          alert("PDF file not found for the selected document. Please try again later.")
        })
      }
  

  if (event.Formtype_fk === 2)
  // this.downloadlink(pdfid)
  // this.name = "pdf"
  {
    
    this.userService.DownloadPDFFile(event.designproductId,this.tablename).subscribe(
      response1 => {
        let blob: any = new Blob([response1], { type: 'application/PDF;' });
        const url = window.URL.createObjectURL(blob);
        window.open(url);
      },
      error =>{
        alert("PDF file not found for the selected document. Please try again later.")
      })
  }
}

btnHTMLClick0(event) {
  if (event.Formtype_fk === 2) {
    var pdfid = event.designproductId
    this.downloadlink(pdfid,'html')
    this.name = "html"
  }
}

btnJSONClick0(event) {
  if (event.Formtype_fk === 1 || event.Formtype_fk === 3) {
    var pdfid = event.designproductId
    this.downloadlink(pdfid,'json')
    this.name = "json"
  }
}
name: any
downloadlink(pdfid,docname) {
    this.name=docname;
       if (this.name == "html") {
        this.userService.downloadPDF(pdfid.designproductId,this.tablename).subscribe(
          res => {
        if (res.html === "Not Found") {
          alert("HTML file not found for the selected document. Please try again later.");
        }
        else {
              // var fileURL = URL.createObjectURL(res.pdf);
              // let blob: any = new Blob([res.blob()], { type: 'application/pdf;' });
              // const url = window.URL.createObjectURL(blob);
              // window.open(url);
              var myjson = res.html;
              var xoo = window.open();
              xoo.document.open();
              xoo.document.write(myjson);
              xoo.document.close();
        }
      });
      }
      else if (this.name == "json") {
        this.userService.downloadPDF(pdfid.designproductId,this.tablename).subscribe(
          res => {
        if (res === "Not Found") {
          alert("JSON not found for the selected document. Please try again later.");
        }
        else {
//          var myjson = JSON.stringify(res.Actjson, null, 2);
          var myjson = res.Actjson;
         
          var xyy = window.open();
          xyy.document.open();
          xyy.document.write(myjson);
          xyy.document.close();
        }
    });
}
}

  getuseractive() {
    this.userService.getUserActivitySummaryData().subscribe(data => {
      this.userdata = data;
    
      
      for(var i=0;i<this.userdata.length;i++){
        
        this.doughactivity.push(this.userdata[i].Activity)
        this.doughnoofdocu.push(this.userdata[i].NoofDocument)
        
        // this.test.push(this)
      }
    })
  }

  public doughnutChartLabels: Label[] = this.doughactivity;
  public doughnutChartData: MultiDataSet = [
    this.doughnoofdocu
  ];
 
  public doughnutChartType: ChartType = 'doughnut';
  public doughnutChartColors = [{ backgroundColor: ['#71aab1','#708cb1', '#98bce9', '#4c8991','#2e8c9f','#7ea2a5'], },];
  public doughnutChartOptions: ChartOptions = {
    responsive: true,
    // We use these empty structures as placeholders for dynamic theming.
    // scales: { xAxes: [{}], yAxes: [{}] },
    legend: {
      position: 'bottom',
      align: 'start',
    },
  };

  public barChartOptions: ChartOptions = {
    responsive: true,
    // We use these empty structures as placeholders for dynamic theming.
    scales: { xAxes: [{}], yAxes: [{}] },
    legend: {
      position: 'bottom',
      align: 'start',
    },
    plugins: {
      datalabels: {
        anchor: 'end',
        align: 'end',
      }
    }
  };
  
  public barChartLabels: Label[] = this.bucode;
  public barChartType: ChartType = 'bar';
  public barChartLegend = true;
  public barChartPlugins = '';

  public barChartData: ChartDataSets[] = [
    { data:this.noofdocument , label: 'No.of Document' },
    { data: this.noofdoc, label: 'No.of Doc Code' }
  ];

  public barChartColors: Color[] = [
    { backgroundColor: '#6facb1', borderColor: "#6facb1", borderWidth:1 },
    { backgroundColor: '#4c8991', borderColor: "#4c8991", borderWidth:1 },
  ];
 /* public barChartColors: Color[] = [
    { borderColor: 'red' },
    { borderColor: 'red' },
  ];*/
  shareicon: string='./assets/svg/share-icon.svg';  
  imagechangeoverout(value){
  
    if(value=="share")
    {
      this.shareicon='./assets/svg/share-icon.svg'; 
    }
  }
}


profilepage.html

<div class="container-fluid">
  <div class="row mx-auto mt-4">
    <form class="form-horizontal form-material ng-untouched ng-pristine ng-valid" #profilengForm="ngForm" name="proForm"
      (ngSubmit)="updateProfileDetails(profilengForm.value)">
      <div class="col-xl-5 col-lg-12 pull-left" style="background-color: white;">
        <div class="card">
          <div class="card-body">
            <h5 class="text-black mt-4">
              <strong>Personal Information</strong>
            </h5>
            <div class="d-flex flex-wrap flex-column align-items-center">
              <div class="kit__utils__avatar kit__utils__avatar--size64 mb-3">
                <label class="hoverable" for="fileInput" (click)="fileInput.click()">
                  <img class="rounded-circle" alt="" width="64" [src]="profileDetails.Profilepicture">
                </label>
              </div>
              <div class="text-center">
                <div class="text-dark font-weight-bold font-size-18">{{userDetail.firstname}} {{userDetail.lastname}}
                </div>
                <div class="text-uppercase font-size-12 mb-3">{{userDetail.usergroupname}}</div>
                <input style="display: none" type="file" (change)="onSelectFile($event)" accept="image/*" #fileInput>
              </div>
            </div>
            <div class="row mt-2">
              <div class="col-lg-6">
                <div class="form-group">
                  <label class="form-control-label" for="l0">First Name <span class="req">*</span></label>
                  <input type="text" required id="firstName" name="firstname" class="form-control form-control-line"
                  onkeypress="return /[a-z]/i.test(event.key)" [(ngModel)]="profileDetails.firstname" #firstName="ngModel"  placeholder="Enter First Name">
                  <span *ngIf="firstName.touched && firstName.invalid" class="form-text text-danger">
                    Please enter the First Name !
                  </span>
                </div> 
              </div>
              <div class="col-lg-6">
                <div class="form-group">
                  <label class="form-control-label" for="l0">Last Name <span class="req">*</span></label>
                  <input class="form-control form-control-line" required id="lastName" name="lastname" type="text"
                  onkeypress="return /[a-z]/i.test(event.key)" [(ngModel)]="profileDetails.lastname" #lastName="ngModel" placeholder="Enter Last Name">
                  <span *ngIf="lastName.touched && lastName.invalid" class="form-text text-danger">
                    Please enter the Last Name !
                  </span>
                </div>
              </div>
            </div>
            <div class="row">
              <div class="col-lg-6">
                <div class="form-group">
                  <label class="form-control-label" for="l0">Email <span class="req">*</span></label>
                  <input placeholder="Enter your Email" class="form-control form-control-line" #email="ngModel"
                    id="email" name="email"  pattern="^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$" [(ngModel)]="profileDetails.email" type="email">
                  <div class="errorlab">
                    <span *ngIf="email.touched &&email.invalid && !email.hasError('pattern')"
                      class="form-text text-danger">
                      Please enter the email ! </span>
                    <span style="display: block ; font-size: 10px;" class="form-text text-danger"
                      [hidden]="!email.hasError('pattern')">Email format should
                      be <small><strong style="font-size: 10px;">user@solvedge.com</strong> </small>
                  </span>
                  </div>
                </div>
              </div>
              <div class="col-lg-6">
                <div class="form-group">
                  <label class="form-control-label" for="l3">Nick Name <span class="req">*</span></label>
                  <input class="form-control form-control-line" required id="nickname" name="nickname" type="text"
                  onkeypress="return /[a-z]/i.test(event.key)" [(ngModel)]="profileDetails.nickname" #nickname="ngModel" placeholder="Enter Nick Name">
                  <span *ngIf="nickname.touched && nickname.invalid" class="form-text text-danger">
                    Please enter the Nick Name !
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="col-xl-7 col-lg-12 pull-right">
        <div class="card">
          <div class="card-body">
            <h5 class="text-black mt-4">
              <strong>Address</strong>
            </h5>
            <div class="row mt-3">
              <div class="col-lg-4">
                <div class="form-group">
                  <label class="form-control-label" for="l3">Street 1</label>
                  <input placeholder="street1" class="form-control form-control-line" #lphone="ngModel" id="street1"
                    name="street1" [(ngModel)]="profileDetails.street1" type="text" mask="">
                </div>
              </div>
              <div class="col-lg-4">
                <div class="form-group">
                  <label class="form-control-label" for="l3">Street 2</label>
                  <input placeholder="street2" class="form-control form-control-line" #lphone="ngModel" id="street2"
                    name="street2" [(ngModel)]="profileDetails.street2" type="text" mask="">
                </div>
              </div>
              <div class="col-lg-4">
                <div class="form-group">
                  <label class="form-control-label" for="l4">City</label>
                  <input placeholder="city" class="form-control form-control-line" #lphone="ngModel" id="city"
                  onkeypress="return /[a-z]/i.test(event.key)" name="city" [(ngModel)]="profileDetails.city" type="text" mask="">
                </div>
              </div>
            </div>
            <div class="row">
              <div class="col-lg-4">
                <div class="form-group">
                  <label class="form-control-label" for="l3">State</label>
                  <input placeholder="state" class="form-control form-control-line" #lphone="ngModel" id="state"
                  onkeypress="return /[a-z]/i.test(event.key)" name="state" [(ngModel)]="profileDetails.state" Onlycharacters="true" type="text" appAlphabetOnly>
                </div>
              </div>
              <div class="col-lg-4">
                <div class="form-group">
                  <label class="form-control-label" for="l3">Country</label>
                  <input placeholder="country" class="form-control form-control-line" #lphone="ngModel" id="country"
                  onkeypress="return /[a-z]/i.test(event.key)" name="country" maxlength="50" [(ngModel)]="profileDetails.country" Onlycharacters="true" type="text"
                    mask="">
                </div>
              </div>
              <div class="col-lg-4">
                <div class="form-group">
                  <label class="form-control-label" for="l4">Zipcode</label>
                  <input placeholder="zipcode" class="form-control form-control-line" #lphone="ngModel" id="zipcode"
                    name="zipcode" [(ngModel)]="profileDetails.zipcode" OnlyNumber="true" type="text" mask="">
                </div>
              </div>
              <div class="col-lg-4">
                <div class="form-group">
                  <label class="form-control-label" for="l3">Phone</label>
                  <input placeholder="(000) 000-0000" class="form-control form-control-line" #phone="ngModel"
                  pattern="^[0-9]*$" onpaste="return false;" ondrop="return false;"
                  id="phone" autocomplete="off" minlength="10" maxlength="15" (keyup)="onKey(profileDetails.phone)" name="phone"
                    [(ngModel)]="profileDetails.phone" type="text" OnlyNumber="true" mask="(000) 000-0000">
                  <span *ngIf="shownMsg" class="form-text text-danger">Phone No must be 10 numbers</span>
                  <!-- <span *ngIf="shwErr" class="form-text text-danger">Phone No must be numbers</span> -->
                </div>
              </div>
              <div class="col-lg-4">
                <div class="form-group">
                  <label class="form-control-label" for="defaultunit">Default Unit </label>
                  <select name="defaultunit" [(ngModel)]="defaultunit" (change)="createDocName($event)"
                    class="custom-select form-control">
                    <option *ngFor="let item of defaultarray" [selected]="item.Description==defaultunit">
                      {{item.Description}}
                    </option>
                  </select>
                </div>
              </div>
            </div>
            <hr>
            <div class="pull-left mt-1">
              <div class="form-group">
                <button style="background-color: #6EACAF !important; border-color: #6EACAF !important;"
                  class="btn width-200 btn-primary mr-3" (click)="changpass()" type="submit">Change Password
                </button>
              </div>
            </div>
            <div class="pull-right mt-1">
              <div class="form-group">
                <button style="background-color: #6EACAF !important; border-color: #6EACAF !important;"
                  class="btn width-200 btn-primary mr-3"  type="submit" [disabled]="profilengForm.invalid">Update
                  Profile</button>
                <button type="button" class="btn btn-light" routerLink="/client/clientdashboard/clientdashboardview"
                  (click)="gallery()"
                  style="background-color: rgb(201 101 106) !important; border-color: rgb(201 101 106);color:#fff">Cancel</button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </form>
  </div>
  <div class="row mx-auto mt-4 mb-5">
    <div class="col-xl-12">
      <div class="card">
        <div class="card-body">
          <h5 class="text-black mt-4">
            <strong>Security Questions</strong>
          </h5>
          <form class="form-horizontal form-material ng-untouched ng-pristine ng-valid" #securityquestionform="ngForm"
            name="sqForm" (ngSubmit)="updatesecurityquestion(securityquestionform.value)">
            <div class="row mt-3">
              <div class="col-lg-4">
                <div class="form-group">
                  <label class="form-control-label" for="l3">Question 1 <span class="req">*</span></label>
                  <dx-select-box [dataSource]="questionlist" displayExpr="question" valueExpr="id"
                    [value]="loadsecurityquestiondata.question1" [(ngModel)]="loadsecurityquestiondata.question1"
                    required name="question1"></dx-select-box>
                </div>
              </div>
              <div class="col-lg-4">
                <div class="form-group">
                  <label class="form-control-label" for="l3">Question 2 <span class="req">*</span></label>
                  <dx-select-box [dataSource]="questionlist" displayExpr="question" valueExpr="id"
                    [value]="loadsecurityquestiondata.question2" [(ngModel)]="loadsecurityquestiondata.question2"
                    required name="question2"></dx-select-box>
                </div>
              </div>
              <div class="col-lg-4">
                <div class="form-group">
                  <label class="form-control-label" for="l4">Question 3 <span class="req">*</span></label>
                  <dx-select-box [dataSource]="questionlist" displayExpr="question" valueExpr="id"
                    [value]="loadsecurityquestiondata.question3" [(ngModel)]="loadsecurityquestiondata.question3"
                    required name="question3"></dx-select-box>
                </div>
              </div>
            </div>
            <div class="row mt-3">
              <div class="col-lg-4">
                <div class="form-group">
                  <label class="form-control-label" for="l3">Answer 1 <span class="req">*</span></label>
                  <input placeholder="Answer 1" required class="form-control form-control-line" name="answer1"
                    [(ngModel)]="loadsecurityquestiondata.answer1" type="text">
                </div>
              </div>
              <div class="col-lg-4">
                <div class="form-group">
                  <label class="form-control-label" for="l3">Answer 2 <span class="req">*</span></label>
                  <input placeholder="Answer 2" required class="form-control form-control-line" name="answer2"
                    [(ngModel)]="loadsecurityquestiondata.answer2" type="text">
                </div>
              </div>
              <div class="col-lg-4">
                <div class="form-group">
                  <label class="form-control-label" for="l4">Answer 3 <span class="req">*</span></label>
                  <input placeholder="Answer 3" required class="form-control form-control-line" name="answer3"
                    [(ngModel)]="loadsecurityquestiondata.answer3" type="text">
                </div>
              </div>
            </div>
            <div class="row mt-3">
              <div class="col-lg-12">
                <span class="errormsg" style="display: block;margin-bottom: 10px;">{{qaerror}}</span>
              </div>
              <div class="pull-left mt-1">
                <div class="form-group">
                  <button [disabled]="!securityquestionform.valid"
                    style="background-color: #6EACAF !important; border-color: #6EACAF !important;"
                    class="btn width-200 btn-primary mr-3" type="submit">Save
                  </button>
                </div>
              </div>
              <div class="pull-right mt-1">
                <div class="form-group">
                  <button style="background-color: #6EACAF !important; border-color: #6EACAF !important;"
                    class="btn width-200 btn-primary mr-3" type="submit" (click)="gotoreport()">Audit Report
                    </button>
                </div>
              </div>
        
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>
<div style="justify-content: center;display: flex;">
  <div class="alertPopup" *ngIf="alertShown">
    <img class="imageView" src="./assets/logon/alert.png" alt="">
    <div class="fontStyleAlert"> {{alertMessage}}</div>
    <button class="greenbtn  btn-primary" (click)="alertClose()"> OK </button>
  </div>
</div>
<div class="disableScreen" *ngIf=displayShown></div>


profilepage.scss

.errorlab {
    height: 10px;
}

#fileInput{
    display: none;
}
 
.req,.errormsg{color:#c9656a !important;}
  
.form-control{    border: 1px solid #ced4da !important;}
  
.alertPopup {
    position: fixed;
    top: 10%;
    z-index: 1050;
    background: white;
    width:435px;
    box-shadow: 0px 0px 0px #cecece;
    padding: 5px;
    border: none !important;
    border-radius: 20px;
    background-color: white !important;
}
  
.disableScreen {
    position: fixed;
    top: 0;
    left: 0;
    opacity: 0.5;
    background: #000;
    z-index: 1040;
    height: 100%;
    width: 100%;
}
     
.greenbtn{  
      background-color: #6EACAF !important;
      padding: 5px 20px;
      border-color: #6EACAF;
      position: relative;
      left: 340px;bottom: 8px;
}   

.imageView{
      height: 50px;
      top: 19px;
      left: 10px;
      position: relative;
}

.fontStyleAlert{
      font-size: 14px;
      position: relative;
      left: 65px;
      bottom: 20px
}


profilepage.ts

import { Component, OnInit } from '@angular/core';
import { UserService } from '../../../shared/services/user.service';
import { ToastrService } from 'ngx-toastr';
import { environment } from '../../../../environments/environment';
import { Router } from '@angular/router';
@Component({
  selector: 'app-profilepage',
  templateUrl: './profilepage.component.html',
  styleUrls: ['./profilepage.component.scss']
})
export class ProfilepageComponent implements OnInit {
  constructor(private userService: UserService, private router: Router, private toast: ToastrService) { }
  businessUnitdata: any;
  qaerror: string = "";
  loadsecurityquestiondata: any = { "question1": '', "question2": '', "question3": '', "answer1": "", "answer2": "", "answer3": "" };
  ngOnInit() {
    this.getCurrentUser()
    this.getquestionlist()
  };
  ErrorMsg1:boolean=false;
  profileDetails: any = {}
  userDetail: any
  questionlist: any = [];
  getquestionlist() {
    this.userService.getquestionslists().subscribe(
      (data) => {
        this.questionlist = data;
      })
  };

  getCurrentUser() {
    this.userService.currentUser.subscribe(
      (userData) => {
        if (userData)
        console.log("nivjmak",userData)
          this.userDetail = userData;
        this.profileDetails.firstname = this.userDetail.firstname;
        this.profileDetails.lastname = this.userDetail.lastname;
        this.profileDetails.email = this.userDetail.username;
        this.profileDetails.nickname=this.userDetail.nickname;
        this.defaultunitdata()
        if (this.userDetail.userid != undefined) {
          this.geteditprofile()
          this.loadsecurityquestion()
        }
      }
    )
  };

  shownMsg: boolean;
  shwErr:boolean =false;
  onKey(value) {
    if (value.length >= 10 || value.length == 0 ){
      this.shownMsg = false;
      this.shwErr = true;
    } 
    else{
      this.shownMsg = true;
      this.shwErr =false;
    }
  };
  galleryvalue: any = "";
  gallery() {
    this.galleryvalue = "Dashboard"
  };

  defaultarray: any = [];
  defaultunitdata() {
    this.userService.getdefaultunitData().subscribe(data => {
      const map = new Map();
      for (const item of data) {
        if (!map.has(item.description)) {
          map.set(item.description, true);
          this.defaultarray.push({
            Id: item.id,
            Description: item.description,
          });
        }
      }
      this.businessUnitdata = this.defaultarray[0].Id
    })
  };

  api_url: any = environment.swagss;
  url: any;
  selectedfile: File = null;
  onSelectFile(event) {
    var imageFormat = ['image/jpg', 'image/jpeg', 'image/gif', 'image/webp', 'image/tiff', 'image/psd',
      'image/raw', 'image/bmp', 'image/heif', 'image/indd', 'image/svg', 'image/png']
    if (event.target.files && event.target.files[0]) {
      var reader = new FileReader();
      reader.readAsDataURL(event.target.files[0]);
      reader.onload = (events: any) => {
        var filetype = event.target.files[0].type;
        for (var m = 0; m < imageFormat.length; m++) {
          if (filetype === imageFormat[m]) {
            this.profileDetails.Profilepicture = events.currentTarget.result;
            return;
          }
        }
        this.alertClose();
      }
    }
  };

  alertShown: boolean = false;
  displayShown: boolean = false;
  alertMessage = "Please Choose Image Standard Format To Upload"
  alertClose() {
    this.alertShown = !this.alertShown
    this.displayShown = !this.displayShown
  };

  loadsecurityquestion() {
    var userid={
      "userid":this.userDetail.userid
    }
    const Id= this.userService.encrypt(userid)
    if(Id){
    this.userService.loadsecurityquestion(Id).subscribe(
      data => {
        this.loadsecurityquestiondata = data.answer;
      })
    }
  };

  defaultunit: any;
  profile: any;
  updatesecurityquestion(value) {
    var obj: any = value;
    if (obj.question1 == obj.question2 || obj.question1 == obj.question3 || obj.question2 == obj.question1 || obj.question2 == obj.question3 || obj.question3 == obj.question1 || obj.question3 == obj.question2) {
      this.qaerror = "Please select unique questions";
    } else {
      this.qaerror = "";
      var obj1 = {
        "securityquestion": JSON.stringify(value),
        "userid": this.userDetail.userid
      }
      const QuestionJson= this.userService.encrypt(obj1)
      if(QuestionJson){
      this.userService.savesecurityquestion(QuestionJson).subscribe(
        data => {
          this.toast.success('Successfully Updated', '', {});
        })
      }
    }
  };

  updateProfileDetails(value) {
    this.profile =
    {
      "useraccountId": this.userDetail.userid,
      "firstname": this.profileDetails.firstname,
      "lastname": this.profileDetails.lastname,
      "email": this.profileDetails.email,
      "street1": this.profileDetails.street1,
      "street2": this.profileDetails.street2,
      "city": this.profileDetails.city,
      "country": this.profileDetails.country,
      "state": this.profileDetails.state,
      "zipcode": this.profileDetails.zipcode,
      "phone": this.profileDetails.phone,
      "defaultunit": this.defaultvalue,
      "nickname":this.profileDetails.nickname,
      "image": this.profileDetails.Profilepicture
    }
    if (this.profileDetails.email !=this.userDetail.username)
    {
      this.toast.error('Email Mismatch', '', {});
    }
else{
    const profileJson= this.userService.encrypt(this.profile)
    if(profileJson){
    this.userService.profiledata(profileJson).subscribe(
      data => {

        if (data == "success") {
          this.toast.success('Successfully Updated', '', {});
        } else {
          this.toast.error('upload only images', '', {});
        }
      })
    }
  }
  };

  clientList: any;
  geteditprofile() {
    var userid ={
      "useraccountid":this.userDetail.userid
    }
    const userDetail= this.userService.encrypt(userid)
    if(userDetail){
    this.userService.editprofile(userDetail).subscribe(data => {
      this.clientList = data;
      this.profileDetails.phone = this.clientList.phone;
      this.profileDetails.street1 = this.clientList.street1;
      this.profileDetails.nickname=this.clientList.nickname
      this.profileDetails.street2 = this.clientList.street2;
      this.profileDetails.city = this.clientList.city;
      this.profileDetails.state = this.clientList.state;
      this.profileDetails.country = this.clientList.country;
      this.profileDetails.zipcode = this.clientList.zipcode;
      this.defaultunit = this.clientList.defaultunit
      this.profileDetails.Profilepicture = this.clientList.Profilepicture
      this.defaultvalue = this.clientList.defaultunit
    })
   }
  };

  changpass() {
    this.router.navigate([`/changepwd`]);
  };

  defaultvalue: any;
  createDocName(e) {
    this.defaultvalue = e.target.value
  };
  gotoreport(){
    this.router.navigate(['/client/report'])
  }
}



app.html

 <router-outlet>
    <app-spinner></app-spinner>
</router-outlet>
<div bsModal #childModal="bs-modal" class="modal fade idelpopup" tabindex="-1"
     role="dialog" aria-labelledby="dialog-child-name">
  <div class="modal-dialog modal-md">
    <div class="modal-content" *ngIf="this.router.url!='/designbuilder' && this.router.url!='/htmldocbuilder'">
      <div class="modal-header">
        <h4 id="dialog-child-name" class="modal-title pull-left">You Have Been Idle!</h4>
        <button type="button" class="close pull-right" aria-label="Close" (click)="hideChildModal()">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
         {{idleState}}
        <div class="row mrgbtm">
          <div class="col-md-6">
              <button type="button" (click)="logout()" class="btn btn-danger" style="background-color: #c9656a !important; border-color: #c9656a !important;">Logout</button>
          </div>
          <div class="col-md-6">
              <button type="button" (click)="stay()" class="btn btn-success" style="background-color: #6EACAF !important ; border-color: #6EACAF !important">Stay</button>
          </div>
        </div>
      </div>
    </div>
    <div class="modal-content" *ngIf="this.router.url=='/designbuilder'">
      <div class="modal-header" style="color: #000 !important;">Auto save </div>
       <div class="modal-body" style="padding: 20px;">
         <div class="content">
           <div class="form-wrapper">
             <div class="form-group">
               <label class="form-label">Do you want to save the page? </label>
             </div>
             <div class="form-group" class="mt-20">
               <button type="button" class="btn save_btn" (click)="yes();" style="margin-right: 10px;background-color: #6EACAF !important;
               border-color: #6EACAF !important;color: white !important;">Yes</button>
               <button type="button" class="btn cancel_btn" style="background-color: #c9656a !important;
               border-color: #c9656a !important;color: white !important;" (click)="logout()">No</button>
             </div>
           </div>
         </div>
       </div>
   
     </div>
     <div class="modal-content" *ngIf="this.router.url=='/htmldocbuilder'">
      <div class="modal-header" style="color: #000 !important;">Auto save </div>
      <div class="modal-body" style="padding: 20px;">
        <div class="content">
         <div class="form-wrapper">
            <div class="form-group">
              <label class="form-label">Do you want to save the page? </label>
            </div>
            <div class="form-group" class="mt-20">
              <button type="button" class="btn save_btn btn-rounded" style="color:white !important;background-color: #6EACAF !important;margin-right: 10px;" (click)="yes1()">Yes</button>
              <button type="button" class="btn cancel_btn btn-rounded" style="color:white !important;background-color: #c9656a !important;" (click)="logout()">No</button>
           </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>


app.ts

import { Component, OnInit } from '@angular/core';
import { Router, NavigationEnd } from '@angular/router';
import { UserService } from './shared/services/user.service';
import {  ViewChild, TemplateRef, ElementRef, AfterViewInit } from '@angular/core';
import { BsModalService } from 'ngx-bootstrap/modal';
import { BsModalRef } from 'ngx-bootstrap/modal';
import { ModalDirective } from 'ngx-bootstrap/modal';
import { Idle, DEFAULT_INTERRUPTSOURCES } from '@ng-idle/core';
import { Keepalive } from '@ng-idle/keepalive';
import { ModalModule } from 'ngx-bootstrap/modal';
// import { AppService } from '../_services/app.service';
// import {Keepalive} from '@ng-idle/keepalive';
import {MatDialog, MatDialogRef, MAT_DIALOG_DATA} from '@angular/material';
import { SessiontempComponent } from '../app/shared/sessiontemp/sessiontemp.component';
import { DesignbuilderComponent } from './view/builder/designbuilder/designbuilder.component';
import { Htmldocbuilder1Component } from './builder/htmldocbuilder1/htmldocbuilder1.component';
import { CallserviceService } from './shared/callservice.service';
// progressBarPopup: MatDialogRef<SessiontempComponent>;
//  private idle: Idle
//     private keepalive: Keepalive

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent implements OnInit {
  currentPath: string;
//  @ViewChild(DesignbuilderComponent) designbulder: DesignbuilderComponent;
  //@ViewChild(Htmldocbuilder1Component) htmlbulder: Htmldocbuilder1Component;
  idleState = 'Not started.';
  timedOut = false;
  lastPing?: Date = null;
  title = 'angular-idle-timeout';
  isRun = false;  
  public modalRef: BsModalRef;

  @ViewChild('childModal', {}) childModal: ModalDirective;
  constructor(private callservice: CallserviceService, private idle: Idle, private keepalive: Keepalive, 
    public router: Router, private modalService: BsModalService, private userService: UserService) {
    // sets an idle timeout of 5 seconds, for testing purposes.
    idle.setIdle(1400);
      // sets a timeout period of 5 seconds. after 10 seconds of inactivity, the user will be considered timed out.
    idle.setTimeout(5);
    // sets the default interrupts, in this case, things like clicks, scrolls, touches to the document
    idle.setInterrupts(DEFAULT_INTERRUPTSOURCES);
    idle.onIdleEnd.subscribe(() => { 
      this.idleState = "Your'e session Timed out"
//      console.log(this.idleState);
      this.reset();
    });    
    idle.onTimeout.subscribe(() => {
      this.childModal.hide();
      this.idleState = 'Timed out!';
      this.timedOut = true;
      console.log(this.idleState);
      this.logout();
    });
    
    idle.onIdleStart.subscribe(() => {
      if(this.isRun){
        this.idleState = 'You\'ve gone idle!'
        console.log(this.idleState);
        this.childModal.show();
      }else{
        console.log("idlSTelse");
        this.idle.stop();
      }        
    });
    
    idle.onTimeoutWarning.subscribe((countdown) => {
      this.idleState = 'You will time out in ' + countdown + ' seconds!'
      console.log(this.idleState);
    });

    // sets the ping interval to 15 seconds
    keepalive.interval(15);

    keepalive.onPing.subscribe(() => this.lastPing = new Date());

    this.userService.getUsrLogin().subscribe(userLoggedIn => {
      if (userLoggedIn) {        
        idle.watch();    
        this.isRun = true;
      } else {
        idle.stop();      
        this.isRun = false;                  
      }
    })

    // this.reset();
    
  }

  ngOnInit() {
    this.router.events.subscribe((evt) => {
      if (!(evt instanceof NavigationEnd)) {
        return;
      }
      window.scrollTo(0, 0);
    });
    

    this.userService.populate();
  }
 
   reset() {
    this.idle.watch();
    //xthis.idleState = 'Started.';
    this.timedOut = false;
  }

  hideChildModal(): void {
    this.childModal.hide();
  }

  stay() {
    this.childModal.hide();
    this.reset();
  }
  yes(){
    this.childModal.hide();
    this.callservice.callComponentMethod1();
  }
  yes1(){
    this.childModal.hide();
    this.callservice.callComponentMethod();
  }
  btnSaveJsonClick(){}
  closeAllModals() {
    for (let i = 1; i <= this.modalService.getModalsCount(); i++) {
     this.modalService.hide(i);
    }
  }
  logout() {
    console.log("logout called");
    this.closeAllModals();
    this.childModal.hide();
    this.userService.setUsrLogin(false);
    this.userService.clientMasterId = 0;
    this.userService.clearSession();
    window.localStorage.clear();
    console.log("idRun",this.idle.isRunning());
    this.router.navigate(['/login']); 
    console.log("idNRun",this.idle.isRunning());   
  }
}



manageuser.html

<div class="air__layout">
  <div class="air__layout__header" style="background: transparent !important;">
    <div class="air__utils__header">
      <div class="air__layout__content bg-light">
        <div class="air__utils__content manageusersec" style="padding: 0.5rem 2rem 2rem 2rem;">

          <div class="col-lg-12">
            <div class="card flex-fill">
              <div class="card-header card-header-flex flex-wrap">
                <div class="d-flex align-items-stretch mr-auto">
                  <ul class="nav nav-tabs nav-tabs-line nav-tabs-line-bold nav-tabs-noborder nav-tabs-stretched">
                    <li class="nav-item">
                      <a class="nav-link active" href="javascript: void(0);" (click)="manageType = 'user'"
                        data-toggle="tab">Manage User</a>
                    </li>
                    <li class="nav-item">
                      <a class="nav-link" href="javascript: void(0);" (click)="manageType = 'bu'"
                        data-toggle="tab">Manage Business unit </a>
                    </li>
                    <li class="nav-item">
                      <a class="nav-link" href="javascript: void(0);" data-toggle="tab"
                        (click)="manageType = 'dc'">Manage Document Code</a>
                    </li>
                    <li class="nav-item">
                      <a class="nav-link" href="javascript: void(0);" data-toggle="tab"
                        (click)="manageType = 'combu'">Common Doc To Bu</a>
                    </li>
                    <li class="nav-item">
                      <a class="nav-link" href="javascript: void(0);" data-toggle="tab"
                        (click)="manageType = 'bulk'">Bulk Doc Assign</a>
                    </li>
                    <li class="nav-item">
                      <a class="nav-link" href="javascript: void(0);" data-toggle="tab"
                        (click)="manageType = 'Bdoc'">Bulk Doc DeAssign</a>
                    </li>
                    <li class="nav-item">
                      <a class="nav-link" href="javascript: void(0);" data-toggle="tab"
                        (click)="manageType = 'vgs'">Virtual Groupdoc Setup</a>
                    </li>
                    <li class="nav-item">
                      <a class="nav-link" href="javascript: void(0);" data-toggle="tab"
                        (click)="manageType = 'stp'">Staging to Production</a>
                    </li>
                    
                  </ul>
                </div>
              </div>
              <div class="card-body">
                <ng-container *ngIf="manageType == 'stp'">
                  <dx-data-grid id="gridContainer" [columnAutoWidth]="true" [allowColumnResizing]="true"
                    [allowColumnReordering]="true" [dataSource]="stagingproductlist" [showBorders]="false">
                    <dxo-header-filter [visible]="false"></dxo-header-filter>
                    <dxo-search-panel [visible]="true" width="150"></dxo-search-panel>
                    <dxo-paging [pageSize]="12"></dxo-paging>
                    <dxo-pager [showPageSizeSelector]="true" [allowedPageSizes]="[5, 10, 20]" [showInfo]="true">
                    </dxo-pager>
                    <dxi-column dataField="DocumentType" [allowSearch]="false" caption="#" 
                      cellTemplate="cellTemplatetypeid" dataType="string">
                    </dxi-column>
                    <dxi-column dataField="BusinessUnitCode"  caption="Business Unit Code" dataType="string">
                    </dxi-column>
                    <dxi-column dataField="DocCode"  [allowSearch]="false" caption="Doc Code"
                      dataType="string">
                    </dxi-column>
                    <dxi-column dataField="SystemName"  [allowSearch]="false" caption="System Name"
                      dataType="string">
                    </dxi-column>
                    <dxi-column dataField="ApprovedDate"  [allowSearch]="false" caption="Approved Date"
                      dataType="date" format="MM-dd-yyyy HH:MM">
                    </dxi-column>
                    <dxi-column dataField="CreateDate"  [allowSearch]="false" caption="Create Date"
                      dataType="date" format="MM-dd-yyyy HH:MM">
                    </dxi-column>
                    <dxi-column type="buttons" headerCellTemplate="">
                      <dxi-button template="submit4approval">
                        <div class="selecteddivs">
                          <div style="padding-top: 7px;position: relative;"
                            *dxTemplate="let frmid of 'submit4approval'">
                            <a (click)="btnsubmitClick(frmid)" class="editbtn"
                              style="padding-right: 5px;word-break: keep-all;" tooltip="Submit" placement="top"
                              container="body"> Submit
                            </a>
                            <span style="position: relative;cursor:pointer" (click)="showmorediv(frmid)"> <img src="./assets/svg/moreicon.svg"
                              alt="" style=" width:25px; height:20px;margin: 0px 0px 0px 10px;" /></span> 
                          
                         <div class="selecteddivs" *ngIf="frmid.data.formassignedId==selectedid && moredivshow">
                           
                            <a (click)="btnEditClick(frmid)" style="padding-right: 5px;">
                              <span class="mdi mdi-file-lock"
                              style="font-size: 29px;color: #6EACAF; cursor:pointer;" tooltip="Editor"
                                placement="top" container="body"></span>
                            </a>
                            <a (click)="btnPDFClick(frmid)" style="padding-right: 5px;">
                              <span class="mdi mdi-file-pdf"
                              [ngStyle]="frmid.data.DocumentType===1 ||frmid.data.DocumentType===2  ?{'color': '#6EACAF', 'cursor':'pointer'} : {'color': '#87cefa8c', 'cursor':'default'}"
                              style="font-size: 29px; cursor:pointer;" tooltip="PDF"
                                placement="top" container="body"></span>
                            </a>
                            <a (click)="btnHTMLClick(frmid)" style="padding-right: 5px;">
                              <span class="mdi mdi-file-check"
                              [ngStyle]="frmid.data.DocumentType===2 ? {'color': '#6EACAF', 'cursor':'pointer'} : {'color': '#87cefa8c', 'cursor':'default'}"
                                style="font-size: 29px;" tooltip="HTML" placement="top" container="body"></span>
                            </a>
                            <a (click)="btnJSONClick(frmid)" style="padding-right: 5px;">
                              <span class="mdi mdi-clipboard-text"
                              [ngStyle]="frmid.data.DocumentType===1 ||frmid.data.formtypeid===3  ? {'color': '#6EACAF', 'cursor':'pointer'} : {'color': '#87cefa8c', 'cursor':'default'}"
                                style="font-size: 29px;" tooltip="JSON" placement="top" container="body"></span>
                            </a>
                          </div>
                        </div>
                      </div>
                      </dxi-button>
                    </dxi-column>
                    <div *dxTemplate="let data of 'cellTemplatetypeid'">
                      <img *ngIf="data.data.DocumentType === 1" class='logo' src='./assets/svg/structured-doc-icon.svg'
                        alt="" tooltip="Structured Document" placement="top" container="body">
                      <img *ngIf="data.data.DocumentType === 3" class='logo'
                        src='./assets/svg/assessment_survey-icon.svg' alt="" tooltip="Survey Document" placement="top"
                        container="body">
                      <img *ngIf="data.data.DocumentType === 2" class='logo'
                        src='./assets/svg/unstructured-doc-cion.svg' alt="" tooltip="Unstructured Document"
                        placement="top" container="body">
                    </div>
                  </dx-data-grid>
                </ng-container>
                <ng-container *ngIf="manageType == 'user'">
                    <div class="d-md-flex align-items-center">
                    <div class="col-lg-12 text-right">
                    <button class="btn btn-info waves-effect waves-light"  style=" background-color: #6EACAF !important; border-color:#6EACAF !important; font-size:13px; margin-bottom: 8px;
            border: #6eacaf;
            position: absolute;
            right: 160px;cursor:pointer;   
            padding: 8px 20px;" 
                (click)="BtnMerge()">Create New User</button>
                </div>
                  </div>
                    <dx-data-grid id="gridContainer" [columnAutoWidth]="true" [dataSource]="clientList"
                      [showBorders]="false">
                      <dxo-filter-row [visible]="false"></dxo-filter-row>
                      <dxo-header-filter [visible]="false"></dxo-header-filter>
                      <dxo-search-panel [visible]="true" width="150"></dxo-search-panel>
                      <dxo-paging [pageSize]="10"></dxo-paging>
                      <dxo-pager [showPageSizeSelector]="true" [allowedPageSizes]="[5, 10, 20]" [showInfo]="true">
                      </dxo-pager>
                      <rowTemplate="rowTemplateName">
                        <dxi-column dataField="Profilepicture" caption="#" cellTemplate="cellTemplateprofile"
                          dataType="string">
                        </dxi-column>
                        <dxi-column dataField="Name" caption="Name" cellTemplate="cellTemplateImage" dataType="string">
                        </dxi-column>
                        <dxi-column dataField="UserName" dataType="string">
                        </dxi-column>
                        <dxi-column dataField="City" caption="Location" dataType="string">
                        </dxi-column>
                        <dxi-column dataField="Status" dataType="string" cellTemplate="cellTemplatetypeid">
                        </dxi-column>
                        <dxi-column type="buttons" headerCellTemplate="Actions">
                          <dxi-button template="UserName">
                            <div *dxTemplate="let frmid of 'UserName'">
                              <a (click)="openModal(templateEdit,frmid)" class="editbtn"
                                style="padding-right: 5px;word-break: keep-all;cursor:pointer;" 
                                container="body"> Edit
                              </a>
                            </div>
                          </dxi-button>
                        </dxi-column>
                        <dxo-pager [showPageSizeSelector]="false" [allowedPageSizes]="[8, 12, 20]"></dxo-pager>
                        <div *dxTemplate="let data of 'cellTemplateImage'">

                          <div class="d-flex no-block align-items-center">

                            <div class="">
                              <h5 class="m-b-0 font-16 font-medium">{{data.data.Name}}</h5><span>
                                {{data.data.Role}}</span>
                            </div>
                          </div>
                        </div>
                        <div *dxTemplate="let data of 'cellTemplatetypeid'">
                          <label class="switch" *ngIf="togglevalue(data.value)">
                            <input type="checkbox" id="togBtn" (click)="statustoggle(data.data.useraccountid)"
                              [(ngModel)]="togglestatus">
                            <div class="slider round">
                              <!--ADDED HTML -->
                              <span class="off">DeActive</span>
                              <span class="on">Active</span>
                              <!--END-->
                            </div>
                          </label>



                        </div>
                        <div *dxTemplate="let data of 'cellTemplateprofile'">
                          <div class="d-flex no-block align-items-center">
                            <div class="kit__utils__avatar">
                              <img [src]="data.data.Profilepicture" style="width: 41px;" alt="">

                            </div>
                          </div>
                        </div>


                    </dx-data-grid>
                    <ng-template #templateEdit>
                      <div class="modal-header">
                        <h4 class="modal-title pull-left">User Information</h4>
                        <button type="button" class="close pull-right" aria-label="Close" (click)="modalRef.hide()">
                          <span aria-hidden="true">&times;</span>
                        </button>

                      </div>
                      <div class="modal-body">
                        <div class="form-group row p-b-15">
                          <label class="col-sm-2 text-left control-label col-form-label">First Name
                            <span style="color: red;">*</span></label>
                          <div class="col-sm-4">
                            <input class="form-control" required id="inputl3" type="text" name="firstname"
                              [(ngModel)]="fstname" #firstnames="ngModel">

                            <div class="errorlab" *ngIf="firstnames.touched">
                              <div class="form-text" [hidden]="!firstnames.hasError ('required')"> Please enter the
                                firstname</div>
                            </div>
                          </div>
                          <label class="col-sm-2 text-left control-label col-form-label">Last Name
                            <span style="color: red;">*</span></label>
                          <div class="col-sm-4">
                            <input class="form-control" required id="inputl3" type="text" name="lastname"
                              [(ngModel)]="lastname" #lastnames="ngModel">

                            <div class="errorlab" *ngIf="lastnames.touched">
                              <div class="form-text" [hidden]="!lastnames.hasError ('required')"> Please enter the
                                lastname</div>
                            </div>

                          </div>


                        </div>
                        <div class="form-group row p-b-15">
                          <label class="col-sm-2 text-left control-label col-form-label">Nick Name
                            <span style="color: red;">*</span></label>
                          <div class="col-sm-4">
                            <input class="form-control" required id="inputl3" type="text" name="nickname"
                            [(ngModel)]="nickname" #nicknames="ngModel">

                          <div class="errorlab" *ngIf="nicknames.touched">
                            <div class="form-text" [hidden]="!nicknames.hasError ('required')"> Please enter the
                              nickname</div>
                          </div>
                        </div>

                          <label class="col-sm-2 text-left control-label col-form-label">Phone</label>
                          <div class="col-sm-4">
                            <input class="form-control" required id="inputl3" type="text" name="Phone"
                            OnlyNumber="true" minlength="10" maxlength="15" [(ngModel)]="phone">
                            <span *ngIf="onKey(phone)" class="form-text text-danger">Phone No must be 10 numbers</span>
                          </div>
                        </div>
                        <div class="form-group row p-b-15">
                          <label class="col-sm-2 text-left control-label col-form-label">Street1</label>
                          <div class="col-sm-4">
                            <input class="form-control" required id="inputl3" type="text" name="Street1"
                              [(ngModel)]="street1">

                          </div>
                          <label class="col-sm-2 text-left control-label col-form-label">Street2</label>
                          <div class="col-sm-4">
                            <input class="form-control" required id="inputl3" type="text" name="Street2"
                              [(ngModel)]="street2">

                          </div>
                        </div>
                        <div class="form-group row p-b-15"> 
                          <label class="col-sm-2 text-left control-label col-form-label">City</label>
                          <div class="col-sm-4">
                            <input class="form-control" required id="inputl3" type="text" name="City" Onlycharacters="true"
                            onkeypress="return /[a-z]/i.test(event.key)"    [(ngModel)]="city">

                          </div>
                          <label class="col-sm-2 text-left control-label col-form-label">Country</label>
                          <div class="col-sm-4">
                            <input class="form-control" required id="inputl3" type="text" name="Country"
                            onkeypress="return /[a-z]/i.test(event.key)" Onlycharacters="true"   [(ngModel)]="country">

                          </div>

                        </div>
                        <div class="form-group row p-b-15">
                          <label class="col-sm-2 text-left control-label col-form-label">State</label>
                          <div class="col-sm-4">
                            <input class="form-control" required id="inputl3" type="text" name="State"
                            onkeypress="return /[a-z]/i.test(event.key)" Onlycharacters="true"  [(ngModel)]="state">

                          </div>
                          <label class="col-sm-2 text-left control-label col-form-label">Zipcode</label>
                          <div class="col-sm-4">
                            <input class="form-control" required id="inputl3" type="text" OnlyNumber="true"
                              name="zipcode" [(ngModel)]="zipcode">

                          </div>

                        </div>
                       
                        <h4 class="card-title">User Account Information</h4>
                        <div class="form-group row p-b-15">
                          <label class="col-sm-2 text-left control-label col-form-label" for="inputEmail3">User
                            Name</label>
                          <label class="text-left control-label col-form-label">{{username}}</label>
                        </div>

                        <div class="form-group row p-b-15">
                          <label class="col-sm-2 text-left control-label col-form-label" for="defaultunit"> Default
                            Unit</label>


                          <div class="col-lg-6 col-xs-3">
                            <select required name="Businessunit" [(ngModel)]="defaultunit"
                              (change)="createDocName($event)" class="custom-select form-control">

                              <option *ngFor="let item of defaultarray" [selected]="item.Description== defaultunit">
                                {{item.Description}}
                              </option>
                            </select>
                          </div>
                        </div>
                        <div class="form-group row p-b-15">
                          <label class="col-sm-2 text-left control-label col-form-label" for="userrcategory">User
                            Category</label>
                          <div class="col-lg-6 col-xs-3">
                            <select required name="usercategory" [(ngModel)]="categoryvalue"
                              (change)="usercategorychanges($event)" class="custom-select form-control">
                              <option *ngFor="let item of userarray" [selected]="item.name== userrcategory">
                                {{item.name}}
                              </option>
                            </select>
                          </div>
                        </div>
                        <div class="card-body" style="padding: 0.25rem !important;">
                          <h4 class="card-title">User Account Access</h4>
                          <div>
                          </div>
                          <div class="form-group row p-b-15" style="padding-bottom: 2px;" >
                            <label class="col-sm-4 text-left control-label col-form-label">Dashboard
                             
                            </label>
                            
                            <div class="col-sm-2" >
                              <label class="switchs" style="cursor: not-allowed;"  >
                              <input type="checkbox"  (click)="errpop('dashboard')"  [(ngModel)]="dashboardstatus" >
                              <div class="sliders rounds" style="cursor: not-allowed;" >
                                <span class="offs"></span>
                                <span class="ons"></span>
                              </div>                            
                            </label>
                            </div>
                            
<label class="col-sm-4 text-left control-label col-form-label">Image Gallery  
  
</label>
 
<div class="col-sm-2" >
  <label class="switchs" style="cursor: not-allowed;" >
  <input type="checkbox"  (click)="errpop('imagegallery')"  [(ngModel)]="imagegalerystatuss" >
  <div class="sliders rounds" style="cursor: not-allowed;" >
    <span class="offs"></span>
    <span class="ons"></span>
  </div>
 
</label>
                            </div>
                          </div>
                          <div class="form-group row p-b-15" style="padding-bottom: 2px;">

                            <label class="col-sm-4 text-left control-label col-form-label">Library Document</label>
                            <div class="col-sm-2">
                              <label class="switchs">
                                <input type="checkbox" id="togBtn" (click)="toggle('library')"
                                  [(ngModel)]="librarystatus">
                                <div class="sliders rounds">
                                  <span class="offs"></span>
                                  <span class="ons"></span>
                                </div>
                              </label>
                            </div>

                            <label class="col-sm-4 text-left control-label col-form-label">Admin</label>
                            <div class="col-sm-2">
                              <label class="switchs">
                                <input type="checkbox" id="togBtn" (click)="toggle('admin')" [(ngModel)]="adminstatus">
                                <div class="sliders rounds">
                                  <span class="offs"></span>
                                  <span class="ons"></span>
                                </div>
                              </label>

                            </div>
                          </div>
                          <div class="form-group row p-b-15">
                            <label class="col-sm-4 text-left control-label col-form-label">My Document</label>
                            <div class="col-sm-2">
                              <label class="switchs">
                                <input type="checkbox" id="togBtn" (click)="toggle('mydoc')" [(ngModel)]="mydocstatus">
                                <div class="sliders rounds">
                                  <span class="offs"></span>
                                  <span class="ons"></span>
                                </div>
                              </label>
                            </div>
                            <label class="col-sm-4 text-left control-label col-form-label">Reports</label>
                            <div class="col-sm-2">
                              <label class="switchs">
                                <input type="checkbox" id="togBtn" [(ngModel)]="reportstatus">
                                <div class="sliders rounds">
                                  <span class="offs"></span>
                                  <span class="ons"></span>
                                </div>
                              </label>
                            </div>
                          </div>
                          <div class="form-group row p-b-15">

                            <label class="col-sm-4 text-left control-label col-form-label">Data Dictionary</label>
                            <div class="col-sm-2">
                              <label class="switchs">
                                <input type="checkbox" id="togBtn" (click)="toggle('datadict')"
                                  [(ngModel)]="datadictstatus">
                                <div class="sliders rounds">
                                  <span class="offs"></span>
                                  <span class="ons"></span>
                                </div>
                              </label>
                            </div>
                          </div>
                        </div>
                        <div style="text-align: center;">
                          <button [disabled]="fstname == '' || lastname == '' || nickname == '' || onKey(phone)"
                            class="save_btn btn btn-rounded btn-primary mr-2" (click)="saveopenModal(template)"
                            style="background-color: #6EACAF !important; border-color: #6EACAF;"
                            type="Save">Save</button>&nbsp;&nbsp;
                          <button type="button" class="cancel_btn btn btn-rounded btn-primary mr-2"
                            style="background-color: #c9656a !important ;border-color: #c9656a;"
                            (click)="modalRef.hide()" type="Close">Close</button>
                        </div>
                      </div>
                    </ng-template>
                    <ng-template #template>
                      <div class="modal-header">
                        <h4 class="modal-title pull-left">Are you sure you want to save the changes?</h4>
                        <button type="button" class="close pull-right" aria-label="Close" (click)="modalRef.hide()">
                          <span aria-hidden="true">&times;</span>
                        </button>
                      </div>

                      <div class="modal-body">

                        <div style="text-align: center;">

                          <button class="save_btn btn btn-rounded btn-primary mr-2"
                            style="background-color: #6EACAF !important; border-color: #6EACAF;"
                            (click)="submitbutton()" type="button">OK</button>&nbsp;&nbsp;
                          <button type="button" class="cancel_btn btn btn-rounded btn-primary mr-2"
                            style="background-color: #c9656a !important ;border-color: #c9656a;"
                            (click)="decline()">Cancel</button>
                        </div>
                      </div>

                    </ng-template>
                </ng-container>
                <ng-container *ngIf="manageType == 'bu'">
                  <app-business-unit></app-business-unit>
                </ng-container>
                <ng-container *ngIf="manageType == 'dc'">
                  <app-document-code></app-document-code>
                </ng-container>
                <ng-container *ngIf="manageType == 'combu'">
                  <app-commondoc-bu></app-commondoc-bu>
                </ng-container>
                <ng-container *ngIf="manageType == 'bulk'">
                  <app-bulkdocassigntobu></app-bulkdocassigntobu>
                </ng-container>
                <ng-container *ngIf="manageType =='Bdoc'">
                  <app-bulkdeassign></app-bulkdeassign>
                </ng-container>
                <ng-container *ngIf="manageType == 'vgs'">
                  <app-virtualgroupdoc-setup></app-virtualgroupdoc-setup>
                </ng-container>
               
              </div>
            </div>

          </div>

        </div>
      </div>
    </div>
  </div>
</div>


manageuser.ts

import { Component, OnInit,TemplateRef } from '@angular/core';
import { BsModalService, BsModalRef } from 'ngx-bootstrap/modal';
import { ToastrService } from 'ngx-toastr';

import { UserService } from '../../../../shared/services/user.service';
import {ParamMap, Router,ActivatedRoute,Params} from '@angular/router';
import { environment } from '../../../../../environments/environment';
@Component({
selector: 'app-manageuser',
templateUrl: './manageuser.component.html',
styleUrls: ['./manageuser.component.scss']
})
export class ManageuserComponent implements OnInit {
stagingproductlist: any;
selectedid: any;
moredivshow: boolean=false;
constructor(private userService: UserService, private toast: ToastrService,private route: ActivatedRoute,private router: Router,private modalService: BsModalService) { }
passwordDetails: any = {}
profileDetails: any = {}
manageType:any = 'user'
togglestatuss:boolean=true;
dashboardstatus:boolean=true;
imagegalerystatuss:boolean=true;
librarystatus:boolean=true;
adminstatus:boolean=true;
mydocstatus:boolean=true;
reportstatus:boolean=true;
datadictstatus:boolean=true;
param1:any;

onKey(value){
if(value.length >= 10 || value.length==0)
  return false;
else
  return true;
}

ngOnInit() {
this.getManageUserData();
  this.passwordDetails = {
    oldpasswordmod: "",
    newpasswordmod: "",
    confirmPasswordmod: ""
  }
  this.userService.getStagingtoProductionData().subscribe(data => {
    this.stagingproductlist = data;
  })
}
showmorediv(frmid){
    this.selectedid=frmid.data.formassignedId;
    this.moredivshow=!this.moredivshow;
  }
  propertydata: any;
  btnEditClick(event) {
    var obje = {
      "routerpage":"staging_pro",
      "tablename":"library",
      "content":"notEditable",
      "designid": event.data.formproductId,
      "mode": "edit",
      "formtypeid": event.data.DocumentType
    }
    this.userService.changeNav(obje)
    if (event.data.DocumentType === 1) this.router.navigate([`/designbuilder`]);

    else if (event.data.DocumentType === 2) this.router.navigate([`/htmldocbuilder`]);

    else if (event.data.DocumentType === 3) this.router.navigate([`/surveybuilder`]);
  }
  pdfid: any
  name: any
  tablename="library"
  btnPDFClick(e3) {
 if (e3.data.DocumentType === 1) {
 this.userService.downloadPDFstructdoc(e3.data.formproductId,this.tablename).subscribe( response => {
 let blob: any = new Blob([response], { type: "application/pdf;" });
const url = window.URL.createObjectURL(blob);
   window.open(url);
  },
error =>{
   alert("PDF file not found for the selected document. Please try again later.")
 })
 }
 if (e3.data.DocumentType === 2 || e3.data.DocumentType === 3){
 this.userService.DownloadPDFFile(e3.data.formproductId,this.tablename).subscribe( responsef => {
 let blob00: any = new Blob([responsef], { type: 'application/PDF;' });
 const url00 = window.URL.createObjectURL(blob00);
  window.open(url00);
 },
 error =>{
alert("PDF file not found for the selected document. Please try again later.")
 })
 }
 }
  
toggle(event){
                        
  if(event=="dashboard"){
    this.dashboardstatus=!this.dashboardstatus;
  }
  else if(event=="imagegallery"){
    this.imagegalerystatuss=!this.imagegalerystatuss
    
  }
  else if(event=="library"){
    this.librarystatus=!this.librarystatus
    
  }
  else if(event=="admin"){
    this.adminstatus=!this.adminstatus
    
  }
  else if(event=="mydoc"){
    this.mydocstatus=!this.mydocstatus
    
  }
  else if(event=="report"){
    console.log("event1",this.reportstatus)
    this.reportstatus=!this.reportstatus
    console.log("event2",this.reportstatus)
    // this.reporttab=!this.reporttab
    // this.reporttab=true
    
  }
  else if(event=="datadict"){
    this.datadictstatus=!this.datadictstatus
    
  }
  else{
    // this.dashboardstatus=this.dashboardstatus;
    
  }
}
  btnHTMLClick(event) {


  
  if (event.data.DocumentType === 2) {
    
    var pdfid = event.data.formproductId
    // console.log("in button click",pdfid)
    this.downloadlink(pdfid)
    this.name = "html"
  }
  


}

togglestatusss:boolean=false;
dashboard(){
  this.togglestatusss=true;
  return true
}
imagegallerys(){
  this.togglestatusss=true;
  return true
}

dashpopvalue:any;
imagegalleryy:any;
errpop(event){
  if(event=="dashboard"){

    console.log("dashboard status", event)
    this.dashpopvalue="Selected one was fixed"
    return false
  }
  else if(event=="imagegallery"){

    console.log("dashboard status", event)
    this.imagegalleryy="Selected one was fixed"
    return false
  }
  

}
typeid: any;
btnJSONClick(event) {

  this.typeid = event.data.DocumentType

  if (event.data.DocumentType === 1 || event.data.DocumentType === 3) {
    var pdfid = event.data.formproductId
    this.downloadlink(pdfid)
    this.name = "json"

  }
}
api_url: any = environment.swagss;
downloadlink(pdfid) {
  var xzz: any;
  var tablename="formproduct"
  this.userService.downloadPDF(pdfid,tablename).subscribe(
    (res) => {
  
      // console.log("in responseeee",res)
        if (this.name === "html") {
        if (res.html === "Not Found") {
          alert("HTML file not found for the selected document. Please try again later.");

        }
        // else {
        //   // var fileURL = URL.createObjectURL(res.pdf);

        //   let blob: any = new Blob([res.blob()], { type: "application/pdf;" });
        //   const url = window.URL.createObjectURL(blob);
        //   window.open(url);          }
        else {  
          var myjson = res.html;
          xzz = window.open();
          xzz.document.open();
          xzz.document.write(myjson);
          xzz.document.close();
        }
        
      }
      else if (this.name === "json") {
        if (res.Actjson === "Not Found") {
          alert("JSON not found for the selected document. Please try again later.");

        }
        else {
          // var myjson = JSON.stringify(res.Actjson, null, 2);
          var myjson1 = JSON.stringify(res.Actjson, null, 2);
          var xdd = window.open();
          xdd.document.open();
          xdd.document.write('<html><body><pre>' + myjson1 + '</pre></body></html>');
          xdd.document.close();
          //  window.open(JSON.stringify(res.Actjson));
        }
        // // var fileURL = URL.createObjectURL(res.pdf);
        //  window.open(this.api_url+res.Actjson);
      }
    }
  );
}
BtnMerge(){
  this.router.navigate([`/client/adminct/createnewuser`]);
}
dclientList:any;
clientList: any;

modalRef: BsModalRef;
getManageUserData() {
this.userService.getManageUserData().subscribe(data => {
  this.clientList = data;
  // console.log("manage user",this.clientList)
  

})
}
onKey2(event: any) {
  var lowerCaseLetters = /[a-z]/g;
  var upperCaseLetters = /[A-Z]/g;
  var numbers = /[0-9]/g;
  var special = /[#$^+=!*()@%&]/g;
  if (event.target.value.match(lowerCaseLetters)) {
    this.passlast = true
  }
  else {
    this.passlast = false
  }
  if (event.target.value.match(upperCaseLetters)) {
    this.passlast1 = true
  }
  else {
    this.passlast1 = false
  }
  if (event.target.value.match(numbers)) {
    this.passlast2 = true
  }
  else {
    this.passlast2 = false
  }
  if (event.target.value.length >= 8) {
    this.passlast3 = true
  }
  else {
    this.passlast3 = false
  }
  if (event.target.value.match(special)) {
    this.passlast4 = true
  }
  else {
    this.passlast4 = false
  }
}
fstname:any;
lastname:any;
street1:any;
street2:any;
userrcategory:any;
zipcode:any;
username:any;
state:any;
country:any;
city:any;
phone:any;
defaultunit:any;
useracc:any;
nickname:any;

getManageUserEditData(){
  var test={
    "useraccountid":this.id
  }
this.userService.getManageUserEditData(test).subscribe(data => {
  this.dclientList = data;
  this.phone=data.phone
  this.city=data.city
  this.country=data.country
  this.state=data.state
  this.username=data.username
  this.fstname=data.firstname
  this.lastname=data.lastname
  this.nickname=data.nickname
  this.street1=data.street1
  this.street2=data.street2
  this.userrcategory=data.usercategory
  this.zipcode=data.zipcode
  this.defaultunit=data.defaultunit
  this.useracc=JSON.parse(data.useraccess)
  this.dashboardstatus=this.useracc.Dashboard
  this.librarystatus=this.useracc.Library
  this.mydocstatus=this.useracc.Mydocument
  this.imagegalerystatuss=this.useracc.Imagegallery
  this.adminstatus=this.useracc.Admin
  this.datadictstatus=this.useracc.Datadictionary
  this.defaultvalue=data.defaultunit
  this.categoryvalue=data.usercategory
  this.reportstatus=this.useracc.Report
})
// console.log("usercategory details",this.usercategory)
}
togglestatus:any;
togglevalue(value){
if(value=="Active"){
  this.togglestatus=true
}
else{
  this.togglestatus=false
}
return true
}

passval: boolean = true;
passval1: boolean = true;
passval2: boolean = true;
passval3: boolean = true;
passval4: boolean = true;
passkey: boolean = true;
passkey1: boolean = true;
passkey2: boolean = true;
passkey3: boolean = true;
passkey4: boolean = true;
passlast: boolean = true;
passlast1: boolean = true;
passlast2: boolean = true;
passlast3: boolean = true;
passlast4: boolean = true;
onKey1(event: any) {
  var lowerCaseLetters = /[a-z]/g;
  var upperCaseLetters = /[A-Z]/g;
  var numbers = /[0-9]/g;
  var special = /[#$^+=!*()@%&]/g;
  if (event.target.value.match(lowerCaseLetters)) {
    this.passkey = true
  }
  else {
    this.passkey = false
  }
  if (event.target.value.match(upperCaseLetters)) {
    this.passkey1 = true
  }
  else {
    this.passkey1 = false
  }
  if (event.target.value.match(numbers)) {
    this.passkey2 = true
  }
  else {
    this.passkey2 = false
  }
  if (event.target.value.length >= 8) {
    this.passkey3 = true
  }
  else {
    this.passkey3 = false
  }
  if (event.target.value.match(special)) {
    this.passkey4 = true
  }
  else {
    this.passkey4 = false
  }


}
firstnamee:any;
lastnamee:any;
streett1:any;
streett2:any;
phonee:any;
cityy:any;
countryy:any;
zipcodee:any;
statee:any;
usernamee:any;
userrcategoryy:any;
defaultunitt:any;
id:any;

openModal(templateEdit: TemplateRef<any>,frmid) {

// console.log("formid",frmid)
this.modalRef = this.modalService.show(templateEdit,
    Object.assign({}, { class: 'modal-lg' }));
    this.id=frmid.key.useraccountid

    this.getManageUserEditData()
    this.defaultunitdata()
    
}

useraccountid:any;
rolecategryid:any;
openModalinfo(templateActions,frmid){

this.modalRef = this.modalService.show(templateActions,
    Object.assign({}, { class: 'modal-lg' }));
this.useraccountid=frmid.data.useraccountid
this.rolecategryid=frmid.data.rolecategoryid

}
defaultarray:any=[];
businessUnitdata: any;
defaultunitdata(){
this.userService.getdefaultunitData().subscribe(data => {
  // this.clientList = data;
  const map = new Map();
//  console.log("default unit ",data)
  this.usercategorydata()
    for (const item of data) {
      if (!map.has(item.description)) {
        map.set(item.description, true);
        this.defaultarray.push({
          Id: item.id,
          Description: item.description,

        });
      }

    }
    this.businessUnitdata=this.defaultarray[0].Description
    // console.log("defaultunitdata",this.defaultarray)
  
      });
}
defaultvalue:any;
unique:any;
createDocName(e) {

this.defaultvalue=e.target.value
}
userarray:any=[]
usercategory:any ="1";
usercategorydata(){
this.userService.getusercategory().subscribe(data => {
  // this.clientList = data;
  
  const map = new Map();
  
    for (const item of data) {
      if (!map.has(item.name)) {
        map.set(item.name, true);
        this.userarray.push({
          Id: item.id,
          name: item.name,

        });
      }

    }
          this.usercategory = this.userarray[0].name;
     
      });
}
categoryvalue:any;
usercategorychanges(e) {

  this.categoryvalue=e.target.value

}

saveopenModal(template: TemplateRef<any>) {
// this.modalRef = this.modalService.show(templateActions);
this.modalRef.hide();
this.modalRef = this.modalService.show(template,
    Object.assign({}, { class: 'modal-lg' }));
    
}
submitbutton(){
this.save()
  this.modalRef.hide();
}
decline(): void {
  
  this.modalRef.hide();
}
searchText;
save() {
var savejson={
"id": this.id,
"firstname":this.fstname,
"lastname": this.lastname,
"nickname": this.nickname,
"street1":this.street1,
"street2":this.street2,
"city":this.city,
"country":this.country,
"state":this.state,
"zipcode":this.zipcode,
"phone":this.phone,
"defaultunit":this.defaultvalue,
"usercategory":this.categoryvalue,
"useraccess":JSON.stringify({
"Dashboard":this.dashboardstatus,
"Imagegallery":this.imagegalerystatuss,
"Library":this.librarystatus,
"Admin":this.adminstatus,
"Mydocument":this.mydocstatus,
"Report":this.reportstatus,
"Datadictionary":this.datadictstatus, 
})
}

// console.log("savejson",savejson)
this.userService.getManageUserSaveData(savejson).subscribe(data => {
  // this.clientList = data;
  if(data == "success"){
    this.toast.success("Saved Successfully", " ", {
      });
      this.modalRef.hide();
      // this.userService.clearSession();
      // window.localStorage.removeItem('clientMasterId');
      // window.localStorage.removeItem('clientMasterType');
      // window.localStorage.removeItem('hspName');
      // window.localStorage.clear();
      this.router.navigate(['/client/clientdashboard/clientdashboardview']);
  }
  
})
}



statustoggle(value){
  var test={
    "id":value
  }
 
this.userService.manageuserstatus(test).subscribe(data => {
 
})
}
resetuserid:any;
resetusername:any;
openModalreset(templateReset,frmid){

this.modalRef = this.modalService.show(templateReset,
    Object.assign({}, { class: 'modal-lg' }));
    this.resetuserid=frmid.data.useraccountid
    this.resetusername=frmid.data.Name
}
savemodalreset(resetsave: TemplateRef<any>){
this.decline()
  this.modalRef = this.modalService.show(resetsave,
    Object.assign({}, { class: 'modal-lg' }));
}
savepwd(){
this.saveresetpasswrd()
this.modalRef.hide();
}
idd:any;
Password:any;
confirmpassword:any;
currentpassword:any;
changepassword:any;
saveresetpasswrd(){
var savereset={
  "id":this.resetuserid,
"changepassword":this.passwordDetails.newpasswordmod,
"confirmpassword":this.passwordDetails.confirmPasswordmod
}
//  console.log("savereset",savereset)
  this.userService.resetpwd(savereset).subscribe(data => {
  
  this.toast.success("Saved Successfully", " ", {
      });

})
this.passwordDetails.newpasswordmod="";
this.passwordDetails.confirmPasswordmod="" 
}

designid: any;
BuId:any;
formassignedId:any;
DocCode:any;
btnsubmitClick(event) {
  
  this.designid = event.data.formproductId;
  this.BuId = event.data.BuId;
  this.formassignedId = event.data.formassignedId;
  this.DocCode = event.data.DocCode;
  
  var obje = {
    "formproductId":event.data.formproductId,
    "BuId":event.data.BusinessUnitCode,
    "formassignedId": event.data.formassignedId,
    "DocCode": event.data.DocCode
  }
  this.userService.changeNav(obje)
  this.router.navigate([`/client/masterlibrary/submit-stag-production`])
}
}



navigation.html

<div class="air__layout--appMaxWidth air__menu--white air__layout--cardsShadow" style="max-width: 100% !important;">
  <div class="air__topbar" style="padding: 0rem 0.33rem;">
    <div class="air__topbar__searchDropdown dropdown mr-md-4 mr-auto">
      <div class="air__subbar" style="border-bottom: 0px solid #e4e9f0 !important;">
    <ul class="air__subbar__breadcrumbs mr-2" style="align-items: center;">

         <li class="air__subbar__breadcrumb">
          <a routerLink="/client/clientdashboard/clientdashboardview" href="javascript:void(0)" class="air__subbar__breadcrumbLink">
          <div class="air__auth__logo__name" style="margin-left: 0rem;">
            <span class="font-size-32" style="color: #6EACAF !important;">D</span><span class="text-secondary font-size-32">C</span>
          </div>
      </a>
    </li>


     <li class="air__subbar__breadcrumb dashboardicon" *ngIf=show>
       <div class="launcher">
        <div class="button">
          <img src="./assets/svg/icon--apps.svg"  alt="" (click)="showdashboardmenu()" *ngIf=sshow />
          <span class="badge badge-dark" *ngIf="userDetail.operationMessage!=0 && this.router.url!='/client/notificationshare' && this.router.url!='/client/inbox'" [minFontSize]='7' fittext style="position: absolute;top: -1rem;left: 1.3rem;height: 33px !important;width: 33px !important;line-height: 16px;color: #fff;border-radius: 50%;">{{userDetail.operationMessage}}</span>
        </div>
      <div class="app-launcher" *ngIf="dashboardmenu">
        <div class="apps">
   <ul class="first-set">
                      <li class="mb-1"><a routerLink="/client/clientdashboard/clientdashboardview" (click)="gallery()"><img src="./assets/svg/dash.svg" alt="" style="max-height: 50px;" /><span class="pt-1">Dashboard</span></a></li>
                      <li class="mb-1" *ngIf="sessionrole!='Reviewer' && temp.Library"><a routerLink="/client/masterlibrary" (click)="library()"><img src="./assets/svg/lib_1.svg" alt="" style="max-height: 50px;"/><span class="pt-1">Library</span></a></li>

                      <li class="mb-1" *ngIf="sessionrole!='Reviewer' && temp.Mydocument"><a routerLink="/client/managedocument" (click)="Mydocument()"><img src="./assets/svg/doc.svg" alt="" style="max-height: 50px;"/><span class="pt-1">Document</span></a></li>
                      <li class="mt-2" *ngIf="sessionrole!='Reviewer'  && temp.Datadictionary"><a routerLink="/client/datadictionary" (click)="datadictionary()"><img src="./assets/svg/dic.svg" alt="" style="max-height: 50px;"/><span class="pt-1">Dictionary</span></a></li>
                      <li [ngClass]="sessionrole!='Reviewer'?'mt-2':'mt-0'"><a routerLink="/client/imagegallery" (click)="ImageGallery()"><img src="./assets/svg/gallery.svg" alt="" style="max-height: 50px;"/><span class="pt-1">Gallery</span></a></li>
                      <li class="mt-2" *ngIf="sessionrole!='Reviewer'&& sessionrole!='Designer'  && temp.Report "><a  routerLink="/client/report/auditreport" (click)="report()"><img src="./assets/svg/rep.svg" alt="" style="max-height: 50px;"/><span class="pt-1">Report</span></a></li>

                      <li [ngClass]="sessionrole!='Reviewer'?'mt-2':'mt-0'"><a routerLink="/client/inbox" (click)="inbox()"><img src="./assets/svg/inbox_menu.svg" alt="" style="max-height: 50px;"/><span class="pt-1">Inbox <span class="badge badge-dark" *ngIf="userDetail.operationMessage && userDetail.operationMessage!=0" style="position: absolute;top: 0rem;left: 3.3rem;height: 24px;width: 24px;color: #fff;border-radius: 50%;" [minFontSize]='7' fittext>{{userDetail.operationMessage}}</span></span></a></li>
                      <li class="mt-2" *ngIf="sessionrole!='Reviewer' && temp.Admin"><a routerLink="/client/adminct/manageuser"(click)="admin()"><img src="./assets/svg/admin.svg" alt="" style="max-height: 50px;"/><span class="pt-1">Admin</span></a></li>
                     <li class="mb-1"><a routerLink="/profile" (click)="myprof()"><img src="./assets/svg/profile.svg" alt="" style="max-height: 50px;    margin-top: 10px;"/><span class="pt-1">My Profile</span></a></li>
          </ul><a class="more mt-2" (click)="logout()">Log Out</a>

        </div>
      </div>
    <style type="text/css">.notification .height-300{height:fit-content!important;max-height:300px!important;min-height:max-content!important}.notification .app-launcher{position:absolute;top:37px;right:0;-webkit-animation:menu 200ms;animation:menu 200ms;z-index:9999999;-webkit-transition:all 200ms ease-in-out 0s,visibility 0 linear 200ms;transition:all 200ms ease-in-out 0s,visibility 0 linear 200ms;display:block;border-radius:2px}.notification .apps{position:relative;background:#fff}.notification .app-launcher:before{top:-8px!important;right:-9px!important;left:unset!important;z-index:0!important}.notification .app-launcher:after{top:-8px!important;right:-9px!important;left:unset!important}.launcher{position:relative;text-align:center;color:#272727;z-index:999!important}.air__layout__footer{position:fixed;bottom:0;background:#fff;width:100%}.dashboardicon .apps{left:-60px}.air__subbar__breadcrumb .air__subbar__breadcrumbLink{color:#333!important;font-size:15px;font-weight:700}.air__subbar{padding:0 1.33rem}.air__footer__inner{padding:.21rem 0;text-align:center}.air__subbar__breadcrumb{margin-right:1.4rem!important}.app-launcher{position:absolute;top:45px;-webkit-animation:menu 200ms;animation:menu 200ms;z-index:-1;-webkit-transition:all 200ms ease-in-out 0s,visibility 0 linear 200ms;transition:all 200ms ease-in-out 0s,visibility 0 linear 200ms;display:block;border-radius:2px}.app-launcher:before{content:'';border-left:10px solid transparent;border-right:10px solid transparent;border-bottom:10px solid #ccc;border-bottom-color:#ccc;position:absolute;top:-9px;left:16px;-webkit-transform:translate(-50%);transform:translate(-50%);z-index:1}.app-launcher:after{position:absolute;top:-8px;left:16px;-webkit-transform:translate(-50%);transform:translate(-50%);display:inline-block;border-right:9px solid transparent;border-bottom:9px solid #fff;border-left:9px solid transparent;content:"";z-index:9999}.apps{position:relative;border:1px solid #ccc;border-color:rgba(0,0,0,0.2);box-shadow:0 2px 10px rgba(0,0,0,0.2);-webkit-transition:height 200ms ease-in-out;transition:height 200ms ease-in-out;min-height:210px;overflow-y:auto;overflow-x:hidden;width:320px;height:375px;display:block;white-space:normal;text-align:left;margin:0;padding:0}.dropdown .dropdown-menu{border:none;background-color:transparent;box-shadow:none}.appsnew ul{width:100%!important}.appsnew ul li{text-align:left!important;width:100%!important;height:auto!important}.appsnew ul li a{text-align:left!important}.apps ul{background:#fff;margin:0;padding:24px;text-align:left;width:320px;min-height:373px;overflow:hidden;list-style:none;position:relative;display:block;white-space:normal}.apps ul li{height:98px;width:86px;color:#000;margin:0;padding:1px;text-align:center;display:inline-block;vertical-align:top}.apps ul li a{text-decoration:none;display:block;margin:8px 2px;text-align:center;border:1px solid transparent;-webkit-transform:translate(0px,0px);transform:translate(0px,0px);-webkit-transition:-webkit-transform .2s cubic-bezier(0.333,0,0,1);transition:-webkit-transform .2s cubic-bezier(0.333,0,0,1);transition:transform .2s cubic-bezier(0.333,0,0,1);transition:transform .2s cubic-bezier(0.333,0,0,1),-webkit-transform .2s cubic-bezier(0.333,0,0,1)}.apps ul li a:hover{border-color:#e5e5e5}.apps ul li a span{font-size:13px;line-height:20px;display:block;color:#272727}.apps ul li a img{width:64px;height:64px;display:block;margin:0 auto}.apps .more{line-height:40px;text-align:center;display:block;width:322px;background:#f5f5f5;cursor:pointer;height:40px;overflow:hidden;position:absolute;text-decoration:none;color:#282828;bottom:0}.apps .more .apps{height:500px!important}.apps .overflow .more{border-bottom:1px solid #ebebeb;left:28px;width:270px;height:0;cursor:default;outline:none}.launcher .button{cursor:pointer;width:30px;margin:0 auto}.launcher .button img{opacity:.55}.launcher .button:hover img{opacity:.85}.hide{display:none}::-webkit-scrollbar-thumb{background-clip:padding-box;background-color:rgba(0,0,0,0.3);border:5px solid transparent;border-radius:10px;min-height:20px;min-width:20px;height:5px;width:5px}::-webkit-scrollbar{height:15px!important;width:15px!important;background:#fff!important}::-webkit-scrollbar-button{height:0;width:0}@-webkit-keyframes menu{0%{opacity:0;-webkit-transform:translateY(-2rem);transform:translateY(-2rem)}100%{oapcity:1;-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes menu{0%{opacity:0;-webkit-transform:translateY(-2rem);transform:translateY(-2rem)}100%{oapcity:1;-webkit-transform:translateY(0);transform:translateY(0)}}.kit__utils__heading:after,.air__utils__heading:after{position:absolute;display:block;content:'';left:0;bottom:-3px;height:4px;width:35px;border-radius:7px;background:#6EACAF}</style>
     </div>
   </li>
    <li *ngIf="galleryvalue==''"  class="air__subbar__breadcrumb">
           <em class="fe fe-chevron-right"></em>
      </li>
      <li *ngIf="this.router.url!='/client/notificationshare' && this.router.url!='/client/inbox_compose' && this.router.url!='/client/inbox' && galleryvalue=='Dashboard'" class="air__subbar__breadcrumb dashboardicon">
        <div class="launcher">

        <a class="air__subbar__breadcrumbLink "
          ><span >Dashboard</span> </a>
          <div class="app-launcher" *ngIf="submenus">
            <div class="apps appsnew">
              <ul >
                <li class="mt-2"><a routerLink="/client/clientdashboard/clientdashboardview" style="max-height: 88px;max-width: 90px;"><span  class="pt-1">Dashboardview</span></a></li><br>
                <li class="mt-2"> <a routerLink="/client/clientdashboard/overalldocumentstatus" style="max-height: 50px; "><span  class="pt-1">overalldocumentstatus</span></a></li><br>
                <li class="mt-2"> <a routerLink="/client/clientdashboard/approvalstatus" style="max-height: 50px;max-width: 400px; "><span  class="pt-1">All ApprovalStatus</span></a></li><br>
                <li class="mt-2"> <a routerLink="/client/clientdashboard/approvalpending" style="max-height: 50px; "><span  class="pt-1">My appovalPending</span></a></li><br>
                <li class="mt-2"> <a routerLink="/client/clientdashboard/approvalcompleted" style="max-height: 50px; "><span  class="pt-1">My ApprovalCompleted</span></a></li><br>
                <li class="mt-2"> <a routerLink="/client/clientdashboard/allapprovalpending" style="max-height: 50px; "><span class="pt-1">All ApprvalPending</span></a></li><br>
                <li class="mt-2"> <a routerLink="/client/clientdashboard/myallotment" style="max-height: 50px; "><span class="pt-1">My Allotment</span></a></li><br>
                <li class="mt-2"> <a routerLink="/client/clientdashboard/allallotment" style="max-height: 50px; "><span class="pt-1">All Allotment</span></a></li>


              </ul>

            </div>
          </div>
        </div>
      </li>
      <li *ngIf="galleryvalue=='Librarydocument'" class="air__subbar__breadcrumb mydoc">
        <div class="launcher">
        <a class="air__subbar__breadcrumbLink ">
        <span style="cursor: pointer;">Library Document</span></a>
          <div class="app-launcher" *ngIf="librarysubmenus">
            <div class="apps appsnew">
              <ul >
                <li class="mt-2"> <a routerLink="/client/masterlibrary/commondocbu" ><span>Common Doc To Bu</span></a></li><br>
                   </ul>

            </div>
          </div>
        </div>
      </li>
      <li *ngIf="galleryvalue=='mydocument'" class="air__subbar__breadcrumb mydoc">
        <div class="launcher">

        <a class="air__subbar__breadcrumbLink " routerLink="/client/managedocument"(click)="Mydocument()"
          ><span >Documents</span></a>
        </div>
      </li>
      <li *ngIf="galleryvalue=='datadictionary'" class="air__subbar__breadcrumb mydoc">
        <div class="launcher">

        <a class="air__subbar__breadcrumbLink "
          ><span>Dictionary</span> <em ></em></a>
        </div>
      </li>

      <li *ngIf="galleryvalue=='imagegallery'" class="air__subbar__breadcrumb mydoc">
        <div class="launcher">

        <a class="air__subbar__breadcrumbLink "
          ><span > Gallery</span></a>
        </div>
      </li>

      <li class="air__subbar__breadcrumb mydoc" *ngIf="this.router.url=='/client/notificationshare' || this.router.url=='/client/inbox_compose' || this.router.url=='/client/inbox'">
        <a class="air__subbar__breadcrumbLink " routerLink="/client/inbox">Inbox </a>
      </li>

 <li *ngIf="galleryvalue=='admin'" class="air__subbar__breadcrumb mydoc">
  <div class="launcher">

  <a class="air__subbar__breadcrumbLink "
    ><span  >Admin</span> </a>
    <div class="app-launcher" *ngIf="adminsubmenus">
      <div class="apps appsnew">
        <ul >
          <li class="mt-2"><a routerLink="/client/adminct/manageuser" ><span>Manage User</span></a></li><br>
          <li class="mt-2"> <a routerLink="/client/masterlibrary/businessunit" ><span>Manage Business unit</span></a></li><br>
          <li class="mt-2"> <a routerLink="/client/masterlibrary/documentcode" ><span>Manage Document Code</span></a></li><br>
          <li class="mt-2"> <a routerLink="/client/masterlibrary/commondocbu" ><span>Common Doc To Bu</span></a></li><br>
          <li class="mt-2"> <a routerLink="/client/masterlibrary/virtualgroupdocsetup" ><span>Virtual Groupdoc Setup</span></a></li><br>

        </ul>

      </div>
    </div>
  </div>
</li>


      <li *ngIf="galleryvalue=='myprofile'" class="air__subbar__breadcrumb mydoc">
        <div class="launcher">
        <a class="air__subbar__breadcrumbLink " ><span>My Profile</span></a>
          </div>
        </li>

      <li *ngIf="galleryvalue=='report'" class="air__subbar__breadcrumb mydoc">
        <div class="launcher">

        <a class="air__subbar__breadcrumbLink "
          ><span >Report</span></a>
          <div class="app-launcher" *ngIf="submenus">
            <div class="apps appsnew">
              <ul >
                <li class="mt-2"><a routerLink="/client/report/auditreport"><span>Audit Report</span></a></li><br>
                <li class="mt-2"> <a routerLink="/client/report/wspdftrack" ><span>WS PDF Track</span></a></li><br>
                <li class="mt-2"> <a routerLink="/client/report/printfileexport" ><span>PrintFile Export</span></a></li><br>


              </ul>

            </div>
          </div>
        </div>
      </li>

    </ul>

    <button *ngIf="sessionrole!='Reviewer'" routerLink="/client/managedocument/createnewdoc" [queryParams]="{type: 'document'}" class="btn btn-with-addon mr-auto text-nowrap d-none d-md-block text-nowrap text-white" data-offset="0,15" style="background-color: #6EACAF !important;">
      <a ><span class="btn-addon dropdown-toggle-text text-white">
        <em class="btn-addon-icon fe fe-plus-circle"></em>
      </span></a>
      Create Form
    </button>
    <!-- <a style="background-color: #6EACAF !important;position: fixed;right: 80px;border-radius: 2px;padding:6px;color: #fff!important;"
     href="https://onboarding.myrecoverycoach.com/rc-ob/#/oblogin/{{SSO_User}}/{{SSO_Pwd}}">
      ONBOARD
  </a> -->
  </div>
  </div>

    <div class="launcher notification pull-right" style="position: absolute;right: 255px;">
      <a class="air__subbar__breadcrumbLink text-muted " 
        ><span style="position: relative;width: 20px;"  ><i class="fe fe-user font-size-16" style="color:  #333!important;" aria-hidden="true"></i>
          <span  style="width: 20px;"></span>
          <ng-container *ngIf="userDetail.nickname; else flname">
            <span  style="width: 20px;color:  #333!important;">  {{userDetail.nickname}}</span>
          </ng-container>
          <ng-template #flname>
            <span  style="width: 20px;color:  #333!important;">  {{userDetail.firstname}} {{userDetail.lastname}}</span>
          </ng-template>
        </span> </a>
        </div>

        <div class="launcher notification pull-right" style="position: absolute;right: 90px;">
          <a class="air__subbar__breadcrumbLink text-muted ">
        <ng-container *ngIf="userDetail.login_date; else dateTemplate">
          <span style="width: 20px;color:  #333!important;">Last Login : {{userDetail.login_date | date:'MM/dd/yyyy'}}
          </span>
        </ng-container>
        <ng-template #dateTemplate>
          <span style="width: 20px;color:  #333!important;">Last Login : --/--/----
          </span>
        </ng-template>
        </a>
        </div>
    <div class="launcher notification pull-right" style="position: absolute;right: 42px;">
      <a class="air__subbar__breadcrumbLink text-muted " (click)="notifisubmenu()"
        ><span style="cursor:pointer;position: relative;width: 20px;"  ><i class="fe fe-bell font-size-16" style="color:  #333!important;" aria-hidden="true"></i>
        <span class="ncount" fittext [minFontSize]='7' style="width: 20px;">{{notificationdata.length}}</span>
        </span> </a>
        <div class="app-launcher" *ngIf="notifisubmenus0">
          <div class="apps appsnew height-300">
            <div class="kit__customScroll ps-container ps-theme-kit">
              <ul class="list-unstyled" style="padding: 10px;">
                <li *ngFor="let data of notificationdata">
                  <div *ngIf="data.comments!=null">
                  <div class="kit__utils__avatar kit__utils__avatar--rounded mr-3 mt-2" style="width:1.9rem;height: 1.9rem;float: left;">
                    <div id="profileImage" placement="top" container="body" [ngStyle]="getbgColor(data.commentName)" style="text-transform: uppercase;">{{data.commentName}}</div>
                  </div>
                  <div class="d-flex align-items-baseline" (click)="notificationtopreview(data.designproduct_fk,data.doctype)">
                    <p class="kit__l2__title">
                      {{data.comments}}
                    </p>
                    <span class="kit__l2__span text-muted font-size-14">{{data.commenttime | date:'shortTime'}}</span>
                  </div>
                  <p class="kit__l2__content text-muted" style="margin-left: 2.4rem !important;font-size: 13px;">
                    {{data.commentuser}} has commented.
                  </p>
                  <hr>
                </div>
                <div *ngIf="data.commentmessage!=null">
                  <div class="kit__utils__avatar kit__utils__avatar--rounded mr-3 mt-2" style="width:1.9rem;height: 1.9rem;float: left;">
                    <div id="profileImage" placement="top" container="body" [ngStyle]="getbgColor(data.replyName)" style="text-transform: uppercase;">{{data.replyName}}</div>
                  </div>
                  <div class="d-flex align-items-baseline" (click)="notificationtopreview(data.designproduct_fk,data.doctype)">
                    <p class="kit__l2__title">
                      {{data.commentmessage}}
                    </p>
                    <span class="kit__l2__span text-muted font-size-14">{{data.replytime | date:'shortTime'}}</span>
                  </div>
                  <p class="kit__l2__content text-muted" style="margin-left: 2.4rem !important;font-size: 13px;">
                    {{data.replyuser}} has replied.
                  </p>
                  <hr>
                </div>
                </li>

              </ul>
            </div>


          </div>
        </div>
      </div>
  </div>
  </div>
  <ng-template #delete_images>
    <div class="modal-header">
      <h4 class="modal-title pull-left">Create Form</h4>
      <button type="button" class="close pull-right" aria-label="Close" (click)="modalRef.hide()">
        <span aria-hidden="true">&times;</span>
      </button>
    </div>
    <div class="modal-body" style="background:white;">
      <div class="form-group row">
      <button   routerLink="/client/managedocument/createnewdoc" [queryParams]="{type: 'document'}" (click)="modalRef.hide()" class="btn btn-with-addon mr-auto text-nowrap d-none d-md-block text-nowrap text-white" data-offset="0,15" style="background-color: #6EACAF !important;    margin-left: 20px;">
        <a ><span class="btn-addon dropdown-toggle-text text-white">
          <em class="btn-addon-icon fe fe-plus-circle"></em>
        </span></a>
        Create New Document
      </button>
      <button   routerLink="/client/clientdashboard/approvalstatus" (click)="modalRef.hide()"  class="btn btn-with-addon mr-auto text-nowrap d-none d-md-block text-nowrap text-white" data-offset="0,15" style="background-color: #6EACAF !important;">
        <a ><span class="btn-addon dropdown-toggle-text text-white">
          <em class="btn-addon-icon fe fe-plus-circle"></em>
        </span></a>
       Create Premade Document
      </button>
      </div>
    </div>
  </ng-template>
  <style>
    #profileImage {
  width: 30px;
  border-radius: 50%;
  background: #2d8d99;
  color: #fff;
  text-align: center;
  line-height: 30px;
}
.badge-dark{    display: flex !important;
    align-items: center;
    justify-content: center;}
.ncount{    position: absolute;
    width: 20px;
    display: flex;
    align-items: center;
    justify-content: center;    right: -17px;
    height: 20px;
    background: #6eacaf;
    border-radius: 100px;
    color: white;
    font-size: 11px;
    font-weight: bold;
    top: -9px;}
    .modal .modal-content{    border-radius: 15px;  }
  .modal-header{    background:#2e8c9f;
    color: white;border-radius: 15px 15px 0px 0px;
    padding: 10px;}
    .modal-header .close{background: transparent !important;
      color: white;
      opacity: 1;}
    .modal-content{    border-radius: 15px !important;    }
  </style>



navigation.ts

import { Component, EventEmitter, Output, ElementRef, HostListener, OnInit ,ViewChild,TemplateRef} from '@angular/core';
import { UserService } from '../../shared/services/user.service';
import { environment } from '../../../environments/environment';
import { ActivatedRoute, Router } from '@angular/router'
import { BsModalService } from 'ngx-bootstrap/modal';
import { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';
import { interval } from 'rxjs';
declare var $: any;

@Component({
  selector: 'app-navigation',
  templateUrl: './navigation.component.html'
})
export class NavigationComponent implements OnInit {
  @ViewChild('delete_images') tempPageRef: TemplateRef<any>;
  modalRef: BsModalRef;
  public intervallTimer = interval(5000);
  @Output()
  toggleSidebar = new EventEmitter<void>();

  public showSearch = false;
  selectedfile:null;
  dashboardmenu: boolean=false;
  submenus:boolean=false;
  librarysubmenus:boolean=false;
  mydocumentsubmenus:boolean=false;
  imagegallerysubmenus:boolean=false;
  adminsubmenus:boolean=false;
  notifisubmenus:boolean =false
  isCollapsed = true;
  isCollapsed1 = true;
  isCollapsed3 = true;
  isCollapsed4 = true;
  isCollapsed2 = true;
  isCollapsed6 = true;
  isCollapsed7 = true;
  isCollapsed8 = true;

  showMenu = '';
  showSubMenu = '';
  public sidebarnavItems: any[];
  // this is for the open close
  usrLogColor: any;
  queryParams = [];
  currenturl: string;
  notifisubmenus0: boolean=false;
  userid: any;
  notificationdata: any=[];
  sessionrole: string;
  addExpandClass(element: any) {
    if (element === this.showMenu) {
      this.showMenu = '0';
    } else {
      this.showMenu = element;
    }
  }


  constructor(private userService: UserService,  private modalService: BsModalService,activatedRoute: ActivatedRoute, public router: Router,public el:ElementRef) { 
  }
  @HostListener('document:click', ['$event'])
  clickout(event) {
    if(event.path[3].className!="air__subbar__breadcrumb dashboardicon"){
     this.dashboardmenu=false; 
    }
    if(event.path[3].className!="air__subbar__breadcrumb mydoc"){
      this.mydocumentsubmenus=false; 
      this.librarysubmenus=false; 
      this.librarysubmenus=false; 
      this.submenus=false; 
      this.adminsubmenus=false; 
    }
    if(event.path[3].className!="notification"){
      this.notifisubmenus=false; 
    }
  }
  show:boolean=true;
  ngOnInit() {
    // this.userService.userSource$.subscribe(data=>{
    //   this.userDetails=data
    //   if(this.userDetails){
    //     window.localStorage['SSOU'] = encodeURIComponent(btoa(this.userDetails.username));
    //     window.localStorage['SSOP'] = encodeURIComponent(btoa(this.userDetails.password));
    //   }
    // })
    this.sessionrole = localStorage.getItem("role");
    this.getCurrentUser();
    this.useracces();
//  console.log(this.router.url); 
 if(this.router.url=='/client/masterlibrary'){
   this.galleryvalue='Librarydocument';
 }
 if(this.router.url=='/client/managedocument'){
  this.galleryvalue='mydocument';
}
if(this.router.url=='/client/clientdashboard/clientdashboardview'){
  this.galleryvalue='Dashboard';
}
if(this.router.url=='/htmldocbuilder'){
  this.galleryvalue='mydocument';
}
if(this.router.url=='/profile'){
  this.galleryvalue='myprofile';
}
this.userid=localStorage.getItem("userid");
const subscribe0 = this.intervallTimer.subscribe(() => this.notificationmsg());
/*const subscribe0=interval(5000*60).subscribe(x => {
  this.notificationmsg();
});*/
//subscribe0.unsubscribe()
setTimeout(()=> subscribe0.unsubscribe(), 6000);
  }
  notificationmsg(){
    var userid ={
      "useraccountid":this.userid
    }
    this.userService.getnetificationmsg(userid).subscribe(
      data => {
        this.notificationdata=data;
      });
  }
  notificationtopreview(did,fid){
    var obje = {
      "routerpage":"Submitted",
      "tablename":"design",
      "content":"notEditable",
      "designid": did,
      "mode": "edit",
      "formtypeid": fid
    }
  this.userService.changeNav(obje)
  if (fid === 1) this.router.navigate([`/designbuilderpreview`]);

  else if (fid === 2) this.router.navigate([`/designview`]);

  else if (fid === 3) this.router.navigate([`/surveybuilder`]);
  }
  notifisubmenu(){
    this.notifisubmenus0=!this.notifisubmenus0;
  }
  temp:any;
  useracces(){
    this.temp=JSON.parse(localStorage.getItem("useraccess"))
  }
  userDetail: any;
  img_url: any;
  role:any;
  //apiurl: any = environment.api_url;
  // usrLogColor: any;
  getCurrentUser() {
    this.userService.currentUser.subscribe(
      (userData) => {
        if (userData)
          this.userDetail = userData;
        // if (this.userDetail.item.hostModel == "CLOUD")
        //   this.img_url = environment.cloudeImageURL
        // else
        //   this.img_url = environment.vmImageURL
        this.usrLogColor = "#303e4e";
        if (this.userDetail.approle == "CLIENT"){
          this.role="CLIENT"
        }
        if(this.userDetail.approle == 'ADMIN'){
          this.usrLogColor = "#240046";
        }else if(this.userDetail.approle == 'CLIENT'){
          if(this.userDetail.usergroupname === "Admin"){
            this.usrLogColor = "#303e4e";
          }else if(this.userDetail.usergroupname === "IT"){
            this.usrLogColor = "#28536B";
          }else if(this.userDetail.usergroupname === "Business Analyst"){
            this.usrLogColor = "#0353A4";
          }
        }
      }
    )
    this.userService.getallcount().subscribe(data => {
      this.userDetail.operationMessage = data.overallinbox;
    }) 
  }
  inboxcount:any = '';
  showdashboardmenu(){
    if(this.dashboardmenu===false){
      this.dashboardmenu=true;
    }else{
      this.show=true
      this.dashboardmenu=false;
    }
  }
  
  submenu(){
    if(this.submenus===false){
      this.submenus=true;
    }else{
      this.submenus=false;
    }
  }
  librarysubmenu(){
    if(this.librarysubmenus===false){
      this.librarysubmenus=true;
    }else{
      this.librarysubmenus=false;
    }
  }
  imagegallerysubmenu(){
    if(this.imagegallerysubmenus===false){
      this.imagegallerysubmenus=true;
    }else{
      this.imagegallerysubmenus=false;
    }
  }
  mydocument(){
    if(this.mydocumentsubmenus===false){
      this.mydocumentsubmenus=true;
    }else{
      this.mydocumentsubmenus=false;
    }
  }
  adminsubmenu(){
    if(this.adminsubmenus===false){
      this.adminsubmenus=true;
    }else{
      this.adminsubmenus=false;
    }

   
}
getbgColor(char){
  let myStyles = {
    'background-color': '#2d8d99'
  };
  if(char.charAt(0).toUpperCase() == 'A'){
    myStyles["background-color"] = '#34495e'
  }else if(char.charAt(0).toUpperCase() == 'D'){
    myStyles["background-color"] = '#2d8d99'
  }else if(char.charAt(0).toUpperCase() == 'C'){
    myStyles["background-color"] = '#550055'
  }else if(char.charAt(0).toUpperCase() == 'J'){
    myStyles["background-color"] = '#5a4586'
  }
  return myStyles
}

  isLog(){
    // Use to back end api to check user log
    // var log : boolean = false;
    // If User is Log
    // Use back end api to handle this
    // log = true;
    // return log;
    if (this.userDetail.approle == "CLIENT"){
      this.role="CLIENT"
      return this.role
    }
    // console.log(this.userDetail.user.usergroupname)
    } 
  onselect2(event) {
    // console.log("event check",event)

    
    // this.selectedfile = event.target.files[0];
    // consol.log("filee", this.selectedfile)
  }
  galleryvalue:any="";
  sshow:boolean=true;
  gallery(){
this.galleryvalue="Dashboard"
this.show=true
this.sshow=true
this.dashboardmenu=false;
  }
  library(){
    this.galleryvalue="Librarydocument"
    this.show=true
    this.sshow=true
    this.dashboardmenu=false;
  }
  Mydocument(){
    this.galleryvalue="mydocument"
    this.show=true
this.sshow=true
    this.dashboardmenu=false;
  }
  datadictionary(){
    this.galleryvalue="datadictionary"
    this.show=true
    this.sshow=true
        this.dashboardmenu=false;
  }
  ImageGallery(){
    this.galleryvalue="imagegallery"
    this.show=true
this.sshow=true
    this.dashboardmenu=false;
  }
  inbox(){
    this.galleryvalue="inbox"
    this.show=true
    this.sshow=true
        this.dashboardmenu=false;
  }
  admin(){
    this.galleryvalue="admin"
    this.show=true
    this.sshow=true
        this.dashboardmenu=false;
  }
  report(){
    this.galleryvalue="report"
    this.show=true
    this.sshow=true
        this.dashboardmenu=false;
  }
  myprof(){
    this.galleryvalue="myprofile"
    this.show=true
    this.sshow=true
  }
  logout() {
    this.logoutstatus()
    this.userService.clientMasterId = 0;
    
    this.userService.clearSession();
    // window.localStorage.removeItem('clientMasterId');
    // window.localStorage.removeItem('clientMasterType');
    // window.localStorage.removeItem('hspName');
    window.localStorage.clear();
    this.router.navigate(['/login']);
  }
  logoutstatus(){
  this.userService.logoutstatus().subscribe(data => {
    // console.log("logoutdata",data)
  })
}

openModalDelete(template: TemplateRef<any>) {
  // this.modalRef = this.modalService.show(template, { class: 'modal-lg', backdrop: "static" });
    this.modalRef = this.modalService.show(template);
    
}
// sso functionality code....

userDetails
SSO_User=window.localStorage.getItem('SSOU');
SSO_Pwd=window.localStorage.getItem('SSOP');

}


imagegallery.html

<!DOCTYPE html>
<html>
  <head>
  <title></title>
</head>
<body>
<div class="air__layout__content bg-light" style="background: transparent !important;">
  <div class="air__utils__content">
    <div class="air__utils__heading" style="margin-bottom: 0.66rem !important;">
      <div class="air__topbar__searchContainer float-right">
        <em class="air__topbar__searchIcon fe fe-search" style="cursor:pointer"(click)="getSearchBoxValue(searchValue)"></em>
        <input class="air__topbar__searchInput" type="text" placeholder="Start typing to search..." 
        [(ngModel)]="searchValue" name="searchValue" autocomplete="off" (keyup)="getSearchBoxValue(searchValue)"  (paste)="getSearchBoxValueByPaste($event)"/>
       </div>
   </div>
   <a href="javascript: void(0);" style="top: 5.6rem;"
   class="air__sidebar__toggleButton air__sidebar__actionToggle air__sidebar__toggleButtonl"
   (click)="leftsidepanel();activecheckbox('all')" placement="left" tooltip="Filters" container="body" *ngIf="!filterenable">
   <em class="fe fe-filter" style="font-size: 21px;color: #6eacaf;"></em>
 </a>
 <div class="air__sidebarl air__sidebar kit__customScroll sidebarcontents" *ngIf="filterenable" style="width: 19rem;
      position: fixed;
      z-index: 9;
      top: 5.6rem;
      right: inherit;
      box-shadow: none;
      bottom: 0;
      background: #f1f1f1;
      transform: translateX(0px);
      transition: all 0.2s ease-in-out;">
              <div>
                <a  href="javascript: void(0);" style="top: 0rem;left: inherit;right: -3rem;z-index: 999;background-color: #fff !important;box-shadow: none !important;width: 4rem;"
                   class="air__sidebar__toggleButton air__sidebar__actionToggle air__sidebar__toggleButtonl_close"
                   (click)="leftsidepanel();activecheckbox('all')" placement="right" tooltip="Clear Filters" container="body"
                   (mouseover)="clear_filter='./assets/images/filter_hover.png'"
                   (mouseout)="clear_filter='./assets/images/filter.png'">
                  <img [src]="clear_filter" alt=""  style="width: 1.3rem;" />
                </a>
                <div  *ngIf="filterenable"  class="card ml-3 col-sm-12 mb-1" style="padding: 9px;">
                  <h5>Filter Document By</h5>
                </div>
                <div  *ngIf="filterenable"  class="col-sm-12 mt-4" >
                  <div class="accordion"  id="accordion" role="tablist" style="    clear: both; ">
                    <div  class="card">
                      <div  class="card-header collapsed"  role="tab" id="headingOne" data-toggle="collapse"
                        data-parent="#accordion"  data-target="#collapseOne" aria-expanded="false"
                         aria-controls="collapseOne">
                        <div  class="card-title">
                          <span  class="accordion-indicator pull-right">
                            <em  class="plus fe fe-plus" ></em>
                            <em  class="minus fe fe-minus" ></em>
                          </span>
                          Image Type 
                        </div>
                      </div>
                      <div id="collapseOne" class="card-collapse collapse" aria-labelledby="headingOne">
                        <div class="card-body customScroll" style="max-height: 200px !important;">
                          <div class=" d-flex flex-wrap mb-4">
                            <label class="kit__utils__control kit__utils__control__checkbox kit__gallery__control">
                              <input type="checkbox" (change)="activecheckbox('all')" [checked]="allCheckBox==true" id="chAllCheckBox"  />
                              <span class="kit__utils__control__indicator"></span>
                              All
                            </label>
                            <label class="kit__utils__control kit__utils__control__checkbox kit__gallery__control">
                              <input type="checkbox" (change)="activecheckbox('signature')"  [checked]="signatureCheckBox==true"  id="chSignatureCheckBox" />
                              <span class="kit__utils__control__indicator"></span>
                              Signature
                            </label>
                            <label class="kit__utils__control kit__utils__control__checkbox kit__gallery__control">
                              <input type="checkbox" (change)="activecheckbox('logo')"  [checked]="logoCheckBox==true"   id="chLogoCheckBox"/>
                              <span class="kit__utils__control__indicator"></span>
                              Logo
                            </label>
                            <label class="kit__utils__control kit__utils__control__checkbox kit__gallery__control">
                              <input type="checkbox" (change)="activecheckbox('other')"   [checked]="otherCheckBox==true"   id="chOtherCheckBox" />
                              <span class="kit__utils__control__indicator"></span>
                              Other
                            </label>
                            <label class="kit__utils__control kit__utils__control__checkbox kit__gallery__control">
                              <input type="checkbox" (change)="activecheckbox('video')"   [checked]="videoCheckBox==true"   id="chVideoCheckBox" />
                              <span class="kit__utils__control__indicator"></span>
                              video
                            </label>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="air__sidebar kit__customScroll" *ngIf="showsidebar">
              <div class="air__sidebar__inner">
                <a href="javascript: void(0);" (click)="openrightsidebar()"
                  class="air__sidebar__close air__sidebar__actionToggle fe fe-x-circle"></a>
                <h5>
                  <strong>Upload Image</strong>
                </h5>
                <div class="cui__utils__line" style="margin-top: 2px; margin-bottom: 3px"></div>
                <div class="air__sidebar__type" style="margin: 0.2rem 0 2rem;">
                  <div class="air__sidebar__type__items">
                    <div class="row">
                        <div class=" pt-1" >
                          <div class="form-group row"><label class="col-lg-3 text-right control-label col-form-label">Category</label>
                            <div class="col-lg-9"><select class="form-control" (change)='changes($event)' [disabled]="LockDD">
                                <option value="logo">Logo</option>
                                <option value="signature">Signature</option>
                                <option value="others">Others</option>
                                <option value="video">videos</option>
                              </select></div>
                          </div>
                          <div class="form-group row">
                            <label class="col-lg-3 text-right control-label col-form-label" for="Upload">Upload</label>
                            <div class="col-lg-9">
                            <label for="FileChoosen" class="FileLabel">Click To Upload</label>
                           <input type="file" style="display: none" #FileUpload id="FileChoosen" class="form-control" name="inputGroupFile01" (change)='onselect($event)' 
                           [accept]="selectedoption === 'video'?'video/*':'image/*'"></div>
                          </div>
                          <div class="form-group row niceScroll" style="padding: 5px 25px;">
                            <div class="kit__gallery__item " style="margin: 0 auto;" *ngFor='let url of urls;let i = index'>
                              <div class="kit__gallery__itemContent" style="height: 8rem;">
                                <div class="kit__gallery__itemControl">
                                  <button type="button" class="btn" style="    top: 90%;
                               left: 90%;
                               position: relative;
                               background: #c9656a;
                               color: white;
                               transform: translate(-50%, -50%);" (click)="removeUpload(url,i)">
                                <em class="fe fe-trash"></em>
                              </button>
                                </div>
                                <ng-container [ngSwitch]="url.Type">
                                  <img *ngSwitchCase="'image'" [src]="url.link" alt="" style="width:100%;height: 20vh;"> 
                                  <video *ngSwitchCase="'video'" width="185px" controlsList="nodownload nofullscreen noremoteplayback">   
                                    <source [src]="url.link" accept="video/*">   
                                    <track src="" kind="subtitles" srclang="en" label="English">
                                  </video>
                                </ng-container>
                              </div>
                            </div>
                          </div>
                          <button  class="btn btn-default greenbtn" type="Submit" (click)='upload()' name="upload" style="margin-left: 30%;" [disabled]="careimagearr1.length == 0">Upload Images</button>
                        </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
    <div class="pull-right" style="margin-left: 25%;" [ngClass]="{'col-lg-11':!filterenable ,'col-lg-9':filterenable }">
      <div style="position: relative;top: -1rem;">
        <ng-container *ngFor="let filter of filter_value">
          <span class="badge badge-secondary mr-2">{{filter}}</span>
          <div class="img-wrap">
            <span class="close" (click)="clearfilter();activecheckbox('all')">&times;</span>
        </div>
        </ng-container>
        </div>
      <div class="card-body">
        <div class="kit__gallery">
          <div class=" kit__gallery__items d-flex flex-wrap" >
            <div class="kit__gallery__item" >
              <div class="kit__gallery__itemContent bg-secondary">
                <div class="kit__gallery__itemControl ">
                  <div class="btn-group kit__gallery__itemControlContainer">
                    <button type="button" class="btn" (click)="openrightsidebar()">
                      <em class="fe fe-plus-circle"></em>
                    </button>
                  </div>
                  <em class="fe fe-plus-circl text-white"></em>
                </div>
              </div>
              <div class="text-gray-6">
                <div>Select and Upload</div>
              </div>
            </div>
        <ng-template [ngIf]="allCheckBox || signatureCheckBox">        
            <div class="kit__gallery__item" *ngFor="let item of signatureImage">
              <div class="kit__gallery__itemContent">
                <div class="kit__gallery__itemControl">
                  <div class="btn-group kit__gallery__itemControlContainer">
                    <button type="button" class="btn" (click)="previewimage({type:item.category === 'video'?'video':'image',url:api_url+item.file},imagepopup)" tooltip="Preview">
                      <em class="fe fe-eye"></em>
                    </button> 
                  </div>
               <button type="button" class="btn" style="    top: 90%;
               left: 68%;
               position: relative;
               background: #c9656a;
               color: white;
               transform: translate(-50%, -50%);" (click)="openModalDelete(delete_images,item)">
                <em class="fe fe-trash"></em>
              </button>
                </div>
                <img style="width:100%;height:auto;"  [src]="api_url +item.file"  alt="Cinque Terre"   (click)="zoomin($event)">
              </div>
              <div class="text-gray-6">
                <div>{{item.filename}}</div>
              </div>
            </div>
        </ng-template>
        <ng-template [ngIf]="allCheckBox || logoCheckBox">
        <div class="kit__gallery__item" *ngFor="let item of logoImage"  > 
            <div class="kit__gallery__itemContent" >
              <div class="kit__gallery__itemControl">
                <div class="btn-group kit__gallery__itemControlContainer">
                  <button type="button" class="btn" (click)="previewimage({type:item.category === 'video'?'video':'image',url:api_url+item.file},imagepopup)" tooltip="Preview">
                    <em class="fe fe-eye"></em>
                  </button> 
                </div>
             <button type="button" class="btn" style="    top: 90%;
             left: 68%;
             position: relative;
             background: #c9656a;
             color: white;
             transform: translate(-50%, -50%);" (click)="openModalDelete(delete_images,item)">
              <em class="fe fe-trash"></em>
            </button>
              </div>
              <img  style="width: 100%;height:auto;" [src]="api_url +item.file"  alt="Cinque Terre"  (click)="zoomin($event)">
            </div>
            <div class="text-gray-6">
              <div>{{item.filename}}</div>
            </div>
          </div>
        </ng-template>
        <ng-template [ngIf]="allCheckBox || otherCheckBox">
          <div class="kit__gallery__item" *ngFor="let item of otherImage" >
              <div class="kit__gallery__itemContent" >
                <div class="kit__gallery__itemControl">
                  <div class="btn-group kit__gallery__itemControlContainer">
                    <button type="button" class="btn" (click)="previewimage({type:item.category === 'video'?'video':'image',url:api_url+item.file},imagepopup)" tooltip="Preview">
                      <em class="fe fe-eye"></em>
                    </button> 
                  </div>
               <button type="button" class="btn" style="    top: 90%;
               left: 68%;
               position: relative;
               background: #c9656a;
               color: white;
               transform: translate(-50%, -50%);" (click)="openModalDelete(delete_images,item)">
                <em class="fe fe-trash"></em>
              </button>
                </div>
                <img [src]="api_url +item.file" style="width: 100%;height: auto;" alt="Cinque Terre" (click)="zoomin($event)">
              </div>
              <div class="text-gray-6">
              <div>{{item.filename}}</div>
              </div>
            </div>
        </ng-template>
        <ng-template [ngIf]="allCheckBox || videoCheckBox">
          <div class="kit__gallery__item" *ngFor="let item of videoFiles"> 
              <div class="kit__gallery__itemContent" >
                <div class="kit__gallery__itemControl">
                  <div class="btn-group kit__gallery__itemControlContainer">
                    <button type="button" class="btn" (click)="previewimage({type:item.category === 'video'?'video':'image',url:api_url+item.file},imagepopup)" tooltip="Preview">
                      <em class="fe fe-eye"></em>
                    </button> 
                  </div>
               <button type="button" class="btn" style="    top: 90%;
               left: 68%;
               position: relative;
               background: #c9656a;
               color: white;
               transform: translate(-50%, -50%);" (click)="openModalDelete(delete_images,item)">
                <em class="fe fe-trash"></em>
              </button>
                </div>
                <video  style="width: 100%;height:100%;" controlsList="nodownload nofullscreen noremoteplayback">   
                  <source [src]="api_url +item.file" accept="video/*">  
                  <track src="" kind="subtitles" srclang="en" label="English"> 
                </video>
              </div>
              <div class="text-gray-6">
                <div>{{item.filename}}</div>
              </div>
            </div>
          </ng-template>
        <ng-template [ngIf]="searchShow">
          <div class="kit__gallery__item" *ngFor="let item of serachImage"  > 
              <div class="kit__gallery__itemContent" >
                <div class="kit__gallery__itemControl">
                  <div class="btn-group kit__gallery__itemControlContainer">
                    <button type="button" class="btn" (click)="previewimage({type:item.category === 'video'?'video':'image',url:api_url+item.file},imagepopup)" tooltip="Preview">
                      <em class="fe fe-eye"></em>
                    </button> 
                  </div>
               <button type="button" class="btn" style="    top: 90%;
               left: 68%;
               position: relative;
               background: #c9656a;
               color: white;
               transform: translate(-50%, -50%);" (click)="openModalDelete(delete_images,item)">
                <em class="fe fe-trash"></em>
              </button>
                </div>
                <ng-container [ngSwitch]="item.category">
                  <video *ngSwitchCase="'video'"  style="width: 100%;height:100%;" controlsList="nodownload nofullscreen noremoteplayback">   
                    <source [src]="api_url +item.file" accept="video/*">   
                    <track src="" kind="subtitles" srclang="en" label="English">
                  </video>
                  <img *ngSwitchDefault [src]="api_url +item.file" alt="Cinque Terre" class="img-fluid" style="width: 100%;height:auto;"> 
                </ng-container>
              </div>
              <div class="text-gray-6">
                <div>{{item.filename}}</div>
              </div>
            </div>
          </ng-template>
          <ng-template [ngIf]="searchShowEmpty">
           <img src="./assets/logon/Search.png"  alt="Cinque Terre">
           </ng-template>
        <ng-template #imagepopup>
          <div class="openModal popupbg" role="document">
            <div class="modal-header">
              PREVIEW
              <button type="button" class="close" data-dismiss="modal" (click)="closepopup()">&times;</button>
            </div>
            <div class="modal-dialog">
            <div class="modal-content">
              <ng-container [ngSwitch]="ViewType">
                <img *ngSwitchCase="'image'" [src]="selectedimg" alt="" class="img-fluid" style="width:auto;height:auto;"> 
                <video *ngSwitchCase="'video'" style="width:auto;height:auto;" controls controlsList="nodownload  noremoteplayback">   
                  <source [src]="selectedimg" accept="video/*"> 
                  <track src="" kind="subtitles" srclang="en" label="English">
                </video>
              </ng-container>
             </div>
            </div>
            </div>
        </ng-template> 
        </div>
        </div>
      </div>
    </div>
    <div [ngClass]="{'col-lg-2 mr-2 card_style':filterenable }">
  </div>
  </div>
</div>                     
<ng-template #delete_images>
  <div class="modal-header">
    <h4 class="modal-title pull-left">Delete Image</h4>
    <button type="button" class="close pull-right" aria-label="Close" (click)="modalRef.hide()">
      <span aria-hidden="true">&times;</span>
    </button>
  </div>
  <div class="modal-body">
    Do you want to delete the Image?
  </div>
  <div class="modal-footer">
    <button type="button" class="btn btn-default greenbtn" (click)="deleteimage();modalRef.hide()">Yes</button>
    <button type="button" class="btn btn-secondary redbtn" (click)="modalRef.hide()" >No</button>
  </div>
</ng-template>
  <div class="alert_box" *ngIf="alertShown">
      <em class="fa fa-exclamation icon"></em>
    <header>Alert</header>
    <p style="font-size: 17px!important;">{{alertMessage}}</p>
    <button class="greenbtn btn-primary"style="font-size:17px"(click)="alertClose()"> OK </button>
  </div>
  <div class="disableScreen" *ngIf=displayShown></div>
                                  
    
    
                      
    
          
    
imagegallery.css

div.gallery {
    width: 100px;
    height: 100px;
    margin: 10px;
    border: 1px solid #ddd; /* Gray border */
    border-radius: 4px;  /* Rounded border */
    position: relative;
    display: inline-flex;
  }.air__utils__content{padding: 1rem;}
  .modal .modal-content{    border-radius: 15px;  }
  .kit__utils__control{    margin-bottom: 1rem !important;width: 100%;
 }
 html, body{    background-color: #f0f1f4 !important;
 }
 h3{    font-size: 14px;    width: 100%;
  padding: 9px 10px;
  color: #6f6e6e;
 margin-bottom: 20px;    background-color: #d9dce2 !important;}
  html, body{    background-color: #f0f1f4 !important;  }
  .modal-dialog {
    max-width:fit-content; /* New width for default modal */
  }
  .modal-header{    background:#2e8c9f;
    color: white;border-radius: 15px 15px 0px 0px;
    padding: 10px;}
    .modal-header .close{background: transparent !important;
      color: white;
      opacity: 1;}
    .modal-content{    border-radius: 15px !important;    }
  .greenbtn{    background-color: #6EACAF !important;border-radius: 100px;    padding: 5px 20px;
    border-color: #6EACAF;}
    .redbtn{    color: #fff !important;
      background-color: #c9656a;    padding: 5px 20px;
      border-color: #c9656a;border-radius: 100px;}
  .kit__utils__heading, .air__utils__heading{border-bottom: none !important;}
  .kit__utils__heading:after, .air__utils__heading:after{display: none !important;}
    div.gallery:hover {
      box-shadow: 0 0 2px 1px rgba(0, 140, 186, 0.5);
    }
   
    div.gallery img {
      max-height: 100%;  
      max-width: 100%; 
      position: absolute;
      top: 0;  
      bottom: 0;  
      left: 0;  
      right: 0;  
      margin: auto;
    }
    .air__sidebar__toggleButton:hover{background-color: #6eacaf !important;color: white;}
.air__sidebar__toggleButton:hover i{color: white !important;}
.air__sidebar__toggleButton{
  left: -3.65rem;
  padding-right: 1.33rem;
  text-align: right;right: inherit;
}
:host ::ng-deep #main-wrapper{
  background-color: #f1f1f1 !important;
}
.card_style{
  padding-left:30px;padding-top: 20px;flex: 0 0 23.666667%;max-width: 23.666667%;
}
.air__sidebarl .air__sidebar__close {
  width: 16rem;
    position: fixed;
    z-index: 9999999999;
    top: 5.6rem;
    bottom: 0;
    background: #ececec;
    transform: translateX(0px);
    transition: all 0.2s ease-in-out;
}
.air__sidebar__toggleButtonl_close:hover,.air__sidebar__toggleButtonl_close:hover i{background-color: #e4e6e6 !important;color: #6eacaf !important;}
.air__sidebar__toggleButtonl_close{
  background-color: #e4e6e6 !important;
}
.air__sidebarl:after {
  content: "";
  font-size: 12px;
  background-size: 30px;
  width: 30px;
  height: 30px;
  display: block;
  margin: 10px auto 0px auto;
}
.customScroll{
  max-height: 175px;
  overflow-y: hidden;
}
.customScroll:hover{
  overflow-y: scroll;
}
.img-wrap {
  position: absolute;
  display: inline-block;
  /* border: 1px red solid; */
  font-size: 0;
}
.img-wrap .close {
  position: absolute;
    bottom: -7px;
    left: -15px;
    z-index: 100;
    background-color: #f1f1f1;
    padding: 5px 2px 2px;
    color: #000;
    font-weight: normal;
    cursor: pointer;
    opacity: .2;
    text-align: center;
    font-size: 19px;
    line-height: 10px;
    border-radius: 50%;
}
.img-wrap:hover .close {
  opacity: 1;
}
.niceScroll{
  max-height: 299px;
    overflow: hidden;
}
.niceScroll:hover{
  overflow-y: scroll;
}
.air__sidebar{
  top:5rem
}
.FileLabel{
  width:220px;
  font-family: 'Poppins-Regular';
  padding: 10px;
  border-radius: 5px;
  border: 1px dashed #BBB;
  text-align: center;
  background-color: #DDD;
  cursor: pointer;
}
.disableScreen {
  position: fixed;
  top: 0;
  left: 0;
  opacity: 0.5;
  background: #000;
  z-index: 1040;
  height: 100%;
  width: 100%;
   }

.alert_box{
    padding: 20px;
    display: flex;
    background: #fff;
    flex-direction: column;
    align-items: center;
    text-align: center;
    max-width:340px;
    width: 100%;
    border-radius: 5px;
    z-index: 1050;
    pointer-events: auto;
    transition: all 0.3s ease;
    position: fixed;
    left:35%
  }
.alert_box .icon{
    height: 100px !important;
    width: 100px !important;
    color: #f23b26 !important;
    border: 3px solid #f23b26 !important;
    border-radius: 50% !important;
    line-height: 97px !important;
    font-size: 50px !important;
  }
.alert_box header{
    font-size: 30px;
    font-weight: 500;
    }
 
 
 
 
 
 
 imagegallery.ts
 
 import { Component, OnInit,TemplateRef,ViewChild,ElementRef } from '@angular/core';
import { UserService } from '../../../shared/services/user.service'
import { Router } from '@angular/router';
import { environment } from '../../../../environments/environment';
import { BsModalService } from 'ngx-bootstrap/modal';
import { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';
import { ToastrService } from 'ngx-toastr';

@Component({
  selector: 'app-imagegallery',
  templateUrl: './imagegallery.component.html',
  styleUrls: ['./imagegallery.component.scss']
})

export class ImagegalleryComponent implements OnInit {
@ViewChild('delete_images') tempPageRef: TemplateRef<any>;
@ViewChild('FileUpload')  fileUploadRef:ElementRef<any>;

constructor(private userService: UserService, private router: Router,
private modalService: BsModalService,private toast: ToastrService) { }

ngOnInit() {
    this.getsignatureImage();
    this.getlogoImage();
    this.getOtherImage();
    this.getVideoFiles();
}

//filter and category change functionality code.....................

filterenable: boolean;
filter_value: any = [];
api_url: any = environment.swagss;
clear_filter:any = './assets/images/filter.png'
allCheckBox=true;
signatureCheckBox=false;
logoCheckBox=false;
otherCheckBox=false; 
videoCheckBox=false;

leftsidepanel(){
    this.filterenable=!this.filterenable;
    this.searchShow=false; 
    this.searchShowEmpty=false;
    this.searchValue="";      
}

clearfilter(){
    this.allCheckBox=false;
      this.signatureCheckBox=false;
      this.logoCheckBox=false;
      this.otherCheckBox=false; 
      this.videoCheckBox=false; 
      this.filter_value = []
}

activecheckbox(e){
    this.clearfilter()
    if(e=='all'){
      this.allCheckBox=true; 
      this.searchShow=false; 
      this.searchShowEmpty=false;
      this.searchValue="";      
    }
    else if(e=='signature'){
      this.filter_value.push(e)
      this.signatureCheckBox=true;
      this.searchShow=false; 
      this.searchShowEmpty=false
      this.searchValue="";      
    }
    else if(e=='logo'){
      this.filter_value.push(e)
      this.logoCheckBox=true;
      this.searchShow=false; 
      this.searchShowEmpty=false
      this.searchValue="";      
    }
    else if(e=='other'){
      this.filter_value.push(e)
      this.otherCheckBox=true; 
      this.searchShow=false; 
      this.searchShowEmpty=false
      this.searchValue="";       
    }
    else if(e=='video'){
      this.filter_value.push(e)
      this.videoCheckBox=true; 
      this.searchShow=false; 
      this.searchShowEmpty=false
      this.searchValue="";       
    }
}
 
//preview upload files and modals functionality code...........

ViewType:string;
modalRef: BsModalRef;
selectedimg:any;
previewimage(img,imagepopup){ 
    if(img.type === "video")
      this.ViewType="video"  
    else this.ViewType="image"
  this.modalRef = this.modalService.show(imagepopup, { class: 'modal-md', backdrop: 'static'});
  this.selectedimg=img.url;
}

closepopup(){
  this.modalRef.hide();
}

//get signature logo and other images and video files functionality code......

signatureImage: any;
getsignatureImage() {
    this.userService.signatureimages().subscribe(data => {
    this.signatureImage = data;
    if (data==""){
        this.alertClose("Signature Images are Empty ");
      }
    })
}

logoImage: any;
getlogoImage() {
      this.userService.logoimage().subscribe(data => {
      this.logoImage = data;
      if (data==""){
        this.alertClose("Logo Images are Empty ");
      }
    })
}
  
otherImage: any;
getOtherImage() {
    this.userService.otherimages().subscribe(data => {
    this.otherImage = data;
    if (data==""){
      this.alertClose("Other Images are Empty ");
    }
  })
}

videoFiles: any;
getVideoFiles() {
    this.userService.videoFiles().subscribe(data => {
    this.videoFiles = data;
    if (data==""){
      this.alertClose("Video Files are Empty ");
    }
  })
}

//upload image and video in db and functionality code....................

alertShown:boolean=false;
displayShown:boolean=false;
alertMessage=""
alertClose(text:string){
 this.alertMessage=text
 this.alertShown=!this.alertShown
 this.displayShown=!this.displayShown
 this.fileUploadRef.nativeElement.value="";
}

selectedfile: File = null;
selectedoption = 'logo';
careimagearr1:any=[];
urls = [];
onselect(event) {
  var  imageFormat= ['image/jpg','image/jpeg','image/gif','image/webp','image/tiff','image/psd',
  'image/raw', 'image/bmp','image/heif','image/indd','image/svg','image/png']
  var videoFormat=['video/mp4','video/webm','video/ogg','video/ogv']
  var OtherFormat:boolean=true;
  var videoLoop:boolean=true;
  if(event.target){
    var uploadFiles = event.target.files
    for(var element of uploadFiles){
      var reader = new FileReader();
      reader.readAsDataURL(element);
      var Type=element.type
      reader.onload=(events:any)=>{
          for(var m=0;m<imageFormat.length;m++){
            if(Type === imageFormat[m]) {
                OtherFormat=false;
                videoLoop=false;
              if(this.selectedoption != "video"){
                this.careimagearr1.push({
                  filename:element.name,
                  filetype:element.type,
                  value:events.currentTarget.result.split(',')[1]
                 })  
                 this.urls.push({
                   Type:'image',
                   link:events.currentTarget.result
                 }); 
                 this.changes(event);
               }else this.alertClose("This category Only Support For Video Files");
            }
          }

          if(videoLoop){
            for(var v=0;v<videoFormat.length;v++){
              if(Type === videoFormat[v]){
                  OtherFormat=false;
                if(this.selectedoption === "video"){
                  this.careimagearr1.push({
                    filename:element.name,
                    filetype:element.type,
                    value:events.currentTarget.result.split(',')[1]
                   })  
                   this.urls.push({
                    Type:'video',
                    link:events.currentTarget.result
                  });
                  this.changes(event); 
                }else this.alertClose("This category Only Support For Image Files");
             }
           }
          }
         
        if(OtherFormat) 
        this.alertClose("This File Format Cannot Support To upload");

      };
    }
  }
}

removeUpload(url,i){
  this.urls.splice(i, 1);
  this.careimagearr1.splice(i,1)
  if(this.careimagearr1.length>0)
     this.LockDD=true;
  else
    this.LockDD=false;
}

LockDD:boolean=false
changes(event){
   if(this.careimagearr1.length>0)
    this.LockDD=true;
   else{
    this.selectedoption = event.target.value
    this.LockDD=false;
   }
}

upload(){ 
    var files = {
      'category':this.selectedoption,
      'Token':'',
      'file1':'',
      'file2':'',
      'file3':'',
      'file':[]
    };

    var pattern = new RegExp(/[~`!@#$%\^&*+=\-\[\]\\';,/{}|\\":<>\?]/); //unacceptable chars
    for(var k=0;k<this.careimagearr1.length;k++){
      if (pattern.test(this.careimagearr1[k].filename)) {
         return this.alertClose("Please only use standard alphanumerics filename-"+this.careimagearr1[k].filename);
        }
    }

  if(this.careimagearr1.length>0){
    this.careimagearr1.forEach((element,index) => {
      let data = []
      data.push(element)
      if(index==0)
        files['file'] = data
      else{
        files[`file${index}`] = data
      }
    });

    if(this.selectedoption === 'video'){
      this.userService.videoUpload(files).subscribe(data => {
        if(data ==="OK"){
        this.toast.success('Successfully Uploaded', '', { progressBar: true });
        this.makeEmpty();
        this.reloadPage();
        }
        else{
          this.toast.error('File Not Support To Upload', '', { progressBar: true });
          this.makeEmpty();
         }
        
        });
    }
    else{
    this.userService.imageupload(files).subscribe(videodata => {
      if(videodata ==="OK"){
      this.toast.success('Successfully Uploaded', '', { progressBar: true });
      this.makeEmpty();
      this.reloadPage();
      }
      else if(videodata ==="Filename Already exists"){
        this.toast.error('Filename Already exists', '', { progressBar: true });
        this.makeEmpty();
      }
      else{
        this.toast.error('File Not Support To Upload', '', { progressBar: true });
        this.makeEmpty();
       }
      
      });
    }
  }
}

reloadPage(){
 
 this.userService.signatureimages().subscribe(signdata => {
   this.signatureImage = signdata;
    if (signdata==""){
        this.alertClose("Signature Images are Empty ");
      }
      if(this.searchValue){
        var searchvalue ={
          "searchinput":this.searchValue
        }
        this.userService.getSearchImage(searchvalue).subscribe(search_data => {
          this.serachImage = search_data;
          this.showSearchData(search_data);
        })
      }
   this.userService.logoimage().subscribe(logodata => {
   this.logoImage = logodata;
   if (logodata==""){
       this.alertClose("Logo Images are Empty ");
     }
    })

   this.userService.otherimages().subscribe(otherdata => {
   this.otherImage = otherdata;
   if (otherdata==""){
     this.alertClose("Other Images are Empty ");
    }
   })

   this.userService.videoFiles().subscribe(videodata => {
    this.videoFiles = videodata;
    if (videodata==""){
        this.alertClose("Video Files are Empty ");
       }
     })
 })
      
}

showsidebar:boolean = false
openrightsidebar(){
  this.selectedoption='logo'
  this.showsidebar=!this.showsidebar;
}

makeEmpty(){
  this.selectedoption='logo'
  this.careimagearr1 =[]
  this.urls = []
  this.LockDD=false
  this.openrightsidebar()
}  

//delete image and video functionality code..........................

del_id:any;
openModalDelete(template: TemplateRef<any>,data) {
    this.modalRef = this.modalService.show(template);
    this.del_id=data;
    
}

deleteimage() {
  this.userService.deleteimage(this.del_id.id).subscribe(data => { 
    if(data == 'deleted successfully'){
      this.toast.success("Deleted Successfully", " ", {progressBar: true });  
    }
   this.deleteReloadPage();
       })
}
deleteReloadPage(){
  this.deleteLogoImages();
}

deleteLogoImages() {
    this.userService.logoimage().subscribe(data => {
    this.logoImage = data;
      for(var i=0;i<this.logoImage.length;i++){
      var newkey="S_No"
      var newvalue=i+1
      var name ="File Name"
      var v = this.logoImage[i].file.split("/")
      var value = v[v.length-1]
      this.logoImage[i][newkey]=newvalue;
      this.logoImage[i][name] = value;
      }
      if(this.searchValue){
          var searchvalue ={
          "searchinput":this.searchValue
        }
      
        this.userService.getSearchImage(searchvalue).subscribe(searcdata => {
         
          this.serachImage = searcdata;
          this.showSearchData(searcdata);
        })
      }
    })
  this.deleteSignatureImages() ;
}

deleteSignatureImages() {
    this.userService.signatureimages().subscribe(data => {
    this.signatureImage = data;
      for(var i=0;i<this.signatureImage.length;i++){
        var newkey="S_No"
        var newvalue=i+1
        var name ="File Name"
        var v = this.signatureImage[i].file.split("/")
        var value = v[v.length-1]
        this.signatureImage[i][newkey]=newvalue;
        this.signatureImage[i][name] = value;
        }
    })
  this.deleteOtherImages();
}

deleteOtherImages() {
    this.userService.otherimages().subscribe(data => {
    this.otherImage = data;
      for(var i=0;i<this.otherImage.length;i++){
        var newkey="S_No"
        var newvalue=i+1
        var name ="File Name"
        var v = this.otherImage[i].file.split("/")
        var value = v[v.length-1]
        this.otherImage[i][newkey]=newvalue;
        this.otherImage[i][name] = value;
        }
    })
  this.deletevideo();
}

deletevideo() {
  this.userService.videoFiles().subscribe(data => {
  this.videoFiles = data;
    for(var i=0;i<this.videoFiles.length;i++){
      var newkey="S_No"
      var newvalue=i+1
      var name ="File Name"
      var v = this.videoFiles[i].file.split("/")
      var value = v[v.length-1]
      this.videoFiles[i][newkey]=newvalue;
      this.videoFiles[i][name] = value;
      }
  })
}
// search box code functionality code...........

searchShow:boolean=false;
searchShowEmpty:boolean=false
serachImage:any;
searchValue:any;
getSearchBoxValue(value){
  if(!value){
    this.allCheckBox=true; 
    this.searchShow=false;
    this.searchShowEmpty=false
    this.signatureCheckBox=false;
    this.logoCheckBox=false;
    this.otherCheckBox=false; 
    this.videoCheckBox=false;
  }
  else{
    var searchvalue ={
      "searchinput":value
    }
   
    this.userService.getSearchImage(searchvalue).subscribe(data => {
      this.serachImage = data;
      this.showSearchData(data);
    })
  }
}

getSearchBoxValueByPaste(event: ClipboardEvent) {
  var pastedText = event.clipboardData.getData('text');
  this.getSearchBoxValue(pastedText);
}

showSearchData(value){
  if(value == ""){
    this.searchShowEmpty=true
    this.searchShow=false;
    this.allCheckBox=false;
    this.signatureCheckBox=false;
    this.logoCheckBox=false;
    this.otherCheckBox=false;
    this.videoCheckBox=false;
  }
  else{
    this.searchShow=true;
    this.searchShowEmpty=false;
    this.allCheckBox=false;
    this.signatureCheckBox=false;
    this.logoCheckBox=false;
    this.otherCheckBox=false; 
    this.videoCheckBox=false;
  }
}
}
 

sonar-project.properties

sonar.host.url=http://localhost:9000
	sonar.login=admin
	sonar.password=admin
	sonar.projectKey=dccpUI
	sonar.projectName=dccpUI
	sonar.projectVersion=1.0
	sonar.sourceEncoding=UTF-8
	sonar.sources=src/app
	sonar.exclusions=**/node_modules/**
	#sonar.tests=src
	#sonar.test.inclusions=**/*.spec.ts
	#sonar.typescript.lcov.reportPaths=coverage/lcov.info


sonarqube_ui.bat

set path=%path%;.;C:\Program Files\Java\jdk1.8.0_102\bin;D:\sonar-scanner-4.0.0.1744-windows\bin;D:\apache-maven-3.6.1-bin\apache-maven-3.6.1\bin;
sonar-scanner.bat -Dsonar.projectKey=dccpUI -Dsonar.sources=./src/app -Dsonar.host.url=http://localhost:9000


sq.bat

sonar-scanner.bat -Dsonar.projectKey=dccp-ui_angular -Dsonar.sources=src/app -Dsonar.host.url=http://localhost:9000



togglebutton:
html

<dxi-column dataField="Status" dataType="string" cellTemplate="cellTemplatetypeid">
</dxi-column>

<div *dxTemplate="let data of 'cellTemplatetypeid'">
	<label class="switch" *ngIf="togglevalue(data.value)">
                <input type="checkbox" id="togBtn" (click)="statustoggle(data.data.useraccountid)"
                              [(ngModel)]="togglestatus">
                        <div class="slider round">
                              <!--ADDED HTML -->
                              <span class="off">DeActive</span>
                              <span class="on">Active</span>
                              <!--END-->
                        </div>
         </label>
</div>


scss

.switch {
	position: relative;
        display: inline-block;
        width: 65px;
        height: 25px;
        top: -4px;
}

.slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #34b99a;
        -webkit-transition: .4s;
        transition: .4s;
      }
      
      .slider:before {
        position: absolute;
        content: "";
        height: 20px;
        width: 20px;
        top:2px;
        left: 3px;
        bottom: 4px;
        background-color: white;
        -webkit-transition: .4s;
        transition: .4s;
      }
      
      input:checked + .slider {
        background-color: #2196F3;
      }
      
      input:focus + .slider {
        box-shadow: 0 0 1px #6ebba9; 
      }
      
      input:checked + .slider:before {
        -webkit-transform: translateX(55px);
        -ms-transform: translateX(55px);
        transform: translateX(55px);
        left: -21px;
      }
      
    
      /*------ ADDED CSS ---------*/
      .on
      {
        display: none;
      }
      
      .on
      {
        /* background-color: #34b99a !important; */
        color: white;
        position: absolute;
        transform: translate(-50%,-50%);
        top: 50%;
        left: 34%;
        font-size: 9px;
      }
       .off{
        /* background-color: #039cfd !important; */
        color: white;
        position: absolute;
        transform: translate(-50%,-50%);
        top: 50%;
        left: 69%;
        font-size: 8px;
      }
      .slider {
        background-color: #494b4ed9 !important;
         top:10px;
         width:58px;
    }
      input:checked + .slider {
        background-color: #6eacaf !important; 
        top:10px;
        width:58px;
    }
    
      
      input:checked+ .slider .on
      {display: block;}
      
      input:checked + .slider .off
      {display: none;}
      
      /*--------- END --------*/
      
      /* Rounded sliders */
      .slider.round {
        border-radius: 34px;
        // width:75px!important;
        height:25px!important;
      }
      
      .slider.round:before {
        border-radius: 50%;}

ts

togglestatus:any;
togglevalue(value){
if(value=="Active"){
  this.togglestatus=true
}
else{
  this.togglestatus=false
}
return true
}

statustoggle(value){
  var test={
    "id":value
  }
 
this.userService.manageuserstatus(test).subscribe(data => {
 
})
}



business-unit-document.component.html



<div class="card card-body">
  <tabset>
   <tab heading = "Business Unit Document " id="tab1"><div class="row">
     <div class="col-lg-12">
       <div class="card">
         <div class="card-body">
           <div class="d-md-flex align-items-center">
             <div>
               <h4 class="card-title">Business Unit Document</h4>
               <h5 class="card-subtitle"> </h5>
             </div>

           </div>
                       <div class="form-group row">
            </div>
           <div class="form-group row">
            <label class="col-lg-2 col-xs-2 text-left control-label col-form-label">Business Unit </label>
            <div class="col-lg-3 col-xs-2 text-left " >
              <select required name="unitname" (change)="businessunit($event)" [(ngModel)]="unitname"
               class="custom-select form-control"> 
               
                <option *ngFor="let item of businessUnit" [value]="item.BuId" >
                  {{item.BussinessUnitCode}} - {{item.BussinessUnitName}}</option>
              </select>
            </div>
             <label class="col-lg-2 col-xs-2 text-right control-label col-form-label">Mode</label>
            <div class="col-lg-3 col-xs-2 text-right " >
              <select  name="modee" (change)="doccodechange($event)" [(ngModel)]="modee" class="custom-select form-control">
              <option value='all'> All</option>
              <option value='staging'>Staging</option>
              <option value='production'>Production</option>
              </select>
          
            </div>

            </div> 

           <dx-data-grid id="gridContainer" [dataSource]="clientList" [columnAutoWidth]="true" [showBorders]="false">
            <dxo-header-filter [visible]="true"></dxo-header-filter>
            <dxo-search-panel [visible]="true" width="250"></dxo-search-panel>
            <dxo-paging [pageSize]="10"></dxo-paging>
            <dxo-pager [showPageSizeSelector]="true" [allowedPageSizes]="[5, 10, 20]" [showInfo]="true">
            </dxo-pager>
            <dxi-column dataField="name" [allowHeaderFiltering]="false"  cellTemplate="cellTemplateImage" caption="System Name">
            </dxi-column>
            <dxi-column dataField="doccode" caption="Doc Code" dataType="string">
            </dxi-column>
            <dxi-column dataField="EffectiveDate"[allowHeaderFiltering]="false" caption="Effective Date" dataType="date" format="MM-dd-yyyy">
            </dxi-column>
            <dxi-column dataField="ExpiryDate" [allowHeaderFiltering]="false" caption="Expiry Date" dataType="date" format="MM-dd-yyyy">
            </dxi-column>
            <dxi-column dataField="active_status"  caption="Status" cellTemplate="cellTemplateStatus">
            </dxi-column>
            <dxi-column dataField="CreatedBy" [allowHeaderFiltering]="false" caption="Created By" dataType="string" [allowSearch]="false" >
            </dxi-column>
            <dxi-column type="buttons"
            headerCellTemplate="Actions" >
                <dxi-button template="formproductId">
                    <div *dxTemplate="let frmid of 'formproductId'" >
                        <a (click)="btnEditClick(frmid)" style="padding-right: 5px;">
                          <span class="mdi mdi-file-lock" style="font-size: 29px;color: rgb(6, 109, 226); cursor:pointer;" tooltip="Editor"  placement="top" container="body" ></span>
                        </a>
                        <a (click)="btnPDFClick(frmid)" style="padding-right: 5px;">
                          <span class="mdi mdi-file-pdf" [ngStyle]="frmid.data.formtypeid===1 ||frmid.data.formtypeid===2  ? {'color': 'rgb(6, 109, 226)', 'cursor':'pointer'} : {'color': 'rgb(135,206,250)', 'cursor':'default'}" style="font-size: 29px;color: rgb(6, 109, 226); cursor:pointer;" tooltip="PDF"   placement="top" container="body"></span>
                        </a>
                        <a (click)="btnHTMLClick(frmid)" style="padding-right: 5px;">
                          <span class="mdi mdi-file-check" [ngStyle]="frmid.data.formtypeid===2 ? {'color': 'rgb(6, 109, 226)', 'cursor':'pointer'} : {'color': 'rgb(135,206,250)', 'cursor':'default'}"  style="font-size: 29px;"   tooltip="HTML"  placement="top" container="body" ></span>
                        </a>

                        <a (click)="btnJSONClick(frmid)" style="padding-right: 5px;">
                          <span class="mdi mdi-clipboard-text" [ngStyle]="frmid.data.formtypeid===1 ||frmid.data.formtypeid===3 ? {'color': 'rgb(6, 109, 226)', 'cursor':'pointer'} : {'color': 'rgb(135,206,250)', 'cursor':'default'}" style="font-size: 29px;" tooltip="JSON"   placement="top" container="body"></span>
                        </a>
                    </div>
                </dxi-button>
            </dxi-column>

            <dxo-pager [showPageSizeSelector]="true" [allowedPageSizes]="[8, 12, 20]"></dxo-pager>
            <div *dxTemplate="let data of 'cellTemplateImage'">
              <img [src]="apiurl + data.value" alt="" style="height: 80px;">
            </div>
            <div *dxTemplate="let data of 'cellTemplatetypeid'">

              <span *ngIf="data.value == 1">Structured<br> Document</span>
              <span *ngIf="data.value == 2">Unstructured<br> Document</span>
              <span *ngIf="data.value == 3">Survey</span>

            </div>
            <div *dxTemplate="let data of 'cellTemplateStatus'">
            
              <span *ngIf="data.value == 'active'"><span class="mdi mdi-check mdi-36px" style="color: rgb(6, 109, 226);padding: 0px;"></span></span>
              <span *ngIf="data.value == 'Inactive'"></span>
              
  
            </div>
            
            <div *dxTemplate="let data of 'cellTemplateImage'">
                <img *ngIf="data.data.formtypeid === 1" class='logo' src='./assets/images/strucdocicnn.png' alt="" tooltip="Structured Document"  placement="top" container="body">
                <img *ngIf="data.data.formtypeid === 2" class='logo' src='./assets/images/unstrucdocicn.png' alt="" tooltip="Unstructured Document"  placement="top" container="body" >
                <img *ngIf="data.data.formtypeid === 3" class='logo' src='./assets/images/surveyicn.png' alt="" tooltip="Survey"  placement="top" container="body" >
                <img *ngIf="data.data.production_status === 'production'"  class='color' src='./assets/images/green.png' alt="" tooltip="Production"   placement="top" container="body" >
                 <img *ngIf="data.data.production_status === 'staging'"  class='color' src='./assets/images/orange.png' alt="" tooltip="Staging to Production"  placement="top" container="body" >

              <div style="display: inline-block;">
                  <h6>{{data.data.name}}</h6>
                  <h6>{{data.data.masterdocumentname}}</h6>
                  <h6>{{data.data.Documenttitle}}</h6>
                </div>

              </div>
          </dx-data-grid>
         </div>
       </div>
     </div>
   </div></tab>

   <tab heading = "Common Document " id="tab2" ><div class="row">
    <div class="col-lg-12">
      <div class="card">
        <div class="card-body">
          <div class="d-md-flex align-items-center">
            <div>
              <h4 class="card-title"> Common Document</h4>
              <h5 class="card-subtitle"> </h5>
            </div>

          </div>
                  <div class="form-group row">
                </div>
          <dx-data-grid id="gridContainer" [columnAutoWidth]="true"  [dataSource]="dclientList" [showBorders]="false">
           <dxo-filter-row [visible]="false"></dxo-filter-row>
            <dxo-header-filter [visible]="true"></dxo-header-filter>
           <dxo-search-panel [visible]="true" width="250"></dxo-search-panel>
           <dxo-paging [pageSize]="10"></dxo-paging>
           <dxo-pager [showPageSizeSelector]="true" [allowedPageSizes]="[5, 10, 20]" [showInfo]="true">
           </dxo-pager>

            <dxi-column dataField="name" [allowHeaderFiltering]="false" cellTemplate="cellTemplateImage" caption="System Name"  >
         </dxi-column>
         <dxi-column dataField="doccode" caption="Doc Code" dataType="string" width="150"  >
         </dxi-column>
          <dxi-column dataField="approveddate" [allowHeaderFiltering]="false" caption="Approved Date "  dataType="date"  format="MM-dd-yyyy HH:MM" width="180">
         </dxi-column>
         <dxi-column dataField="CreatedBy" [allowHeaderFiltering]="false"  caption="CreatedBy" width="180" >
         </dxi-column>
          <dxi-column type="buttons"
         headerCellTemplate="Actions" width="150">
         
             <dxi-button template="formproductId">
                 <div *dxTemplate="let frmid of 'formproductId'" >
                     <a (click)="btnEditClick(frmid)" style="padding-right: 5px;">
                       <span class="mdi mdi-file-lock" style="font-size: 29px;color: rgb(6, 109, 226); cursor:pointer;" tooltip="Editor"  placement="top" container="body" ></span>
                     </a>
                     <a (click)="btnPDFClick(frmid)" style="padding-right: 5px;">
                       <span class="mdi mdi-file-pdf" [ngStyle]="frmid.data.formtypeid===1 ||frmid.data.formtypeid===2  ? {'color': 'rgb(6, 109, 226)', 'cursor':'pointer'} : {'color': 'rgb(135,206,250)', 'cursor':'default'}" style="font-size: 29px;color: rgb(6, 109, 226); cursor:pointer;" tooltip="PDF"   placement="top" container="body" ></span>
                     </a>

                     <a (click)="btnHTMLClick(frmid)" style="padding-right: 5px;">
                       <span class="mdi mdi-file-check" [ngStyle]="frmid.data.formtypeid===2 ? {'color': 'rgb(6, 109, 226)', 'cursor':'pointer'} : {'color': 'rgb(135,206,250)', 'cursor':'default'}"  style="font-size: 29px;"   tooltip="HTML"  placement="top" container="body" ></span>
                     </a>
                     <a (click)="btnJSONClick(frmid)" style="padding-right: 5px;">
                       <span class="mdi mdi-clipboard-text" [ngStyle]="frmid.data.formtypeid===1 ||frmid.data.formtypeid===3 ? {'color': 'rgb(6, 109, 226)', 'cursor':'pointer'} : {'color': 'rgb(135,206,250)', 'cursor':'default'}" style="font-size: 29px;" tooltip="JSON"   placement="top" container="body"></span>
                     </a>
                 </div>
                 
             </dxi-button>
         </dxi-column>
           <dxo-pager [showPageSizeSelector]="true" [allowedPageSizes]="[8, 12, 20]"></dxo-pager>
           <div *dxTemplate="let data of 'cellTemplateImage'">
             <img [src]="apiurl + data.value" alt="" style="height: 50px;">
           </div>
            <div *dxTemplate="let data of 'cellTemplateImage'">
           <img *ngIf="data.data.formtypeid === 1" class='logo' alt="" src='./assets/images/strucdocicnn.png' tooltip="Structured Document"   placement="top" container="body">
           <img *ngIf="data.data.formtypeid === 2" class='logo' alt="" src='./assets/images/unstrucdocicn.png' tooltip="Unstructured Document"   placement="top" container="body">
           <img *ngIf="data.data.formtypeid === 3" class='logo' alt="" src='./assets/images/surveyicn.png' tooltip="Survey"   placement="top" container="body">

            <div style="display: inline-block;">
           <h6>{{data.data.name}}</h6>
            <h6>{{data.data.masterdocumentname}}</h6>
<h6>{{data.data.Documenttitle}}</h6>
           </div>
         </div>
         </dx-data-grid>
        </div>
      </div>
    </div>
  </div></tab>

   <tab heading = "Search Document" id="tab3"><div class="row">
    <div class="col-lg-12">
      <div class="card">
        <div class="card-body">
          <div class="d-md-flex align-items-center">
            <div>
              <h4 class="card-title">Search Document</h4>
              <h5 class="card-subtitle"> </h5>
            </div>

          </div>
          <dx-data-grid id="gridContainer" [columnAutoWidth]="true" [dataSource]="vclientList" [showBorders]="false">
            <dxo-filter-row [visible]="false"></dxo-filter-row>
            <dxo-header-filter [visible]="false"></dxo-header-filter>
            <dxo-search-panel [visible]="true" width="250"></dxo-search-panel>
            <dxo-paging [pageSize]="10"></dxo-paging>
            <dxo-pager [showPageSizeSelector]="true" [allowedPageSizes]="[5, 10, 20]" [showInfo]="true">
            </dxo-pager>
            <dxi-column dataField="sno" dataType="string">
            </dxi-column>
            <dxi-column dataField="SystemName" dataType="date"  format="MM-dd-yyyy HH:MM">
            </dxi-column>
            <dxi-column dataField="DocCode" dataType="string">
            </dxi-column>
            <dxi-column dataField="ApprovalStartDate" dataType="date"  format="MM-dd-yyyy HH:MM">
            </dxi-column>
            <dxi-column dataField="ApprovalEndDate" dataType="date"  format="MM-dd-yyyy HH:MM" >
            </dxi-column>
            <dxo-pager [showPageSizeSelector]="true" [allowedPageSizes]="[8, 12, 20]"></dxo-pager>
            <div *dxTemplate="let data of 'cellTemplateImage'">
              <img [src]="apiurl + data.value" alt="" style="height: 50px;">
            </div>

          </dx-data-grid>
        </div>
      </div>
    </div>
  </div></tab>



 </tabset>
</div>



business-unit-document.component.ts

import { Component, OnInit } from '@angular/core';
import { environment } from '../../../../../environments/environment';
import ArrayStore from 'devextreme/data/array_store'
import { UserService } from '../../../../shared/services/user.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-business-unit-document',
  templateUrl: './business-unit-document.component.html',
  styleUrls: ['./business-unit-document.component.scss']
})
export class BusinessUnitDocumentComponent implements OnInit {
  constructor(private userService: UserService, private router: Router) { }
  
ngOnInit() {
  this.getClientList();
  
  // this.getMyApprovalPendingData();
}

clientList: any;
dclientList: any;
flagvalue:any;
vclientList:any;
status:any;
dataSource: ArrayStore;
getClientList() {
    // this.userService.getCommonDoctoButable2Data().subscribe(data => {
    //   this.clientList1 = data;
    //   console.log('document2', this.clientList1);
      this.getBusinessUnitData()
      this.getBusinessUnitDocumentData()
  }

 businessunit(e) {
      this.unitname=e.target.value
      console.log("hgjfgggggg", e.target.value)
       this.dataSource = new ArrayStore()
      console.log("buname",  this.unitname)
      this.getBusinessUnitDocumentData()
  }

getBusinessUnitDocumentData() {
  console.log("mode",this.modee)
  console.log("ststua",this.unitname)
   this.dataSource = new ArrayStore()
   var value ={
    "unitname":this.unitname,
    "mode":this.modee
  }
  console.log("unitvalue value",value)
  this.userService.getBusinessUnitDocumentData(value).subscribe(data => {
    this.clientList = data;
    console.log('Businessunit document', this.clientList );
     this.getcommonDocumentData();
  })
}

// getcommonDocumentData() {
//   this.userService.getcommonDocumentData().subscribe(data => {
//     this.dclientList = data;
//     console.log('this.dclientList', this.dclientList);
//   })
// }
mode:any;
formtype: any;
getcommonDocumentData() {
  this.userService.getcommonDocumentData().subscribe(data => {
    this.dclientList = data;
    console.log("dataaaa", data[0].formtypeId)
    
this.getBusinessUnitData();
    console.log(" Common Document", this.dclientList)

  })
}
modee:any='all';
Common:any=0 ;
doccodechange(e)
{
  // console.log("mode", this.status)
   console.log("eventBU", e)
    this.Common = e.target.value
  
    console.log("mode", this.modee)
    this.getBusinessUnitDocumentData()
    //  if(this.modee == -1)
    //  {
    //    this.modee = 0
    //    this.getBusinessUnitDocumentData()
    //  }
    //  else if(this.modee == 0)
     
    // {
    //   this.Common="staging"
    //   this.getBusinessUnitDocumentData()
    // }
    // else if(this.modee == 1)
    // {
    //   this.Common="production"
    //   this.getBusinessUnitDocumentData()
    // }
    //this.getcommonDocumentData()
}
 businessUnit: any = [];
  // docCode: any = [];
  unitname: any= 0;
  createdefault: any;
  data:any;
  getBusinessUnitData() {
    console.log("bussinessUnit called")
    this.userService.getBusinessUnitData().subscribe(data => {
      const map = new Map();
      console.log("fstvalue", data[0].BussinessUnitName)
      var fstvalue="All"
 this.businessUnit.push({BuId:"0",
  BussinessUnitName: fstvalue,
  BussinessUnitCode: "All"

 });
      for (const item of data) {
        if (!map.has(item.BussinessUnitCode)) {
          map.set(item.BussinessUnitCode, true);
          this.businessUnit.push({
            BuId: item.BuId,
            BussinessUnitCode: item.BussinessUnitCode,
            BussinessUnitName: item.BussinessUnitName,
            
          });
        }

      }
      console.log("bussineUnit ", this.businessUnit)
    })
  }

api_url: any = environment.swagss;
downloadlink(pdfid) {
  var tablename="formproduct"
  this.userService.downloadPDF(pdfid,tablename).subscribe(
    (res) => {
      console.log("entering", res)
      
       if (this.name === "html") {
        console.log("datahtml", res.html)
        if (res.html === "Not Found") {
          alert("HTML file not found for the selected document. Please try again later.");

        }
        else {
          // var fileURL = URL.createObjectURL(res.pdf);

          let blob: any = new Blob([res.blob()], { type: "application/pdf;" });
          const url = window.URL.createObjectURL(blob);
          window.open(url);        }
      }
      else if (this.name === "json") {
        if (res.Actjson === "Not Found") {
          alert("JSON not found for the selected document. Please try again later.");
 }
        else {
          var myjson = JSON.stringify(res.Actjson, null, 2);
          console.log(myjson);
          var xee = window.open();
          xee.document.open();
          xee.document.write('<html><body><pre>' + myjson + '</pre></body></html>');
          xee.document.close();
        }
      }
  }
  );
}

//Button click events
pdfid: any
name: any
btnPDFClick(event) {
  console.log(event.data.formproductId)
  console.log("event", event)
  console.log("formtypeid", event.data.formtypeid)
  console.log("formtypeid", this.formtype)

  if (event.data.formtypeid === 1) {

    console.log("idcheck", event.data.formproductId)
    var tablename="formproduct"
    this.userService.downloadPDFstructdoc(event.data.formproductId,tablename).subscribe(
      response => {

        let blob: any = new Blob([response], { type: "application/pdf;" });
        const url = window.URL.createObjectURL(blob);
        window.open(url);
      },
        error =>{
          alert("PDF file not found for the selected document. Please try again later.")
        })
      }
  

  if (event.data.formtypeid === 2 || event.data.formtypeid === 3)

  // this.downloadlink(pdfid)
  // this.name = "pdf"
  {
    this.userService.DownloadPDFFile(event.data.formproductId,tablename).subscribe(
      responsedf => {
        let blob: any = new Blob([responsedf], { type: 'application/PDF;' });
        const url = window.URL.createObjectURL(blob);
        window.open(url);
      },
      error =>{
        alert("PDF file not found for the selected document. Please try again later.")
      })
     
  }

}

btnHTMLClick(event) {
  console.log(event.data.formproductId)

  console.log("formtypeId",event.data.formtypeid)
  if (event.data.formtypeid === 2) {
    var pdfid = event.data.formproductId
    this.downloadlink(pdfid)
    this.name = "html"
  }
  else {
    console.log("diabled")
  }


}
typeid: any;
btnJSONClick(event) {
  console.log(event.data.formproductId)
  console.log("events", event.data.formtypeid)
  console.log("formtypeId", event)
  this.typeid = event.data.formtypeid

  if (event.data.formtypeid === 1 || event.data.formtypeid === 3) {
    var pdfid = event.data.formproductId
    this.downloadlink(pdfid)
    this.name = "json"

  }

}
btnEditClick(event) {
  var obje = {
    "routerpage":"businessunit_doc",
    "tablename":"library",
    "content":"notEditable",
    "designid": event.data.formproductId,
    "mode": "edit",
    "formtypeid": event.data.formtypeid
  }
  console.log("obje",obje)
  this.userService.changeNav(obje)
  // this.router.navigate([`/designbuilder/inprogress/edit/${obje.designid}`]);

  console.log("sending id", this.formtype)
  if (event.data.formtypeid === 1) this.router.navigate([`/designbuilder`]);

  else if (event.data.formtypeid === 2) this.router.navigate([`/htmldocbuilder`]);

  else if (event.data.formtypeid === 3) this.router.navigate([`/surveybuilder`]);
}

 

  buid: any;
  docid: any;
  documenname: any;
  businessunitID: any;
  createDocName(e) {
    // console.log("BU", this.businessUnitdata);
    // console.log("DC", this.documentCode);
    console.log("eventBU", e.target.value)
    this.businessunitID = e.target.value
  }
}


share.html

<div class="air__layout__content bg-light">
  <div class="air__utils__content">
    <div class="row">
      <div class="col-lg-12" style="margin-top: -1rem;">
        <button class="btn btn-success text-nowrap float-left" type="button"
          style="z-index:99;background-color: #6EACAF !important;width: max-content;" (click)="type='document_compose'">
          Create New
        </button>
        <dx-select-box [dataSource]="bulist" displayExpr="name" valueExpr="BuId"
          (onValueChanged)="onValueChanged($event)" placeholder="Select BU"
          style="width: 160px;position: absolute;left: 10%;"></dx-select-box>
        <div class="air__topbar__searchContainer float-right" style="margin-bottom: 10px;">
          <em class="air__topbar__searchIcon fe fe-search"></em>
          <input id="button-alignment" class="air__topbar__searchInput" type="text"
            placeholder="Start typing to search..." [(ngModel)]="searchText" (keyup)="getSearchBoxValue(searchText)" />
        </div>

        <div class="card" style="clear: both;">

          <a href="javascript: void(0);"
            style="bottom: calc(50% + 120px); background-color: #2d8d99;color:#FFF !important; "
            class="air__sidebar__toggleButton air__sidebar__actionToggle" (click)="openrightsidebar()"
            data-toggle="tooltip" data-placement="left" title="Comments" *ngIf="documentname">
            {{overallcommentcount}} &nbsp;<em class="fe fe-message-circle text-white"></em>
          </a>

          <div class="air__menuTop__backdrop air__menuTop__mobileActionToggle"></div>
          <div class="air__sidebar kit__customScroll" *ngIf="showsidebar">
            <div class="air__sidebar__inner">
              <a href="javascript: void(0);" (click)="openrightsidebar()"
                class="air__sidebar__close air__sidebar__actionToggle fe fe-x-circle"></a>
              <h5>
                <strong>Comments</strong>
              </h5>
              <div class="cui__utils__line" style="margin-top: 2px; margin-bottom: 3px"></div>

              <div class="air__sidebar__type" style="margin: 0.2rem 0 2rem;">

                <div class="air__sidebar__type__items">
                  <div class="row">
                    <div class="col-12">

                      <div class="d-flex flex-nowrap align-items-start pt-4">
                        <div *ngIf="overallcommentcount"
                          class="kit__utils__avatar kit__utils__avatar--size32 mr-4 flex-shrink-0 align-self-start">
                          <img alt="" src="./assets/components/kit/core/img/avatars/avatar-2.png">
                        </div>
                        <div class="flex-grow-1">
                          <div class="kit__g15__contentContainer" *ngFor="let comments0 of commentslist">
                            <div class="d-flex flex-wrap mb-2">
                              <div class="mr-auto">
                                <div class="text-gray-6">
                                  <span class="text-dark font-weight-bold">{{comments0.username}}</span>
                                </div>
                              </div>
                            </div>

                            <div class="mb-3" *ngFor="let comments1 of comments0.comments">
                              {{comments1.comment}}<br>
                              {{comments1.create_date | date:'medium'}}
                              <div class="d-flex flex-nowrap align-items-start pt-4"
                                *ngFor="let comments2 of comments1.replymessage">
                                <div
                                  class="kit__utils__avatar kit__utils__avatar--size32 mr-4 flex-shrink-0 align-self-start">
                                  <img alt="" src="./assets/components/kit/core/img/avatars/avatar-2.png">
                                </div>

                                <div class="flex-grow-1">
                                  <div class="kit__g15__contentContainer">
                                    <div class="d-flex flex-wrap mb-2">
                                      <div class="mr-auto">
                                        <div class="text-gray-6">{{comments2.username}}
                                        </div>
                                        <div>{{comments2.create_date | date:'medium'}}</div>
                                      </div>
                                    </div>
                                    <div class="mb-3">{{comments2.commentmessage}}
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                            <div class="d-flex flex-wrap justify-content-start align-items-start mb-3">
                              <a class="text-blue mr-3" href="javascript: void(0);"><em
                                  class="fe fe-message-square mr-1"></em> {{comments0.count}}
                                Comments</a>
                            </div>
                          </div>

                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="card-body">
            <div class="row">

              <style type="text/css">
                .nav-pills .nav-link.active,
                .nav-pills .show>.nav-link {
                  color: #fff;
                  background-color: #8bbdbf;
                }


                .kit__messaging__dialogItem:hover,
                .kit__messaging__dialogItem--current {
                  background-color: #8bbdbf;
                  color: #FFF !important;
                }

                .kit__messaging__dialogName:hover,
                .kit__messaging__dialogItem--current {
                  background-color: #8bbdbf;
                  color: #FFF !important;
                }
              </style>

              <div class="col-lg-12 mb-1">
                <div class="row">
                  <div class="col-1 inputsecone">
                    <div class="kit__customScroll kit__messaging__dialogItems ps-container ps-theme-kit"
                      data-ps-id="0ce0e9f2-6b96-bc56-54ec-84d14598c258">
                      <div class="kit__messaging__dialogItem d-flex flex-nowrap align-items-center"
                        [ngClass]="{'kit__messaging__dialogItem--current':type=='inbox'}" tooltip="All Inbox"
                        placement="left" container="body" (click)="type='inbox';documentname='';getInbox(type); p=1">
                        <div class="">
                          <em class="fe fe-mail font-size-32 mt-1 pt-1 mr-4 px-1"
                            [ngClass]="{'text-white':type=='inbox'}"></em>
                          Inbox
                        </div>
                        <div *ngIf="inboxcount && inboxcount.Inbox && inboxcount.Inbox != 0"
                          style="position: absolute;left: 44px;top: 4px;">
                          <div class="badge badge-dark"
                            style="border-radius: 50%;height: 24px;width: 24px;line-height: 18px;font-size: x-small;">
                            {{inboxcount.Inbox}}</div>
                        </div>
                      </div>
                      <div class="kit__messaging__dialogItem d-flex flex-nowrap align-items-center"
                        [ngClass]="{'kit__messaging__dialogItem--current':type=='Archived'}" tooltip="Archive"
                        placement="left" container="body" (click)="type='Archived';documentname='';getInbox(type); p=1">
                        <div class="">
                          <em class="fe fe-archive font-size-32 mt-1 pt-1 mr-4 px-1"
                            [ngClass]="{'text-white':type=='Archived'}"></em>
                          Archive
                        </div>
                      </div>
                      <div *ngIf="role=='Designer' || role=='Admin'"
                        class="kit__messaging__dialogItem d-flex flex-nowrap align-items-center"
                        (click)="type='document';documentname='';getInbox(type); p=1" tooltip="Review" placement="left"
                        container="body" [ngClass]="{'kit__messaging__dialogItem--current':type=='document'}">
                        <div class="">
                          <em class="fe fe-plus-circle font-size-32 mt-1 pt-1 mr-4 px-1"
                            [ngClass]="{'text-white':type=='document'}"></em>
                          Review
                        </div>
                        <div *ngIf="inboxcount && inboxcount['Re-Edit'] && inboxcount['Re-Edit'] != 0"
                          style="position: absolute;left: 44px;top: 91px;">
                          <div class="badge badge-dark"
                            style="border-radius: 50%;height: 24px;width: 24px;line-height: 18px;font-size: x-small;">
                            {{inboxcount['Re-Edit']}}</div>
                        </div>
                      </div>
                      <div *ngIf="role=='Reviewer' || role=='Admin'"
                        class="kit__messaging__dialogItem  d-flex flex-nowrap align-items-center"
                        (click)="type='approved';documentname='';getInbox(type); p=1" tooltip="My Pending"
                        placement="left" container="body"
                        [ngClass]="{'kit__messaging__dialogItem--current':type=='approved'}">
                        <div class="">
                          <em class="fe fe-loader font-size-32 mt-1 pt-1 mr-4 px-1"
                            [ngClass]="{'text-white':type=='approved'}"></em>
                          Pending
                        </div>
                        <div *ngIf="inboxcount && inboxcount.Approved && inboxcount.Approved != 0"
                          style="position: absolute;left: 44px;top: 175px;">
                          <div class="badge badge-dark"
                            style="border-radius: 50%;height: 24px;width: 24px;line-height: 18px;font-size: x-small;">
                            {{inboxcount.Approved}}</div>
                        </div>
                      </div>
                      <div class="kit__messaging__dialogItem  d-flex flex-nowrap align-items-center"
                        (click)="type='Allotment1';documentname='';getInbox(type); p=1" tooltip="Approved"
                        placement="left" container="body"
                        [ngClass]="{'kit__messaging__dialogItem--current':type=='Allotment1'}">
                        <div class="">
                          <em class="fe fe-check-circle font-size-32 mt-1 pt-1 mr-4 px-1"
                            [ngClass]="{'text-white':type=='Allotment1'}"></em>
                          Approved
                        </div>
                        <div *ngIf="inboxcount && inboxcount.Allotment1 && inboxcount.Allotment1 != 0"
                          style="position: absolute;left: 44px;top: 175px;">
                          <div class="badge badge-dark"
                            style="border-radius: 50%;height: 24px;width: 24px;line-height: 18px;font-size: x-small;">
                            {{inboxcount.Allotment1}}</div>
                        </div>
                      </div>
                      <div *ngIf="role=='Admin'"
                        class="kit__messaging__dialogItem  d-flex flex-nowrap align-items-center"
                        (click)="type='Allotment';documentname='';getInbox(type); p=1" tooltip="Publish to Library"
                        placement="left" container="body"
                        [ngClass]="{'kit__messaging__dialogItem--current':type=='Allotment'}">
                        <div class="">
                          <em class="fe fe-layers  font-size-32 mt-1 pt-1 mr-4 px-1"
                            [ngClass]="{'text-white':type=='Allotment'}"></em>
                          Library
                        </div>
                        <div *ngIf="inboxcount && inboxcount.Allotment && inboxcount.Allotment != 0"
                          style="position: absolute;left: 44px;top: 260px;">
                          <div class="badge badge-dark"
                            style="border-radius: 50%;height: 24px;width: 24px;line-height: 18px;font-size: x-small;">
                            {{inboxcount.Allotment}}</div>
                        </div>
                      </div>
                      <div class="kit__messaging__dialogItem  d-flex flex-nowrap align-items-center"
                        (click)="type='Sent';documentname='';getsent(); p=1" tooltip="Sent" placement="left"
                        container="body" [ngClass]="{'kit__messaging__dialogItem--current':type=='Sent'}">
                        <div class="">
                          <em class="fe fe-send  font-size-32 mt-1 pt-1 mr-4 px-1"
                            [ngClass]="{'text-white':type=='Sent'}"></em>
                          Sent
                        </div>
                      </div>

                      <div class="ps-scrollbar-x-rail" style="left: 0px; bottom: 0px;">
                        <div class="ps-scrollbar-x" tabindex="0" style="left: 0px; width: 0px;"></div>
                      </div>
                      <div class="ps-scrollbar-y-rail" style="top: 0px; right: 0px;">
                        <div class="ps-scrollbar-y" tabindex="0" style="top: 0px; height: 0px;"></div>
                      </div>
                    </div>
                  </div>
                  <div class="col-11 inputsectwo card" style="border-radius: calc(7px - 1px);border:1px solid #e4e9f0;">
                    <ng-container *ngIf="type=='message' || type=='document_compose'">
                      <form #createDoc="ngForm" (ngSubmit)="createDocument(createDoc.value,createDoc)">
                        <div class="tab-content mt-2" id="v-pills-tabContent">

                          <div class="tab-pane fade show active" id="v-pills-profile" role="tabpanel"
                            aria-labelledby="v-pills-profile-tab">

                            <label class="text-dark text-uppercase font-weight-bold" for="input-post-title"
                              *ngIf="documentname || type=='document_compose'">Doc Name: </label>
                            <div class="dropdown searchheader mr-auto d-none d-md-block ml-3"
                              *ngIf="type=='document_compose'" style="left: 6rem;position:absolute;top: 0.2rem;">
                              <a href="#" class="dropdown-toggle text-nowrap" data-toggle="dropdown"
                                aria-expanded="false" data-offset="0,15">
                                <span class="dropdown-toggle-text text-bold" style="    text-transform: uppercase;
                font-size: 16px !important;
                font-family: 'Poppins-Regular', sans-serif;
                color: #333333;">{{documentname}} </span> </a>
                              <div class="dropdown-menu" role="menu" style="padding: 16px;">

                                <div class="air__topbar__searchContainer mb-4">
                                  <em class="air__topbar__searchIcon fe fe-search"></em>
                                  <input class="air__topbar__searchInput" name="text" type="text"
                                    [(ngModel)]="searchText" placeholder="Start typing to search..." />
                                </div>
                                <div class="dropdown-divider"></div>
                                <div class="kit__l1">
                                  <div class="text-uppercase font-size-12 mb-2 text-gray-6">Recent Files</div>
                                  <ul class="list-unstyled" style="height: 200px;overflow-y: scroll;">
                                    <li class="kit__l1__item" *ngFor="let data of searchlistdata | filter:searchText">
                                      <a class="kit__l1__itemLink">
                                        <div class="kit__l1__itemPic mr-3">
                                          <em class="kit__l1__itemIcon fe fe-file"></em>
                                        </div>
                                        <div (click)="btnEditClick(data)">
                                          <div class="text-blue">{{data.name}}</div>
                                          <div class="text-muted">{{data.formType}}</div>
                                        </div>
                                      </a>
                                    </li>
                                  </ul>
                                </div>
                              </div>
                            </div>
                            <div class="row ml-1 mt-2">
                              <div class="col-lg-4" style="padding-left: 0px;">

                                <div class="form-group mb-4">
                                  <label class="text-dark text-uppercase font-weight-bold"
                                    for="input-post-title">Subject</label>
                                  <input type="text" class="form-control" id="input-post-title" required name="subject"
                                    [(ngModel)]="documentinfo.subject" placeholder="Enter Subject title" />
                                </div>
                              </div>

                              <div class="col-lg-3" style="padding-left: 0px;">
                                <div class="form-group mb-4">
                                  <label class="text-dark text-uppercase font-weight-bold">Priority</label>
                                  <dx-select-box [items]="prioritylist" [value]="priorityselected"
                                    placeholder="Select priority" [showClearButton]="true"
                                    [(ngModel)]="priorityselected" name="priority" required>
                                  </dx-select-box>
                                </div>
                              </div>
                              <div class="col-lg-2" style="padding-left: 0px;">
                                <div class="form-group mb-4">
                                  <label class="text-dark text-uppercase font-weight-bold">Assign for</label>
                                  <dx-select-box [items]="assignforlist" placeholder="Select Assign for"
                                    [showClearButton]="true" name="assignfor" [(ngModel)]="assignfor" required>
                                  </dx-select-box>
                                </div>
                              </div>

                              <div class="col-lg-3">
                                Add Member: Share With
                                <em class="fe fe-corner-right-up"></em>
                                <div class="kit__utils__avatarGroup">
                                  <a *ngFor="let data of selectedname"
                                    class="activeborder kit__utils__avatar kit__utils__avatar--rounded" style="    line-height: 35px;
                                    font-weight: bold;text-transform: uppercase;
                                    color: #6eacaf !important;" tooltip="{{data.name}}">
                                    <i class="fa fa-times removeuser" aria-hidden="true"
                                      (click)="removeuser(data.id)"></i>
                                    {{data.firstletters}}
                                  </a>
                                  <a class="kit__utils__avatarGroupAdd" (click)="addmember(userslist)"
                                    style="border-radius: 50%;margin-left: 0px;">
                                    <em class="fe fe-plus"></em>
                                  </a>
                                </div>
                              </div>
                            </div>

                            <div class="form-group mb-4">
                              <div>
                                <label class="text-dark text-uppercase font-weight-bold">Add Description</label>
                                <dx-html-editor [height]="194" [(valueType)]="editorValueType" [(ngModel)]="description"
                                  required name="description">
                                  <dxo-toolbar>
                                    <dxi-item formatName="undo"></dxi-item>
                                    <dxi-item formatName="redo"></dxi-item>
                                    <dxi-item formatName="separator"></dxi-item>
                                    <dxi-item formatName="size"
                                      [formatValues]="['8pt', '10pt', '12pt', '14pt', '18pt', '24pt', '36pt']">
                                    </dxi-item>
                                    <dxi-item formatName="font"
                                      [formatValues]="['Arial', 'Courier New', 'Georgia', 'Impact', 'Lucida Console', 'Tahoma', 'Times New Roman', 'Verdana']">
                                    </dxi-item>
                                    <dxi-item formatName="separator"></dxi-item>
                                    <dxi-item formatName="bold"></dxi-item>
                                    <dxi-item formatName="italic"></dxi-item>
                                    <dxi-item formatName="strike"></dxi-item>
                                    <dxi-item formatName="underline"></dxi-item>
                                    <dxi-item formatName="separator"></dxi-item>
                                    <dxi-item formatName="alignLeft"></dxi-item>
                                    <dxi-item formatName="alignCenter"></dxi-item>
                                    <dxi-item formatName="alignRight"></dxi-item>
                                    <dxi-item formatName="alignJustify"></dxi-item>
                                    <dxi-item formatName="separator"></dxi-item>
                                    <dxi-item formatName="color"></dxi-item>
                                    <dxi-item formatName="background"></dxi-item>
                                  </dxo-toolbar>
                                  <p></p>
                                </dx-html-editor>
                              </div>
                            </div>
                            <div class="form-group">
                              <button class="btn btn-success btn-with-addon text-nowrap" type="submit"
                                [disabled]="createDoc.invalid || selectedname.length == 0"
                                style="background-color: #6EACAF !important;">
                                <span class="btn-addon">
                                  <em class="btn-addon-icon fe fe-navigation"></em>
                                </span>
                                Share & Post
                              </button>
                            </div>
                          </div>

                          <div class="tab-pane fade" id="v-pills-messages" role="tabpanel"
                            aria-labelledby="v-pills-messages-tab">
                            Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem
                            Ipsum has been the industry's standard dummy text ever since the 1500s, when an
                            unknown printer took a galley of type and scrambled it to make a type specimen
                            book. It has survived not only five centuries, but also the leap into electronic
                            typesetting, remaining essentially unchanged. It was popularised in the 1960s
                            with the release of Letraset sheets containing Lorem Ipsum passages, and more
                            recently with desktop publishing software like Aldus PageMaker including
                            versions of Lorem Ipsum.
                          </div>

                          <div class="tab-pane fade" id="v-pills-settings" role="tabpanel"
                            aria-labelledby="v-pills-settings-tab">
                            Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem
                            Ipsum has been the industry's standard dummy text ever since the 1500s, when an
                            unknown printer took a galley of type and scrambled it to make a type specimen
                            book. It has survived not only five centuries, but also the leap into electronic
                            typesetting, remaining essentially unchanged. It was popularised in the 1960s
                            with the release of Letraset sheets containing Lorem Ipsum passages, and more
                            recently with desktop publishing software like Aldus PageMaker including
                            versions of Lorem Ipsum.
                          </div>

                        </div>
                      </form>

                      <ng-template #userslist>
                        <div class="container popupbg"
                          style="padding: 0px;border-radius: 25px;background-color: white;">
                          <div class="modal-header">
                            <h5 class="heading-3">Users</h5>
                            <a type="button" class="close pull-right" style="background-color: transparent !important;"
                              aria-label="Close" (click)="closepopup()">
                              <span aria-hidden="true" style="color: #fff;">&times;</span>
                            </a>
                          </div>
                          <div class="popup" style="padding: 20px;">
                            <div class="air__topbar__searchContainer" style="margin-bottom: 10px;">
                              <em class="air__topbar__searchIcon fe fe-search"></em>
                              <input id="button-alignment0" class="air__topbar__searchInput" type="text"
                                placeholder="Start typing to search..." [(ngModel)]="searchText0"
                                (keyup)="userlistsearch($event)" />
                            </div>
                            <div class="content" style="height: 200px; overflow-y: scroll;">
                              <label *ngFor="let data of userlist; let i = index;" class="kit__utils__avatarGroup">
                                <a [ngClass]="getactiveuser(data.useraccountId) ? 'activeborder' : ''"
                                  style="border-radius: 100px;margin-right: 5px;">
                                  <div id="profileImage" placement="top"
                                    (click)="getactivename(data.useraccountId, data.Name, i,data.firstname)"
                                    container="body" [ngStyle]="getbgColor(data.Name)">{{data.firstname}}</div>
                                </a><i class="fa fa-circle" aria-hidden="true" style="margin-right:5px;"
                                  [style.color]="data.color"></i> {{data.Name}} - {{data.Role}}</label>
                            </div>
                          </div>
                          <a class="btn btn-primary"
                            style="margin: 20px;background-color: #6eacaf !important;border: none !important;"
                            (click)="adduser()">Add</a>
                        </div>
                      </ng-template>
                    </ng-container>
                    <ng-container
                      *ngIf="type=='inbox' || type == 'approved' || type == 'Archived' || type == 'document' || type == 'Allotment' || type == 'Allotment1' || type == 'Sent'">
                      <div class="table-responsive table-striped" *ngIf="data_mail_value && data_mail_value.length>0"
                        [ngStyle]="{'margin-top': type=='document' || type=='inbox' ? '3.5rem' : '0rem'  }"
                        style="margin-top: 3.5rem ;">
                        <table class="table table-hover nowrap kit__mail__box">
                          <tbody>
                            <tr
                              *ngFor="let data of data_mail_value | paginate: { itemsPerPage: 10, currentPage: p, totalItems: totalitems }"
                              [style.font-weight]="data.status==1 ?'bold':'normal'">
                              <td class="text-center">
                                <div class="kit__utils__avatar kit__utils__avatar--rounded"
                                  style="display: inline-block;margin-right: 10px;">
                                  <div id="profileImage" placement="top" container="body"
                                    [ngStyle]="getbgColor(data.From)">{{data.firstname}}</div>
                                </div>
                                <i class="fa fa-envelope-open-o" style="cursor: pointer;" *ngIf="data.status==0"
                                  aria-hidden="true" (click)="markasunread(data)" tooltip="Mark as Unread"></i>
                                <i class=" fe fe-mail"
                                  (click)="gotomailinfo(data.designproductId,data.assigneduserid,data.id,data.attachment,data.doctype)"
                                  style=" font-size: large;cursor: pointer;" *ngIf="data.status==1"
                                  aria-hidden="true"></i>
                              </td>
                              <td
                                (click)="gotomailinfo(data.designproductId,data.assigneduserid,data.id,data.attachment,data.doctype)"
                                style="cursor: pointer;">{{data.From}}</td>
                              <td
                                (click)="gotomailinfo(data.designproductId,data.assigneduserid,data.id,data.attachment,data.doctype)"
                                style="cursor: pointer;">{{data.subject}}</td>
                              <td><span *ngIf="data.priority == 'Medium Priority'">Medium</span><span
                                  *ngIf="data.priority == 'High Priority'">High</span><span
                                  *ngIf="data.priority == 'Low Priority'">Low</span></td>
                              <td>
                                <button *ngIf="type == 'Allotment' && data.librarystatus==true"
                                  class="badge btn-primary" type="button" disabled
                                  (click)="btnsubmitClick(data.designproductId)"
                                  style="background-color:#d4d2d2;;cursor: pointer;">Publish</button>
                                <span *ngIf="type == 'Allotment' && data.librarystatus==false" class="badge btn-primary"
                                  (click)="btnsubmitClick(data.designproductId)"
                                  style="background-color:#8bbdbf;;cursor: pointer; ">Publish</span>
                              </td>
                              <!-- <td><em class="fe fe-paperclip text-default" *ngIf="data.attachment =='True'"></em></td> -->
                              <td>{{data.create_date | date:'MM/dd/yyyy'}}</td>
                              <td>{{data.create_date | date:'shortTime'}}</td>
                            </tr>
                          </tbody>
                        </table>
                      </div>

                      <pagination-controls *ngIf="data_mail_value && data_mail_value.length>0"
                        (pageChange)="p=$event;pageChanged($event)"></pagination-controls>

                      <ng-container *ngIf="data_mail_value==null; else emptyDataTemplate">
                        <div class="initial__inbox_loading"
                          style="z-index:1;top: 0%; left: 0%; position: absolute;opacity:0.7;">
                          <div style="position: absolute;bottom: 23px;left: 41%;font-size: 23px;margin: 0 auto;">
                            No Data to Display...
                          </div>
                        </div>
                      </ng-container>
                      <ng-template #emptyDataTemplate>
                        <div *ngIf="data_mail_value.length==0;" class="initial__inbox_loading"
                          style="z-index:1;top: 0%; left: 0%; position: absolute;opacity:0.7;">
                          <div style="position: absolute;bottom: 23px;left: 29%;font-size: 23px;margin: 0 auto;">
                            Getting workspace ready !... One moment please
                          </div>
                        </div>
                      </ng-template>

                    </ng-container>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>


share.ts

import { Component, OnInit, TemplateRef, ViewChild, ElementRef, Input } from '@angular/core';
import { from, Observable, Subscription } from 'rxjs';
import { Router, ActivatedRoute, NavigationExtras } from '@angular/router';
import { UserService } from '../../../shared/services/user.service';
import * as fileSaver from 'file-saver';
import { ToastrService } from 'ngx-toastr';
import { BsModalService } from 'ngx-bootstrap/modal';
import { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';
import { User } from 'src/app/shared/models/user.model';
@Component({
  selector: 'app-share',
  templateUrl: './share.component.html',
  styleUrls: ['./share.component.scss']
})
export class ShareComponent implements OnInit {
  modalRef: BsModalRef;
  editorValue: string = '';
  subscription: Subscription;
  subject:any = ''
  searchText:any;
  searchText0:any;
  priority:any = ''
  assignfor:any = ''
  editorValueType:any = ''
  description:any = ''
  showsidebar: boolean =false;
  naviDate: any;
  p: any;
  prioritylist=["High Priority","Medium Priority","Low Priority"];
  assignforlist=["Approval","Move to staging","Re-Edit"]
  documentname: any;
  documentid: any;
  userlist: any;
  selectedname=[];
  createDoc = {}
  userid: string;
  commentslist: any;
  overallcommentcount: any;
  documentinfo: any={create_date: "",
  firstname: "",
  priority: "",
  subject: "",
  useraccount_fk: '',
  username: ""};
  priorityselected: any;
  role: string;
  totalitems: any;
  bulist: any;
  constructor(private route:Router,private userService: UserService, private router: Router, private toast: ToastrService,private modalService: BsModalService) { 
    this.subscription = this.userService.navItem$
    .subscribe(item => {
      this.naviDate = item
      if (item)
        localStorage.setItem("localData", JSON.stringify(this.naviDate));
    }
    )
  }
  searchlistdata:any = []
  ngOnInit() {
    this.userid=localStorage.getItem("userid");
    this.role=localStorage.getItem("role");
      this.naviDate = JSON.parse(localStorage.getItem("localData"));
      let url = window.location.href;
     if (this.naviDate && url.includes('/notificationshare')){
       this.type='document_compose'
      this.documentname=this.naviDate.documentname?this.naviDate.documentname:'';
      this.documentid=this.naviDate.documentid;
      const designproductid = {
        'designproductid': this.documentid,
      }
      this.userService.commentslists(designproductid).subscribe(data => {
        this.commentslist=data.commentlist;
        this.overallcommentcount=data.overallcount
      });
      const documentId = {
        'designproductid': this.documentid,
      }
      this.userService.getdocumentinfo(documentId).subscribe(docdata => {
        if(docdata){
        this.documentinfo=docdata;
        if(docdata.useraccount_fk!=''){
          this.priorityselected=docdata.priority;
        this.selectedname.push({"id":docdata.useraccount_fk,"name":docdata.username,"firstletters":docdata.firstname});
        }else{
          this.priorityselected="";
        }
      }
      });
      }
      this.userService.searchlistdata().subscribe(data => {
        this.searchlistdata=data;
      });
      this.userService.businessunitlist().subscribe(data => {
        this.bulist=data;
      });
      this.getuserslist();
      this.getalldata();
  }
  inbox:any = []
  type:any = 'inbox'
  inboxcount:any;
  userDetail:User;
  getalldata(){
    this.userService.getalllibraryData().subscribe(data => {
      this.inbox = data;
    })  
    this.userService.currentUser.subscribe(
      (userData) => {
        if (userData){
          this.userDetail = userData;
          this.getcount_refresh()}
        })
    
    this.getInbox(this.type) 
  }
  onValueChanged(e){
    let type_value = ''
    if(this.type == 'inbox'){
      type_value = 'inbox'
    }else if(this.type == 'approved'){
      type_value = 'Approval'
    }
    else if(this.type == 'Archived'){
      type_value = 'Archived'
    }
    else if(this.type == 'Allotment'){
      type_value = 'Allotment'
    }
    else if(this.type == 'Allotment1'){
      type_value = 'Allotment1'
    }else{
      type_value = 'ReEdit'
    }
    var obj={"type1": type_value ,
      "content": e.value};
    this.userService.bubasedinboxsearch(obj).subscribe(data => {
      if(data[0]){
        this.data_mail_value = data;
        this.totalitems=data.length
      }
      else{
        this.data_mail_value = null;
        this.totalitems=0;
      }
    })
  }
  gotomailinfo(designproductId,From,messageid,attachment,doctype){
  //  console.log(doctype)
    var designid='';
    if(designproductId==null){
      designid=""
    }else{
      designid=designproductId
    }
    var obje = {
      "designproductId":designid,
      "senderId":String(From),
      "useraccountId": this.userid,
      "messageid": messageid,
      "attachment": attachment,
      "doctype": doctype,
      "type": this.type
    }
    this.userService.changeNav(obje)
    this.router.navigate([`/client/inbox_compose`]);
  }
  btnsubmitClick(id) {
    console.log(id)
      this.router.navigate([`/client/clientdashboard/myallotmentsubmit/${id}`])
  }
  getcount_refresh(){
    this.userService.getallcount().subscribe(data => {
      this.userDetail.operationMessage = data.overallinbox;
    }) 
    this.userService.getallinboxcount().subscribe(data => {
      this.inboxcount = data;
    })
  }
  data_mail_value = []
  getInbox(type){
    let type_value = ''
    this.data_mail_value = []
    if(type == 'inbox'){
      type_value = 'inbox'
    }else if(type == 'approved'){
      type_value = 'Approval'
    }
    else if(type == 'Archived'){
      type_value = 'Archived'
    }
    else if(type == 'Allotment'){
      type_value = 'Allotment'
    }
    else if(type == 'Allotment1'){
      type_value = 'Allotment1'
    }else{
      type_value = 'ReEdit'
    }
    const totalMessageJson = {
      'pageno': 1,
      'type1': type_value
    }
    this.userService.getallinbox(totalMessageJson).subscribe(data => {
      if(data[0]){
      this.data_mail_value = data[0].finallist;
      this.totalitems=data[0].totalno
      }
      else{
        this.data_mail_value = null;
        this.totalitems=0;
      }
    }) 

  }
  getsent(){
    this.data_mail_value = [];
    const sendMessageJson = {
      'pageno': 1,
      'type1': 'inbox'
    }
    this.userService.getsentbox(sendMessageJson).subscribe(data => {
      if(data[0]){
      this.data_mail_value = data[0].finallist;
      this.totalitems=data[0].totalno
      }
      else{
        this.data_mail_value = null;
        this.totalitems=0;
      }
    }) 
  }
  getSearchBoxValue(key){
var obj={
  "content": String(key),
  "type1": String(this.type)
}
this.userService.inboxsearch(obj).subscribe(data => {
  this.data_mail_value = data;
  this.totalitems=data.length
}) 
  }
  pageChanged(e){
    console.log(e)
    this.data_mail_value = [];
    if(this.type=='Sent'){
      const sentMessageJson = {
        'pageno': e,
        'type1': 'inbox'
      }
    this.userService.getsentbox(sentMessageJson).subscribe(data => {
      if(data[0]){
      this.data_mail_value = data[0].finallist;
      this.totalitems=data[0].totalno;
      }
      else{
        this.data_mail_value = null;
        this.totalitems=0;
      }
    }) 
  }else{
    let type_value='';
    if(this.type == 'inbox'){
      type_value = 'inbox'
    }else if(this.type == 'approved'){
      type_value = 'Approval'
    }
    else if(this.type == 'Archived'){
      type_value = 'Archived'
    }
    else if(this.type == 'Allotment'){
      type_value = 'Allotment'
    }
    else if(this.type == 'Allotment1'){
      type_value = 'Allotment1'
    }else{
      type_value = 'ReEdit'
    }
    const totalMessageJson = {
      'pageno': e,
      'type1': type_value
    }
    this.userService.getallinbox(totalMessageJson).subscribe(data => {
      if(data[0]){
      this.data_mail_value = data[0].finallist;
      this.totalitems=data[0].totalno;
      }
      else{
        this.data_mail_value = null;
        this.totalitems=0;
      }
    }) 
  }
      }
  getactivename(id,name,i,firstletters){
    console.log(id)
    if (this.selectedname.filter(x => x.id === id).length === 0) {
      this.selectedname.push({'id':id, 'name':name, 'firstletters':firstletters});
      this.getactiveuser(id);
    }else{
      this.selectedname.forEach( (item, index) => {
        if(item.id === id){
          this.selectedname.splice(index, 1);
          this.getactiveuser(id);
        }
            })
//            this.selectedname=this.selectedname;
    }
  }
  removeuser(id){
    this.selectedname.forEach( (item, index) => {
      if(item.id === id){
        this.selectedname.splice(index, 1);
      }
          })
  }
  adduser(){
    this.modalRef.hide()
  }
  closepopup(){
    this.modalRef.hide();
    this.selectedname=[];
  }
  getactiveuser(id){
    for(var e=0;e<this.selectedname.length;e++){
     // console.log(this.selectedname[e])
      if(this.selectedname[e].id==id){
        return true;
      }
    }
    if (this.selectedname.filter(x => x.id === id).length === 0) {
      return false;
    }
  }
  getbgColor(char){
    let myStyles = {
      'background-color': '#2d8d99'
    };
    if(char.charAt(0).toUpperCase() == 'A'){
      myStyles["background-color"] = '#34495e'
    }else if(char.charAt(0).toUpperCase() == 'D'){
      myStyles["background-color"] = '#2d8d99'
    }else if(char.charAt(0).toUpperCase() == 'C'){
      myStyles["background-color"] = '#550055'
    }else if(char.charAt(0).toUpperCase() == 'J'){
      myStyles["background-color"] = '#5a4586'
    }
    return myStyles
  }
  getChar(char){
    return char.charAt(0).toUpperCase()
  }
  btnEditClick(data){
    this.documentname = data.name;
    this.documentid = data.designproductId
    const designproductid = {
      'designproductid': data.designproductId,
    }
    this.userService.commentslists(designproductid).subscribe(data => {
      this.commentslist=data.commentlist;
      this.overallcommentcount=data.overallcount
    });
    const designProductId = {
      'designproductid': data.designproductId,
    }
    this.userService.getdocumentinfo(designProductId).subscribe(docdata0 => {
      if(docdata0){
      this.documentinfo=docdata0;
      if(docdata0.useraccount_fk!=''){
        this.priorityselected=docdata0.priority;
      this.selectedname.push({"id":docdata0.useraccount_fk,"name":docdata0.username,"firstletters":docdata0.firstname});
      }else{
        this.priorityselected="";
      }
    }
    });
  }
  createDocument(value, createDoc) {
    var userlist=JSON.stringify(this.selectedname);
//userlist=userlist.replace(/^"(.*)"$/, '$1');
//console.log(userlist);
 // var userdata=JSON.stringify(userlist);
  //userdata=userdata.slice(1, -1);
  var doctype='';
  if(this.naviDate && this.naviDate.doctype!=null){
    doctype=this.naviDate.doctype;
  }else{
    doctype=''
  }
  var assignf='';
  if(value.assignfor=="Re-Edit"){
    assignf="ReEdit"
  }
  else if(value.assignfor=="Move to staging"){
    assignf="Allotment"
  }
  else{
    assignf=value.assignfor;
  }
    const obj={
      "assignedfor": ""+assignf+"",
      "assigneduser_fk": userlist,
      "description": ""+value.description+"",
      "designproduct_fk": this.documentid?this.documentid:"",
      "name": this.documentname?this.documentname:'',
      "priority": ""+this.priorityselected+"",
      "subject": ""+value.subject+"",
      "doctype": doctype
    }
    this.userService.shareform(obj).subscribe(data => {
      this.toast.success('Successfully Sent', '', { progressBar: true });
      createDoc.reset();
      this.selectedname=[];
      this.getcount_refresh();
      this.documentname='';
      this.type='inbox';
      this.getInbox('inbox');
    });
//    console.log(value);
  //  console.log(createDoc)
  }
  getuserslist(){
    const usernameList = {
      'role_fk': this.role,
    }
    this.userService.userslist(usernameList).subscribe(data => {
 this.userlist=data;
    });
  }
  markasunread(data){
    const idJson = {
      'id': data.id,
    }
this.userService.markasunreadmsg(idJson).subscribe(msg => {
 this.getInbox(this.type);
 this.getcount_refresh();
     });
  }
  userlistsearch(e){
    var key="";
    if(e.target.value==''){
      key="0";
    }else{
      key=e.target.value;
    }
    const keyJson = {
      'searchword': key,
    }
    this.userService.userslistsearch(keyJson).subscribe(data => {
      this.userlist=data;
         });
  //  console.log(e.target.value) 
  }
  openrightsidebar(){
this.showsidebar=!this.showsidebar;
  }
  addmember(userslist){
    this.modalRef = this.modalService.show(userslist, { class: 'modal-md', backdrop: 'static' });
  }
}
